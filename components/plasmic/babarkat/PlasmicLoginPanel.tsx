/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: UmTKQn0WdwT-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: OG1SoduAPhRs/codeComponent
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicLoginPanel.module.css"; // plasmic-import: UmTKQn0WdwT-/css

import Icon154Icon from "./icons/PlasmicIcon__Icon154"; // plasmic-import: vEkGA7arj2Yg/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dXgXrJG5lp3Z/icon
import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: T5qnRYhm3_iD/icon
import Icon55Icon from "./icons/PlasmicIcon__Icon55"; // plasmic-import: pYVCSSEZE7RE/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jg6gpiNRWEQd/icon
import Icon153Icon from "./icons/PlasmicIcon__Icon153"; // plasmic-import: 0QI_dVUCt1kX/icon
import LeftArrowBackSvgrepoComSvgIcon from "./icons/PlasmicIcon__LeftArrowBackSvgrepoComSvg"; // plasmic-import: LNmML4UO8Edb/icon
import Icon82Icon from "./icons/PlasmicIcon__Icon82"; // plasmic-import: 9IvX4CneDX4f/icon

createPlasmicElementProxy;

export type PlasmicLoginPanel__VariantMembers = {
  unnamedVariant: "unnamedVariant";
  unnamedVariant2: "unnamedVariant2";
  password: "password";
  loginByPassword: "loginByPassword";
};
export type PlasmicLoginPanel__VariantsArgs = {
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
  unnamedVariant2?: SingleBooleanChoiceArg<"unnamedVariant2">;
  password?: SingleBooleanChoiceArg<"password">;
  loginByPassword?: SingleBooleanChoiceArg<"loginByPassword">;
};
type VariantPropType = keyof PlasmicLoginPanel__VariantsArgs;
export const PlasmicLoginPanel__VariantProps = new Array<VariantPropType>(
  "unnamedVariant",
  "unnamedVariant2",
  "password",
  "loginByPassword"
);

export type PlasmicLoginPanel__ArgsType = { disabled?: boolean };
type ArgPropType = keyof PlasmicLoginPanel__ArgsType;
export const PlasmicLoginPanel__ArgProps = new Array<ArgPropType>("disabled");

export type PlasmicLoginPanel__OverridesType = {
  root?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  username?: Flex__<"div">;
  button4?: Flex__<typeof Button>;
  fragmentInput4?: Flex__<typeof Input>;
  select3?: Flex__<typeof AntdSelect>;
  fragmentInput5?: Flex__<typeof Input>;
  fragmentInput6?: Flex__<typeof Input>;
  select4?: Flex__<typeof AntdSelect>;
  button?: Flex__<typeof Button>;
  fragmentInput?: Flex__<typeof Input>;
  select2?: Flex__<typeof AntdSelect>;
  fragmentInput3?: Flex__<typeof Input>;
  fragmentInput2?: Flex__<typeof Input>;
  select?: Flex__<typeof AntdSelect>;
  btnNumber?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  button3?: Flex__<typeof Button>;
  btnSaraf?: Flex__<typeof Button>;
  sendcode?: Flex__<typeof Button>;
  button5?: Flex__<typeof Button>;
  figmaPaste?: Flex__<"div">;
  group?: Flex__<"div">;
  group2?: Flex__<"div">;
  rectangle35?: Flex__<"div">;
  group3?: Flex__<"div">;
  group4?: Flex__<"div">;
  rectangle23?: Flex__<"div">;
  group5?: Flex__<"div">;
  rectangle24?: Flex__<"div">;
  group6?: Flex__<"div">;
  rectangle25?: Flex__<"div">;
  group7?: Flex__<"div">;
  rectangle?: Flex__<"div">;
  group8?: Flex__<"div">;
  group9?: Flex__<"div">;
  group10?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  modal?: Flex__<typeof AntdModal>;
};

export interface DefaultLoginPanelProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLoginPanel__RenderFunc(props: {
  variants: PlasmicLoginPanel__VariantsArgs;
  args: PlasmicLoginPanel__ArgsType;
  overrides: PlasmicLoginPanel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      },
      {
        path: "fragmentInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "time",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return 60;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 60;
              }
              throw e;
            }
          })()
      },
      {
        path: "loadedbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "code",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "saraf",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "sjsjd1n", value: 101 },
          { label: "sjs2jdn", value: 102 },
          { label: "sjsj3dn", value: 103 },
          { label: "sjs4jdn", value: 104 }
        ]
      },
      {
        path: "unnamedVariant2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant2
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.saraf[0].value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 100;
                  }
                  throw e;
                }
              })()
            : hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.saraf[0].value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 100;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.saraf[0].value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 100;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "selectsaraf",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "password",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.password
      },
      {
        path: "pass",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loginByPassword",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loginByPassword
      },
      {
        path: "fragmentInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "pass1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "password"
      },
      {
        path: "contry",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            value: "+98",
            label: "\ud83c\uddee\ud83c\uddf7 +98",
            description: "Iran",
            phoneFormats: {
              type: "Mobile",
              regex: "^9\\d{9}$",
              example: "9123456789"
            }
          },
          {
            value: "+93",
            label: "\ud83c\udde6\ud83c\uddeb +93",
            description: "Afghanistan",
            phoneFormats: {
              type: "Mobile",
              regex: "^7\\d{8}$",
              example: "70123456"
            }
          },
          {
            value: "+90",
            label: "\ud83c\uddf9\ud83c\uddf7 +90",
            description: "Turkey",
            phoneFormats: {
              type: "Mobile",
              regex: "^5\\d{9}$",
              example: "5012345678"
            }
          }
        ]
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "+98"
      },
      {
        path: "selectContry",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.select2.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "btnNumber.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button2.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button3.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "btnSaraf.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "sendcode.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button4.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "+98"
      },
      {
        path: "fragmentInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "loginByPassword", "loginByPassword")
            ? (() => {
                try {
                  return $state.username2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ""
      },
      {
        path: "fragmentInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.saraf[0].value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 100;
                  }
                  throw e;
                }
              })()
            : hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.saraf[0].value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 100;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.saraf[0].value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 100;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "username2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("userbabarcat"))?.username;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button5.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicLoginPanel.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLoginPanel.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLoginPanel.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicLoginPanel.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicLoginPanel.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          styleTokensClassNames_antd_5_hostless,
          styleTokensClassNames_plasmic_rich_components,
          sty.root,
          {
            [sty.rootglobal_experiment_override]: hasVariant(
              globalVariants,
              "experiment",
              "override"
            ),
            [sty.rootglobal_unnamedGlobalGroupOfVariants2_unnamedVariant_global_unnamedGlobalGroupOfVariants_unnamedVariant]:
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants",
                "unnamedVariant"
              ) &&
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants2",
                "unnamedVariant"
              ),
            [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants",
                "unnamedVariant"
              ),
            [sty.rootloginByPassword]: hasVariant(
              $state,
              "loginByPassword",
              "loginByPassword"
            ),
            [sty.rootloginByPassword_password]:
              hasVariant($state, "password", "password") &&
              hasVariant($state, "loginByPassword", "loginByPassword"),
            [sty.rootloginByPassword_password_unnamedVariant2]:
              hasVariant($state, "loginByPassword", "loginByPassword") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
              hasVariant($state, "password", "password"),
            [sty.rootloginByPassword_unnamedVariant2]:
              hasVariant($state, "loginByPassword", "loginByPassword") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
            [sty.rootpassword]: hasVariant($state, "password", "password"),
            [sty.rootpassword_unnamedVariant2]:
              hasVariant($state, "password", "password") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
            [sty.rootunnamedVariant2]: hasVariant(
              $state,
              "unnamedVariant2",
              "unnamedVariant2"
            ),
            [sty.rootunnamedVariant]: hasVariant(
              $state,
              "unnamedVariant",
              "unnamedVariant"
            ),
            [sty.rootunnamedVariant_loginByPassword]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "loginByPassword", "loginByPassword"),
            [sty.rootunnamedVariant_loginByPassword_password_unnamedVariant2]:
              hasVariant($state, "loginByPassword", "loginByPassword") &&
              hasVariant($state, "password", "password") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
              hasVariant($state, "unnamedVariant", "unnamedVariant"),
            [sty.rootunnamedVariant_loginByPassword_unnamedVariant2]:
              hasVariant($state, "loginByPassword", "loginByPassword") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
              hasVariant($state, "unnamedVariant", "unnamedVariant"),
            [sty.rootunnamedVariant_password]:
              hasVariant($state, "password", "password") &&
              hasVariant($state, "unnamedVariant", "unnamedVariant"),
            [sty.rootunnamedVariant_password_unnamedVariant2]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
              hasVariant($state, "password", "password"),
            [sty.rootunnamedVariant_unnamedVariant2]:
              hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
              hasVariant($state, "unnamedVariant", "unnamedVariant")
          }
        )}
        onLoad={async event => {
          const $steps = {};

          $steps["updatePassword"] =
            localStorage.getItem("userbabarcat") != null &&
            sessionStorage.getItem("userbabarcatToken") == null &&
            localStorage.getItem("userBabarkatPass") != null
              ? (() => {
                  const actionArgs = { vgroup: "password", operation: 2 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    const oldValue = $stateGet($state, vgroup);
                    $stateSet($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["updatePassword"] != null &&
            typeof $steps["updatePassword"] === "object" &&
            typeof $steps["updatePassword"].then === "function"
          ) {
            $steps["updatePassword"] = await $steps["updatePassword"];
          }

          $steps["goToPanel"] =
            localStorage.getItem("userbabarcat") != null &&
            sessionStorage.getItem("userbabarcatToken") != null
              ? (() => {
                  const actionArgs = { destination: `/panel` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["goToPanel"] != null &&
            typeof $steps["goToPanel"] === "object" &&
            typeof $steps["goToPanel"].then === "function"
          ) {
            $steps["goToPanel"] = await $steps["goToPanel"];
          }
        }}
      >
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return !$state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return !$state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            cascade={
              hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? false
                : undefined
            }
            className={classNames("__wab_instance", sty.reveal, {
              [sty.revealloginByPassword]: hasVariant(
                $state,
                "loginByPassword",
                "loginByPassword"
              ),
              [sty.revealpassword]: hasVariant($state, "password", "password"),
              [sty.revealunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
            damping={
              hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? 0.5
                : undefined
            }
            direction={
              hasVariant($state, "loginByPassword", "loginByPassword")
                ? "left"
                : hasVariant($state, "password", "password")
                ? "left"
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? "left"
                : undefined
            }
            effect={
              hasVariant($state, "loginByPassword", "loginByPassword")
                ? "fade"
                : hasVariant($state, "password", "password")
                ? "fade"
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? "slide"
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? "fade"
                : undefined
            }
            reverse={
              hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? false
                : undefined
            }
            triggerOnce={true}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___6HvRd,
                hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "animate"
                  : undefined,
                {
                  [sty.freeBoxloginByPassword___6HvRdGqb7]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.freeBoxpassword___6HvRdVrixq]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.freeBoxunnamedVariant2___6HvRdtCajl]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxunnamedVariant___6HvRdBNary]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant_loginByPassword___6HvRdBNaryGqb7]:
                    hasVariant($state, "loginByPassword", "loginByPassword") &&
                    hasVariant($state, "unnamedVariant", "unnamedVariant"),
                  [sty.freeBoxunnamedVariant_password___6HvRdBNaryVrixq]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "password", "password"),
                  [sty.freeBoxunnamedVariant_unnamedVariant2___6HvRdBNaryTCajl]:
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                }
              )}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___5PujS, {
                  [sty.freeBoxloginByPassword___5PujSgqb7]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.freeBoxloginByPassword_password___5PujSgqb7Vrixq]:
                    hasVariant($state, "password", "password") &&
                    hasVariant($state, "loginByPassword", "loginByPassword"),
                  [sty.freeBoxpassword___5PujSvrixq]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.freeBoxpassword_unnamedVariant2___5PujSvrixqTCajl]:
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant($state, "password", "password"),
                  [sty.freeBoxunnamedVariant2___5PujStCajl]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxunnamedVariant___5PujSbNary]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant_loginByPassword___5PujSbNaryGqb7]:
                    hasVariant($state, "loginByPassword", "loginByPassword") &&
                    hasVariant($state, "unnamedVariant", "unnamedVariant"),
                  [sty.freeBoxunnamedVariant_unnamedVariant2___5PujSbNaryTCajl]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                })}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant($state, "password", "password")
                      ? Icon154Icon
                      : Icon154Icon
                  }
                  className={classNames(projectcss.all, sty.svg__o73GI, ``, {
                    [sty.svgloginByPassword__o73GIgqb7]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.svgloginByPassword_password__o73GIgqb7Vrixq]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) && hasVariant($state, "password", "password"),
                    [sty.svgpassword__o73GIvrixq]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.svgpassword_unnamedVariant2__o73GIvrixqTCajl]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) && hasVariant($state, "password", "password"),
                    [sty.svgunnamedVariant2__o73GItCajl]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.svgunnamedVariant__o73GIbNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    ),
                    [sty.svgunnamedVariant_loginByPassword__o73GIbNaryGqb7]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant"),
                    [sty.svgunnamedVariant_loginByPassword_password_unnamedVariant2__o73GIbNaryGqb7VrixqTCajl]:
                      hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.svgunnamedVariant_password_unnamedVariant2__o73GIbNaryVrixqTCajl]:
                      hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "password", "password"),
                    [sty.svgunnamedVariant_unnamedVariant2__o73GIbNaryTCajl]:
                      hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                  })}
                  id={"logoLogin"}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iAtsS,
                    {
                      [sty.textloginByPassword__iAtsSgqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      )
                    }
                  )}
                >
                  {
                    " \u0627\u067e\u0644\u06cc\u06a9\u0634\u0646 \u0645\u062e\u0635\u0648\u0635 \u0627\u0645\u0627\u0646\u062a\u200c\u062f\u0627\u0631"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"username"}
                data-plasmic-override={overrides.username}
                className={classNames(projectcss.all, sty.username, {
                  [sty.usernameloginByPassword]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.usernameloginByPassword_password]:
                    hasVariant($state, "password", "password") &&
                    hasVariant($state, "loginByPassword", "loginByPassword"),
                  [sty.usernamepassword]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.usernamepassword_unnamedVariant2]:
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant($state, "password", "password"),
                  [sty.usernameunnamedVariant2]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.usernameunnamedVariant]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  ),
                  [sty.usernameunnamedVariant_unnamedVariant2]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__ijwgb, {
                    [sty.freeBoxloginByPassword__ijwgbGqb7]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.freeBoxunnamedVariant__ijwgbBNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kxa2A,
                      {
                        [sty.textloginByPassword__kxa2AGqb7]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.textpassword__kxa2AVrixq]: hasVariant(
                          $state,
                          "password",
                          "password"
                        ),
                        [sty.textunnamedVariant2__kxa2AtCajl]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.textunnamedVariant__kxa2ABNary]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ),
                        [sty.textunnamedVariant_loginByPassword__kxa2ABNaryGqb7]:
                          hasVariant(
                            $state,
                            "loginByPassword",
                            "loginByPassword"
                          ) &&
                          hasVariant($state, "unnamedVariant", "unnamedVariant")
                      }
                    )}
                  >
                    {hasVariant($state, "loginByPassword", "loginByPassword")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                      : hasVariant($state, "password", "password")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                      ? "\u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0645\u0627\u0646\u062a\u062f\u0627\u0631\u06cc"
                      : hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                      : "\u062a\u0627\u06cc\u06cc\u062f \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                  </div>
                  <Button
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    className={classNames("__wab_instance", sty.button4, {
                      [sty.button4loginByPassword]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.button4loginByPassword_password]:
                        hasVariant($state, "password", "password") &&
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                      [sty.button4password]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.button4password_unnamedVariant2]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) && hasVariant($state, "password", "password"),
                      [sty.button4unnamedVariant2]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.button4unnamedVariant]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.button4unnamedVariant_unnamedVariant2]:
                        hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ) &&
                        hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                    })}
                    color={
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? "softGreen"
                        : undefined
                    }
                    loadingviow={generateStateValueProp($state, [
                      "button4",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateUnnamedVariant"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "unnamedVariant",
                              operation: 6
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, false);
                              return false;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUnnamedVariant"] != null &&
                        typeof $steps["updateUnnamedVariant"] === "object" &&
                        typeof $steps["updateUnnamedVariant"].then ===
                          "function"
                      ) {
                        $steps["updateUnnamedVariant"] = await $steps[
                          "updateUnnamedVariant"
                        ];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button4",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    {hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647"
                      : "Button"}
                  </Button>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zi0Wx,
                    {
                      [sty.textloginByPassword__zi0WxGqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword__zi0WxVrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textunnamedVariant2__zi0WxtCajl]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant__zi0WxBNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "unnamedVariant2", "unnamedVariant2") ? (
                    "\u06cc\u06a9\u06cc \u0627\u0632 \u0627\u0645\u0627\u0646\u062a\u062f\u0627\u0631\u06cc \u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0628\u0647 \u0622\u0646\u0647\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a\u06cc\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a\u0627\u0646 \u0628\u0647 \u0622\u0646 \u0645\u062a\u0635\u0644 \u0634\u0648\u062f."
                  ) : hasVariant($state, "unnamedVariant", "unnamedVariant") ? (
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (() => {
                              if ($state.selectContry == "+98")
                                return (
                                  "لطفا کد 4 رقمی ارسال شده به شماره <b style='color: #2DC57B;'>" +
                                  $state.number +
                                  "</b> را وارد نمایید."
                                );
                              else
                                return (
                                  "لطفا کد 4 رقمی ارسال شده به <b style='color: #2DC57B;'>واتساپ</b> شماره <b style='color: #2DC57B;'>" +
                                  $state.number +
                                  "</b> را وارد نمایید."
                                );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 09155113179 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  ) : (
                    "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f. \u0633\u067e\u0633 \u06cc\u06a9 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0628\u0631\u0627\u06cc \u0627\u062d\u0631\u0627\u0632 \u0647\u0648\u06cc\u062a \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc \u0634\u0648\u062f"
                  )}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__xCgro, {
                    [sty.freeBoxloginByPassword__xCgroGqb7]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    )
                  })}
                >
                  <Input
                    data-plasmic-name={"fragmentInput4"}
                    data-plasmic-override={overrides.fragmentInput4}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentInput4,
                      {
                        [sty.fragmentInput4loginByPassword]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.fragmentInput4loginByPassword_password]:
                          hasVariant($state, "password", "password") &&
                          hasVariant(
                            $state,
                            "loginByPassword",
                            "loginByPassword"
                          ),
                        [sty.fragmentInput4loginByPassword_unnamedVariant2]:
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          ) &&
                          hasVariant(
                            $state,
                            "loginByPassword",
                            "loginByPassword"
                          ),
                        [sty.fragmentInput4password]: hasVariant(
                          $state,
                          "password",
                          "password"
                        ),
                        [sty.fragmentInput4password_unnamedVariant2]:
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          ) && hasVariant($state, "password", "password"),
                        [sty.fragmentInput4unnamedVariant2]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.fragmentInput4unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ),
                        [sty.fragmentInput4unnamedVariant_unnamedVariant2]:
                          hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          ) &&
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          )
                      }
                    )}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput4",
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={(() => {
                      try {
                        return $state.contry.find(
                          item => item.value == $state.selectContry
                        ).phoneFormats.example;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    type={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "tel"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput4",
                      "value"
                    ])}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__p4PD, {
                      [sty.freeBoxunnamedVariant__p4PDbNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.freeBoxunnamedVariant_unnamedVariant2__p4PDbNaryTCajl]:
                        hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ) &&
                        hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                    })}
                  >
                    <AntdSelect
                      data-plasmic-name={"select3"}
                      data-plasmic-override={overrides.select3}
                      bordered={false}
                      className={classNames("__wab_instance", sty.select3, {
                        [sty.select3loginByPassword]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.select3loginByPassword_password]:
                          hasVariant($state, "password", "password") &&
                          hasVariant(
                            $state,
                            "loginByPassword",
                            "loginByPassword"
                          ),
                        [sty.select3password]: hasVariant(
                          $state,
                          "password",
                          "password"
                        ),
                        [sty.select3password_unnamedVariant2]:
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          ) && hasVariant($state, "password", "password"),
                        [sty.select3unnamedVariant2]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.select3unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      })}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        styleTokensClassNames,
                        styleTokensClassNames_antd_5_hostless,
                        styleTokensClassNames_plasmic_rich_components
                      )}
                      defaultValue={"+98"}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select3",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return $state.contry;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select3__popup"]}
                      size={"large"}
                      value={generateStateValueProp($state, [
                        "select3",
                        "value"
                      ])}
                    />
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1IDqV,
                    {
                      [sty.textloginByPassword___1IDqVgqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword___1IDqVvrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textunnamedVariant2___1IDqVtCajl]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant___1IDqVbNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.textunnamedVariant_unnamedVariant2___1IDqVbNaryTCajl]:
                        hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ) &&
                        hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginByPassword"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginByPassword",
                            operation: 4
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, true);
                            return true;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginByPassword"] != null &&
                      typeof $steps["updateLoginByPassword"] === "object" &&
                      typeof $steps["updateLoginByPassword"].then === "function"
                    ) {
                      $steps["updateLoginByPassword"] = await $steps[
                        "updateLoginByPassword"
                      ];
                    }
                  }}
                >
                  {
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0648 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 >"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__icaL,
                    {
                      [sty.textloginByPassword__icaLGqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword__icaLVrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textunnamedVariant2__icaLTCajl]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant__icaLBNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.textunnamedVariant_loginByPassword__icaLBNaryGqb7]:
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ) &&
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                    }
                  )}
                >
                  {hasVariant($state, "loginByPassword", "loginByPassword")
                    ? "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                    : hasVariant($state, "password", "password")
                    ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                    : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                    ? "\u0627\u0646\u062a\u062e\u0627\u0628 \u0635\u0631\u0627\u0641\u06cc"
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                    : "\u062a\u0627\u06cc\u06cc\u062f \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mA6Rs,
                    {
                      [sty.textloginByPassword__mA6RsGqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword__mA6RsVrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textunnamedVariant2__mA6RstCajl]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant__mA6RsBNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginByPassword"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginByPassword",
                            operation: 4
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, true);
                            return true;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginByPassword"] != null &&
                      typeof $steps["updateLoginByPassword"] === "object" &&
                      typeof $steps["updateLoginByPassword"].then === "function"
                    ) {
                      $steps["updateLoginByPassword"] = await $steps[
                        "updateLoginByPassword"
                      ];
                    }
                  }}
                >
                  {hasVariant($state, "unnamedVariant2", "unnamedVariant2") ? (
                    "\u06cc\u06a9\u06cc \u0627\u0632 \u0635\u0631\u0627\u0641\u06cc\u200c\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0628\u0647 \u0622\u0646\u0647\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a\u06cc\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a\u0627\u0646 \u0628\u0647 \u0622\u0646 \u0645\u062a\u0635\u0644 \u0634\u0648\u062f."
                  ) : hasVariant($state, "unnamedVariant", "unnamedVariant") ? (
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (() => {
                              if ($state.selectContry == "+98")
                                return (
                                  "لطفا کد 4 رقمی ارسال شده به شماره <b style='color: #2DC57B;'>" +
                                  $state.number +
                                  "</b> را وارد نمایید."
                                );
                              else
                                return (
                                  "لطفا کد 4 رقمی ارسال شده به <b style='color: #2DC57B;'>واتساپ</b> شماره <b style='color: #2DC57B;'>" +
                                  $state.number +
                                  "</b> را وارد نمایید."
                                );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 09155113179 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  ) : (
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0648 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 "
                  )}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__n4EL, {
                    [sty.freeBoxloginByPassword__n4ELgqb7]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.freeBoxpassword__n4ELvrixq]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.freeBoxunnamedVariant2__n4ELtCajl]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.freeBoxunnamedVariant__n4ELbNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <Input
                    data-plasmic-name={"fragmentInput5"}
                    data-plasmic-override={overrides.fragmentInput5}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentInput5,
                      {
                        [sty.fragmentInput5loginByPassword]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.fragmentInput5loginByPassword_password]:
                          hasVariant(
                            $state,
                            "loginByPassword",
                            "loginByPassword"
                          ) && hasVariant($state, "password", "password"),
                        [sty.fragmentInput5password]: hasVariant(
                          $state,
                          "password",
                          "password"
                        ),
                        [sty.fragmentInput5unnamedVariant2]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.fragmentInput5unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput5",
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      hasVariant($state, "loginByPassword", "loginByPassword")
                        ? ``
                        : hasVariant($state, "password", "password")
                        ? ``
                        : "98+"
                    }
                    type={
                      hasVariant($state, "loginByPassword", "loginByPassword")
                        ? "text"
                        : hasVariant($state, "password", "password")
                        ? (() => {
                            try {
                              return $state.pass1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "password";
                              }
                              throw e;
                            }
                          })()
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "tel"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput5",
                      "value"
                    ])}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__ldlJj, {
                    [sty.freeBoxunnamedVariant__ldlJjBNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <Input
                    data-plasmic-name={"fragmentInput6"}
                    data-plasmic-override={overrides.fragmentInput6}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentInput6,
                      {
                        [sty.fragmentInput6unnamedVariant2]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.fragmentInput6unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ),
                        [sty.fragmentInput6unnamedVariant_unnamedVariant2]:
                          hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          ) &&
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          )
                      }
                    )}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput6",
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? ``
                        : "98+"
                    }
                    type={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "number"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput6",
                      "value"
                    ])}
                  />
                </div>
                {(
                  hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xcDsY,
                      {
                        [sty.textunnamedVariant__xcDsYbNary]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ),
                        [sty.textunnamedVariant_unnamedVariant2__xcDsYbNaryTCajl]:
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          ) &&
                          hasVariant($state, "unnamedVariant", "unnamedVariant")
                      }
                    )}
                  >
                    {hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (
                                "ارسال مجدد پیامک  (" +
                                "<b style='color: #2DC57B;'>" +
                                $state.time +
                                "</b>" +
                                ")"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ) ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (
                                "ارسال مجدد پیامک  (" +
                                "<b style='color: #2DC57B;'>" +
                                $state.time +
                                "</b>" +
                                ")"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : (
                      "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)"
                    )}
                  </div>
                ) : null}
                <Timer
                  className={classNames("__wab_instance", sty.timer__ga7VV, {
                    [sty.timerpassword__ga7VVvrixq]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.timerunnamedVariant__ga7VVbNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  intervalSeconds={
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? 1
                      : undefined
                  }
                  isRunning={
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  }
                  onTick={async () => {
                    const $steps = {};

                    $steps["updateTime"] =
                      $state.time > 0
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["time"]
                              },
                              operation: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue - 1);
                              return oldValue - 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateTime"] != null &&
                      typeof $steps["updateTime"] === "object" &&
                      typeof $steps["updateTime"].then === "function"
                    ) {
                      $steps["updateTime"] = await $steps["updateTime"];
                    }
                  }}
                  runWhileEditing={
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? false
                      : false
                  }
                />

                {(
                  hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : false
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__b8VzG,
                      {
                        [sty.textunnamedVariant__b8VzGbNary]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "GET",
                                "https://n8n.babarkat.com/webhook/Babarkat/login",
                                (() => {
                                  try {
                                    return { mobile: $state.number };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateTime"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["time"]
                              },
                              operation: 0,
                              value: 60
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTime"] != null &&
                        typeof $steps["updateTime"] === "object" &&
                        typeof $steps["updateTime"].then === "function"
                      ) {
                        $steps["updateTime"] = await $steps["updateTime"];
                      }
                    }}
                  >
                    {hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9"
                      : "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)"}
                  </div>
                ) : null}
                <AntdSelect
                  data-plasmic-name={"select4"}
                  data-plasmic-override={overrides.select4}
                  className={classNames("__wab_instance", sty.select4, {
                    [sty.select4unnamedVariant2]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.select4unnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    ),
                    [sty.select4unnamedVariant_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                  })}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    styleTokensClassNames,
                    styleTokensClassNames_antd_5_hostless,
                    styleTokensClassNames_plasmic_rich_components
                  )}
                  defaultValue={
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.saraf[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 100;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.saraf[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 100;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.saraf[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 100;
                            }
                            throw e;
                          }
                        })()
                  }
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select4",
                      "value"
                    ]).apply(null, eventArgs);

                    (async (value, option) => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return $state.saraf;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [{ type: "option" }];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={null}
                  popupScopeClassName={sty["select4__popup"]}
                  size={"large"}
                  suffixIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) && hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon37Icon
                          : Icon10Icon
                      }
                      className={classNames(projectcss.all, sty.svg__uXxua, {
                        [sty.svgunnamedVariant2__uXxuAtCajl]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        )
                      })}
                      role={"img"}
                    />
                  }
                  value={generateStateValueProp($state, ["select4", "value"])}
                />
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__jcgz, {
                  [sty.freeBoxloginByPassword__jcgzGqb7]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.freeBoxloginByPassword_password__jcgzGqb7Vrixq]:
                    hasVariant($state, "password", "password") &&
                    hasVariant($state, "loginByPassword", "loginByPassword"),
                  [sty.freeBoxpassword__jcgzVrixq]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.freeBoxpassword_unnamedVariant2__jcgzVrixqTCajl]:
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant($state, "password", "password"),
                  [sty.freeBoxunnamedVariant2__jcgzTCajl]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxunnamedVariant__jcgzBNary]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant_unnamedVariant2__jcgzBNaryTCajl]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__dyRl, {
                    [sty.freeBoxloginByPassword__dyRlGqb7]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.freeBoxunnamedVariant__dyRlBNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__leJ8V,
                      {
                        [sty.textloginByPassword__leJ8Vgqb7]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.textpassword__leJ8Vvrixq]: hasVariant(
                          $state,
                          "password",
                          "password"
                        ),
                        [sty.textunnamedVariant2__leJ8VtCajl]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.textunnamedVariant__leJ8VbNary]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ),
                        [sty.textunnamedVariant_loginByPassword__leJ8VbNaryGqb7]:
                          hasVariant(
                            $state,
                            "loginByPassword",
                            "loginByPassword"
                          ) &&
                          hasVariant($state, "unnamedVariant", "unnamedVariant")
                      }
                    )}
                  >
                    {hasVariant($state, "loginByPassword", "loginByPassword")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                      : hasVariant($state, "password", "password")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                      ? "\u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0645\u0627\u0646\u062a\u062f\u0627\u0631\u06cc"
                      : hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                      : "\u062a\u0627\u06cc\u06cc\u062f \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                  </div>
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button, {
                      [sty.buttonloginByPassword]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.buttonloginByPassword_password]:
                        hasVariant($state, "password", "password") &&
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                      [sty.buttonpassword]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.buttonpassword_unnamedVariant2]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) && hasVariant($state, "password", "password"),
                      [sty.buttonunnamedVariant2]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.buttonunnamedVariant]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.buttonunnamedVariant_unnamedVariant2]:
                        hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ) &&
                        hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                    })}
                    color={
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? "softGreen"
                        : undefined
                    }
                    loadingviow={generateStateValueProp($state, [
                      "button",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateUnnamedVariant"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "unnamedVariant",
                              operation: 6
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, false);
                              return false;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUnnamedVariant"] != null &&
                        typeof $steps["updateUnnamedVariant"] === "object" &&
                        typeof $steps["updateUnnamedVariant"].then ===
                          "function"
                      ) {
                        $steps["updateUnnamedVariant"] = await $steps[
                          "updateUnnamedVariant"
                        ];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    {hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647"
                      : "Button"}
                  </Button>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uvJgc,
                    {
                      [sty.textloginByPassword__uvJgcGqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword__uvJgcVrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textunnamedVariant2__uvJgctCajl]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant__uvJgcBNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "unnamedVariant2", "unnamedVariant2") ? (
                    "\u06cc\u06a9\u06cc \u0627\u0632 \u0627\u0645\u0627\u0646\u062a\u062f\u0627\u0631\u06cc \u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0628\u0647 \u0622\u0646\u0647\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a\u06cc\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a\u0627\u0646 \u0628\u0647 \u0622\u0646 \u0645\u062a\u0635\u0644 \u0634\u0648\u062f."
                  ) : hasVariant($state, "unnamedVariant", "unnamedVariant") ? (
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (() => {
                              if ($state.selectContry == "+98")
                                return (
                                  "لطفا کد 4 رقمی ارسال شده به شماره <b style='color: #2DC57B;'>" +
                                  $state.number +
                                  "</b> را وارد نمایید."
                                );
                              else
                                return (
                                  "لطفا کد 4 رقمی ارسال شده به <b style='color: #2DC57B;'>واتساپ</b> شماره <b style='color: #2DC57B;'>" +
                                  $state.number +
                                  "</b> را وارد نمایید."
                                );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 09155113179 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  ) : (
                    "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f. \u0633\u067e\u0633 \u06cc\u06a9 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0628\u0631\u0627\u06cc \u0627\u062d\u0631\u0627\u0632 \u0647\u0648\u06cc\u062a \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc \u0634\u0648\u062f"
                  )}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__yNwp, {
                    [sty.freeBoxloginByPassword__yNwpGqb7]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    )
                  })}
                >
                  <Input
                    data-plasmic-name={"fragmentInput"}
                    data-plasmic-override={overrides.fragmentInput}
                    className={classNames("__wab_instance", sty.fragmentInput, {
                      [sty.fragmentInputloginByPassword]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.fragmentInputloginByPassword_password]:
                        hasVariant($state, "password", "password") &&
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                      [sty.fragmentInputloginByPassword_unnamedVariant2]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) &&
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                      [sty.fragmentInputpassword]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.fragmentInputpassword_unnamedVariant2]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) && hasVariant($state, "password", "password"),
                      [sty.fragmentInputunnamedVariant2]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.fragmentInputunnamedVariant]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.fragmentInputunnamedVariant_unnamedVariant2]:
                        hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ) &&
                        hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                    })}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput",
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={(() => {
                      try {
                        return $state.contry.find(
                          item => item.value == $state.selectContry
                        ).phoneFormats.example;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    type={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "tel"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput",
                      "value"
                    ])}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__pqRl9, {
                      [sty.freeBoxunnamedVariant__pqRl9BNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.freeBoxunnamedVariant_unnamedVariant2__pqRl9BNaryTCajl]:
                        hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ) &&
                        hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                    })}
                  >
                    <AntdSelect
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      bordered={false}
                      className={classNames("__wab_instance", sty.select2, {
                        [sty.select2loginByPassword]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.select2loginByPassword_password]:
                          hasVariant($state, "password", "password") &&
                          hasVariant(
                            $state,
                            "loginByPassword",
                            "loginByPassword"
                          ),
                        [sty.select2password]: hasVariant(
                          $state,
                          "password",
                          "password"
                        ),
                        [sty.select2password_unnamedVariant2]:
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          ) && hasVariant($state, "password", "password"),
                        [sty.select2unnamedVariant2]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.select2unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      })}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        styleTokensClassNames,
                        styleTokensClassNames_antd_5_hostless,
                        styleTokensClassNames_plasmic_rich_components
                      )}
                      defaultValue={"+98"}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select2",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return $state.contry;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select2__popup"]}
                      size={"large"}
                      value={generateStateValueProp($state, [
                        "select2",
                        "value"
                      ])}
                    />
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Fcc8,
                    {
                      [sty.textloginByPassword___0Fcc8Gqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword___0Fcc8Vrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textunnamedVariant2___0Fcc8TCajl]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant___0Fcc8BNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.textunnamedVariant_loginByPassword___0Fcc8BNaryGqb7]:
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ) &&
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                    }
                  )}
                >
                  {hasVariant($state, "loginByPassword", "loginByPassword")
                    ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                    : hasVariant($state, "password", "password")
                    ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                    : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                    ? "\u0627\u0646\u062a\u062e\u0627\u0628 \u0635\u0631\u0627\u0641\u06cc"
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                    : "\u062a\u0627\u06cc\u06cc\u062f \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z02RT,
                    {
                      [sty.textloginByPassword__z02RTgqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword__z02RTvrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textunnamedVariant2__z02RTtCajl]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant__z02RTbNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginByPassword"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginByPassword",
                            operation: 4
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, true);
                            return true;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginByPassword"] != null &&
                      typeof $steps["updateLoginByPassword"] === "object" &&
                      typeof $steps["updateLoginByPassword"].then === "function"
                    ) {
                      $steps["updateLoginByPassword"] = await $steps[
                        "updateLoginByPassword"
                      ];
                    }
                  }}
                >
                  {hasVariant($state, "unnamedVariant2", "unnamedVariant2") ? (
                    "\u06cc\u06a9\u06cc \u0627\u0632 \u0635\u0631\u0627\u0641\u06cc\u200c\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0628\u0647 \u0622\u0646\u0647\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a\u06cc\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a\u0627\u0646 \u0628\u0647 \u0622\u0646 \u0645\u062a\u0635\u0644 \u0634\u0648\u062f."
                  ) : hasVariant($state, "unnamedVariant", "unnamedVariant") ? (
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (() => {
                              if ($state.selectContry == "+98")
                                return (
                                  "لطفا کد 4 رقمی ارسال شده به شماره <b style='color: #2DC57B;'>" +
                                  $state.number +
                                  "</b> را وارد نمایید."
                                );
                              else
                                return (
                                  "لطفا کد 4 رقمی ارسال شده به <b style='color: #2DC57B;'>واتساپ</b> شماره <b style='color: #2DC57B;'>" +
                                  $state.number +
                                  "</b> را وارد نمایید."
                                );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 09155113179 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  ) : (
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0648 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 "
                  )}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__mboYc, {
                    [sty.freeBoxloginByPassword__mboYcGqb7]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.freeBoxpassword__mboYcVrixq]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.freeBoxunnamedVariant2__mboYctCajl]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.freeBoxunnamedVariant__mboYcBNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <Input
                    data-plasmic-name={"fragmentInput3"}
                    data-plasmic-override={overrides.fragmentInput3}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentInput3,
                      {
                        [sty.fragmentInput3loginByPassword]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.fragmentInput3loginByPassword_password]:
                          hasVariant(
                            $state,
                            "loginByPassword",
                            "loginByPassword"
                          ) && hasVariant($state, "password", "password"),
                        [sty.fragmentInput3password]: hasVariant(
                          $state,
                          "password",
                          "password"
                        ),
                        [sty.fragmentInput3password_unnamedVariant2]:
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          ) && hasVariant($state, "password", "password"),
                        [sty.fragmentInput3unnamedVariant2]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.fragmentInput3unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput3",
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      hasVariant($state, "loginByPassword", "loginByPassword")
                        ? ``
                        : hasVariant($state, "password", "password")
                        ? ``
                        : "98+"
                    }
                    type={
                      hasVariant($state, "loginByPassword", "loginByPassword")
                        ? (() => {
                            try {
                              return $state.pass1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "password";
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "password", "password")
                        ? (() => {
                            try {
                              return $state.pass1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "password";
                              }
                              throw e;
                            }
                          })()
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "tel"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput3",
                      "value"
                    ])}
                  />

                  <Icon55Icon
                    className={classNames(projectcss.all, sty.svg__iyHlq, {
                      [sty.svgloginByPassword__iyHlqgqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.svgpassword__iyHlqvrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updatePass1"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pass1"]
                              },
                              operation: 0,
                              value: "text"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePass1"] != null &&
                        typeof $steps["updatePass1"] === "object" &&
                        typeof $steps["updatePass1"].then === "function"
                      ) {
                        $steps["updatePass1"] = await $steps["updatePass1"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = { args: [1000] };
                            return $globalActions["Fragment.wait"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pass1"]
                              },
                              operation: 0,
                              value: "password"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }
                    }}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__pVpJw, {
                    [sty.freeBoxunnamedVariant__pVpJwBNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <Input
                    data-plasmic-name={"fragmentInput2"}
                    data-plasmic-override={overrides.fragmentInput2}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentInput2,
                      {
                        [sty.fragmentInput2unnamedVariant2]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.fragmentInput2unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ),
                        [sty.fragmentInput2unnamedVariant_unnamedVariant2]:
                          hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          ) &&
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          )
                      }
                    )}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput2",
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? ``
                        : "98+"
                    }
                    type={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "number"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput2",
                      "value"
                    ])}
                  />
                </div>
                {(
                  hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ihsp9,
                      {
                        [sty.textunnamedVariant__ihsp9BNary]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ),
                        [sty.textunnamedVariant_unnamedVariant2__ihsp9BNaryTCajl]:
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          ) &&
                          hasVariant($state, "unnamedVariant", "unnamedVariant")
                      }
                    )}
                  >
                    {hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (
                                "ارسال مجدد پیامک  (" +
                                "<b style='color: #2DC57B;'>" +
                                $state.time +
                                "</b>" +
                                ")"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ) ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (
                                "ارسال مجدد پیامک  (" +
                                "<b style='color: #2DC57B;'>" +
                                $state.time +
                                "</b>" +
                                ")"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : (
                      "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)"
                    )}
                  </div>
                ) : null}
                <Timer
                  className={classNames("__wab_instance", sty.timer__zLj9B, {
                    [sty.timerpassword__zLj9BVrixq]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.timerunnamedVariant__zLj9BBNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  intervalSeconds={
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? 1
                      : undefined
                  }
                  isRunning={
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  }
                  onTick={async () => {
                    const $steps = {};

                    $steps["updateTime"] =
                      $state.time > 0
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["time"]
                              },
                              operation: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue - 1);
                              return oldValue - 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateTime"] != null &&
                      typeof $steps["updateTime"] === "object" &&
                      typeof $steps["updateTime"].then === "function"
                    ) {
                      $steps["updateTime"] = await $steps["updateTime"];
                    }
                  }}
                  runWhileEditing={
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? false
                      : false
                  }
                />

                {(
                  hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : false
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i05Zj,
                      {
                        [sty.textunnamedVariant__i05ZjBNary]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "GET",
                                "https://n8n.babarkat.com/webhook/Babarkat/login",
                                (() => {
                                  try {
                                    return { mobile: $state.number };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateTime"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["time"]
                              },
                              operation: 0,
                              value: 60
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTime"] != null &&
                        typeof $steps["updateTime"] === "object" &&
                        typeof $steps["updateTime"].then === "function"
                      ) {
                        $steps["updateTime"] = await $steps["updateTime"];
                      }
                    }}
                  >
                    {hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9"
                      : "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)"}
                  </div>
                ) : null}
                <AntdSelect
                  data-plasmic-name={"select"}
                  data-plasmic-override={overrides.select}
                  className={classNames("__wab_instance", sty.select, {
                    [sty.selectloginByPassword]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.selectloginByPassword_password]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.selectpassword]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.selectpassword_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) && hasVariant($state, "password", "password"),
                    [sty.selectunnamedVariant2]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.selectunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    ),
                    [sty.selectunnamedVariant_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                  })}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    styleTokensClassNames,
                    styleTokensClassNames_antd_5_hostless,
                    styleTokensClassNames_plasmic_rich_components
                  )}
                  defaultValue={
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.saraf[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 100;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.saraf[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 100;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.saraf[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 100;
                            }
                            throw e;
                          }
                        })()
                  }
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select",
                      "value"
                    ]).apply(null, eventArgs);

                    (async (value, option) => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return $state.saraf;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [{ type: "option" }];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={null}
                  popupScopeClassName={sty["select__popup"]}
                  size={"large"}
                  suffixIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) && hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon37Icon
                          : Icon10Icon
                      }
                      className={classNames(projectcss.all, sty.svg__dA4Jb, {
                        [sty.svgunnamedVariant2__dA4JBtCajl]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        )
                      })}
                      role={"img"}
                    />
                  }
                  value={generateStateValueProp($state, ["select", "value"])}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i4UMq,
                  {
                    [sty.textloginByPassword__i4UMqGqb7]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.textloginByPassword_password__i4UMqGqb7Vrixq]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.textpassword__i4UMqVrixq]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.textunnamedVariant2__i4UMqtCajl]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.textunnamedVariant__i4UMqBNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToLogIn3"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/Forgotten-password`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToLogIn3"] != null &&
                    typeof $steps["goToLogIn3"] === "object" &&
                    typeof $steps["goToLogIn3"].then === "function"
                  ) {
                    $steps["goToLogIn3"] = await $steps["goToLogIn3"];
                  }
                }}
              >
                {hasVariant($state, "loginByPassword", "loginByPassword")
                  ? "\u0622\u06cc\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062e\u0648\u062f \u0631\u0627 \u0641\u0631\u0627\u0645\u0648\u0634 \u06a9\u0631\u062f\u0647\u200c\u0627\u06cc\u062f\u061f"
                  : hasVariant($state, "password", "password")
                  ? "\u0622\u06cc\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062e\u0648\u062f \u0631\u0627 \u0641\u0631\u0627\u0645\u0648\u0634 \u06a9\u0631\u062f\u0647\u200c\u0627\u06cc\u062f\u061f"
                  : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                  ? "\u0627\u0646\u062a\u062e\u0627\u0628 \u0635\u0631\u0627\u0641\u06cc"
                  : hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                  : "\u062a\u0627\u06cc\u06cc\u062f \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__kpVY, {
                  [sty.freeBoxloginByPassword__kpVYgqb7]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.freeBoxpassword__kpVYvrixq]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.freeBoxunnamedVariant2__kpVYtCajl]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxunnamedVariant__kpVYbNary]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
              >
                <Button
                  data-plasmic-name={"btnNumber"}
                  data-plasmic-override={overrides.btnNumber}
                  className={classNames("__wab_instance", sty.btnNumber, {
                    [sty.btnNumberloginByPassword]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.btnNumberpassword]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.btnNumberpassword_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) && hasVariant($state, "password", "password"),
                    [sty.btnNumberunnamedVariant2]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.btnNumberunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    ),
                    [sty.btnNumberunnamedVariant_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                  })}
                  color={"green"}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__cwi9J)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return (
                        !$state.fragmentInput.value.match(
                          $state.contry.find(
                            item => item.value === $state.selectContry
                          ).phoneFormats.regex
                        ) || $state.loadedbtn
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loadingviow={generateStateValueProp($state, [
                    "btnNumber",
                    "loadingviow"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["updateNumber"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["number"]
                            },
                            operation: 0,
                            value: (() => {
                              if ($state.selectContry == "+98")
                                return "0" + $state.fragmentInput.value;
                              else
                                return (
                                  $state.selectContry +
                                  $state.fragmentInput.value
                                );
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNumber"] != null &&
                      typeof $steps["updateNumber"] === "object" &&
                      typeof $steps["updateNumber"].then === "function"
                    ) {
                      $steps["updateNumber"] = await $steps["updateNumber"];
                    }

                    $steps["invokeGlobalAction2"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/saraf/login/username",
                              undefined,
                              (() => {
                                try {
                                  return { mobile: $state.number };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["invokeGlobalAction3"] =
                      $steps.invokeGlobalAction2?.data?.success == false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0634\u0645\u0627\u0631\u0647\u200c\u06cc \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0645\u0639\u062a\u0628\u0631 \u0646\u06cc\u0633\u062a.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateUnnamedVariant"] =
                      $steps.invokeGlobalAction2?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "unnamedVariant",
                              operation: 4
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, true);
                              return true;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateUnnamedVariant"] != null &&
                      typeof $steps["updateUnnamedVariant"] === "object" &&
                      typeof $steps["updateUnnamedVariant"].then === "function"
                    ) {
                      $steps["updateUnnamedVariant"] = await $steps[
                        "updateUnnamedVariant"
                      ];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }

                    $steps["updateFragmentInputValue4"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["time"]
                            },
                            operation: 0,
                            value: 60
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue4"] != null &&
                      typeof $steps["updateFragmentInputValue4"] === "object" &&
                      typeof $steps["updateFragmentInputValue4"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue4"] = await $steps[
                        "updateFragmentInputValue4"
                      ];
                    }
                  }}
                  onLoadingviowChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "btnNumber",
                        "loadingviow"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showEndIcon={(() => {
                    try {
                      return $state.loadedbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iNwcz
                    )}
                  >
                    {
                      "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"
                    }
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2, {
                    [sty.button2loginByPassword]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.button2loginByPassword_password]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.button2password]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.button2unnamedVariant2]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.button2unnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    ),
                    [sty.button2unnamedVariant_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                  })}
                  color={"green"}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__tCskn)}
                      role={"img"}
                    />
                  }
                  isDisabled={
                    hasVariant($state, "loginByPassword", "loginByPassword")
                      ? (() => {
                          try {
                            return (
                              $state.fragmentInput.value.length != 11 ||
                              $state.fragmentInput3.value.length == 0 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "password", "password")
                      ? (() => {
                          try {
                            return (
                              $state.fragmentInput3.value.length == 0 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              $state.fragmentInput.value.length != 11 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                  }
                  loadingviow={generateStateValueProp($state, [
                    "button2",
                    "loadingviow"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/Babarkat/password",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    mobile: JSON.parse(
                                      localStorage.getItem("userbabarcat")
                                    ).mobile,
                                    password: $state.fragmentInput3.value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["invokeGlobalAction3"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === false
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0631\u0645\u0632 \u0646\u0627\u062f\u0631\u0633\u062a \u0627\u0633\u062a.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateFragmentInputValue2"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const item = {
                                  value:
                                    $steps.invokeGlobalAction2.data[0].data
                                      .token,
                                  expiration:
                                    new Date().getTime() + 10 * 60 * 1000
                                };
                                return sessionStorage.setItem(
                                  "userbabarcatToken",
                                  JSON.stringify(item)
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue2"] != null &&
                      typeof $steps["updateFragmentInputValue2"] === "object" &&
                      typeof $steps["updateFragmentInputValue2"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue2"] = await $steps[
                        "updateFragmentInputValue2"
                      ];
                    }

                    $steps["goToHomepage"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }

                    $steps["invokeGlobalAction"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/users/logLaunch",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    type: "loginPassword",
                                    userToken: JSON.parse(
                                      sessionStorage.getItem(
                                        "userbabarcatToken"
                                      )
                                    ).value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }
                  }}
                  onLoadingviowChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button2",
                        "loadingviow"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showEndIcon={(() => {
                    try {
                      return $state.loadedbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tdSlS,
                      {
                        [sty.textloginByPassword__tdSlSgqb7]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.textpassword__tdSlSvrixq]: hasVariant(
                          $state,
                          "password",
                          "password"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "loginByPassword", "loginByPassword")
                      ? "\u0648\u0631\u0648\u062f"
                      : hasVariant($state, "password", "password")
                      ? "\u0648\u0631\u0648\u062f"
                      : "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3, {
                    [sty.button3loginByPassword]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.button3loginByPassword_password]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) && hasVariant($state, "password", "password"),
                    [sty.button3loginByPassword_password_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) &&
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "password", "password"),
                    [sty.button3loginByPassword_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.button3password]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.button3password_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) && hasVariant($state, "password", "password"),
                    [sty.button3unnamedVariant2]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.button3unnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    ),
                    [sty.button3unnamedVariant_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                  })}
                  color={"green"}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__vqn0M)}
                      role={"img"}
                    />
                  }
                  isDisabled={
                    hasVariant($state, "loginByPassword", "loginByPassword")
                      ? (() => {
                          try {
                            return $state.fragmentInput5.value.length == 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "password", "password")
                      ? (() => {
                          try {
                            return (
                              $state.fragmentInput3.value.length == 0 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              $state.fragmentInput.value.length != 11 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                  }
                  loadingviow={generateStateValueProp($state, [
                    "button3",
                    "loadingviow"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["updateUsername2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["username2"]
                            },
                            operation: 0,
                            value: $state.fragmentInput5.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUsername2"] != null &&
                      typeof $steps["updateUsername2"] === "object" &&
                      typeof $steps["updateUsername2"].then === "function"
                    ) {
                      $steps["updateUsername2"] = await $steps[
                        "updateUsername2"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "GET",
                              "https://n8n.babarkat.com/webhook/saraf/login/username",
                              (() => {
                                try {
                                  return {
                                    username: $state.username2,
                                    password: $state.fragmentInput3.value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              undefined
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["invokeGlobalAction3"] =
                      $steps.invokeGlobalAction2?.data?.success === false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0646\u0627\u062f\u0631\u0633\u062a \u0627\u0633\u062a.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateFragmentInputValue2"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                localStorage.setItem(
                                  "userbabarcat",
                                  JSON.stringify(
                                    $steps.invokeGlobalAction2.data.data
                                  )
                                );
                                const item = {
                                  value:
                                    $steps.invokeGlobalAction2.data.data.token,
                                  expiration:
                                    new Date().getTime() + 10 * 60 * 1000
                                };
                                return sessionStorage.setItem(
                                  "userbabarcatToken",
                                  JSON.stringify(item)
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue2"] != null &&
                      typeof $steps["updateFragmentInputValue2"] === "object" &&
                      typeof $steps["updateFragmentInputValue2"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue2"] = await $steps[
                        "updateFragmentInputValue2"
                      ];
                    }

                    $steps["goToPanel"] =
                      $steps.invokeGlobalAction2?.data?.success === true
                        ? (() => {
                            const actionArgs = { destination: `/panel` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToPanel"] != null &&
                      typeof $steps["goToPanel"] === "object" &&
                      typeof $steps["goToPanel"].then === "function"
                    ) {
                      $steps["goToPanel"] = await $steps["goToPanel"];
                    }

                    $steps["updateFragmentInputValue3"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return localStorage.setItem(
                                "userBabarkatPass",
                                "true"
                              );
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue3"] != null &&
                      typeof $steps["updateFragmentInputValue3"] === "object" &&
                      typeof $steps["updateFragmentInputValue3"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue3"] = await $steps[
                        "updateFragmentInputValue3"
                      ];
                    }

                    $steps["updateFragmentInputValue4"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/users/logLaunch",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    type: "loginPassword",
                                    userToken: JSON.parse(
                                      sessionStorage.getItem(
                                        "userbabarcatToken"
                                      )
                                    ).value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue4"] != null &&
                      typeof $steps["updateFragmentInputValue4"] === "object" &&
                      typeof $steps["updateFragmentInputValue4"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue4"] = await $steps[
                        "updateFragmentInputValue4"
                      ];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }
                  }}
                  onLoadingviowChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button3",
                        "loadingviow"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showEndIcon={(() => {
                    try {
                      return $state.loadedbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2BN7U,
                      {
                        [sty.textloginByPassword___2BN7Ugqb7]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.textpassword___2BN7Uvrixq]: hasVariant(
                          $state,
                          "password",
                          "password"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "loginByPassword", "loginByPassword")
                      ? "\u0648\u0631\u0648\u062f"
                      : hasVariant($state, "password", "password")
                      ? "\u0648\u0631\u0648\u062f"
                      : "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"btnSaraf"}
                  data-plasmic-override={overrides.btnSaraf}
                  className={classNames("__wab_instance", sty.btnSaraf, {
                    [sty.btnSarafloginByPassword]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.btnSarafloginByPassword_password]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.btnSarafloginByPassword_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.btnSarafpassword]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.btnSarafunnamedVariant2]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.btnSarafunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    ),
                    [sty.btnSarafunnamedVariant_unnamedVariant2]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                  })}
                  color={"green"}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__tYw3F)}
                      role={"img"}
                    />
                  }
                  isDisabled={
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? (() => {
                          try {
                            return $state.loadedbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                      ? (() => {
                          try {
                            return $state.loadedbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              $state.fragmentInput.value.length != 11 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                  }
                  loadingviow={generateStateValueProp($state, [
                    "btnSaraf",
                    "loadingviow"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["updateSelectsaraf"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectsaraf"]
                            },
                            operation: 0,
                            value: $state.select.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectsaraf"] != null &&
                      typeof $steps["updateSelectsaraf"] === "object" &&
                      typeof $steps["updateSelectsaraf"].then === "function"
                    ) {
                      $steps["updateSelectsaraf"] = await $steps[
                        "updateSelectsaraf"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/Babarkat/login",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    _saraf: $state.selectsaraf,
                                    userToken: JSON.parse(
                                      sessionStorage.getItem(
                                        "userbabarcatToken"
                                      )
                                    ).value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = (
                      $steps.invokeGlobalAction?.data
                        ? $steps.invokeGlobalAction?.data[0]?.success == false
                        : true
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0645\u0634\u06a9\u0644\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["runCode"] = (
                      $steps.invokeGlobalAction?.data
                        ? $steps.invokeGlobalAction?.data[0]?.success == true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                localStorage.setItem(
                                  "userbabarcat",
                                  JSON.stringify(
                                    $steps.invokeGlobalAction.data[0].data
                                  )
                                );
                                const item = {
                                  value:
                                    $steps.invokeGlobalAction.data[0].data
                                      .token,
                                  expiration:
                                    new Date().getTime() + 10 * 60 * 1000
                                };
                                return sessionStorage.setItem(
                                  "userbabarcatToken",
                                  JSON.stringify(item)
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["goToHomepage"] = (
                      $steps.invokeGlobalAction?.data
                        ? $steps.invokeGlobalAction?.data[0]?.success == true
                        : false
                    )
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }

                    $steps["invokeGlobalAction3"] = (
                      $steps.invokeGlobalAction?.data
                        ? $steps.invokeGlobalAction?.data[0]?.success == true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/users/logLaunch",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    type: "loginSms",
                                    userToken: JSON.parse(
                                      sessionStorage.getItem(
                                        "userbabarcatToken"
                                      )
                                    ).value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }
                  }}
                  onLoadingviowChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "btnSaraf",
                        "loadingviow"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showEndIcon={
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? (() => {
                          try {
                            return $state.loadedbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                      ? (() => {
                          try {
                            return $state.loadedbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.loadedbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mbtaR,
                      {
                        [sty.textunnamedVariant2__mbtaRtCajl]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                      ? "\u062a\u0627\u06cc\u06cc\u062f"
                      : "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
                {(
                  hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? true
                    : false
                ) ? (
                  <Button
                    data-plasmic-name={"sendcode"}
                    data-plasmic-override={overrides.sendcode}
                    className={classNames("__wab_instance", sty.sendcode, {
                      [sty.sendcodeloginByPassword]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.sendcodeloginByPassword_unnamedVariant2]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) &&
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                      [sty.sendcodepassword]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.sendcodepassword_unnamedVariant2]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) && hasVariant($state, "password", "password"),
                      [sty.sendcodeunnamedVariant2]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.sendcodeunnamedVariant]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.sendcodeunnamedVariant_loginByPassword]:
                        hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ) &&
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                      [sty.sendcodeunnamedVariant_unnamedVariant2]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) &&
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                    })}
                    color={"green"}
                    endIcon={
                      <PlasmicIcon__
                        PlasmicIconType={
                          hasVariant($state, "unnamedVariant", "unnamedVariant")
                            ? IconIcon
                            : Icon3Icon
                        }
                        className={classNames(projectcss.all, sty.svg___8Tpx, {
                          [sty.svgunnamedVariant___8TpxBNary]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        })}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return $state.fragmentInput2.value.length != 4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? (() => {
                            try {
                              return (
                                $state.fragmentInput2.value.length != 4 &&
                                !$state.loadedbtn
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.fragmentInput2.value.length != 11;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                    }
                    loadingviow={generateStateValueProp($state, [
                      "sendcode",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateCode"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["code"]
                              },
                              operation: 0,
                              value: parseInt($state.fragmentInput2.value)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCode"] != null &&
                        typeof $steps["updateCode"] === "object" &&
                        typeof $steps["updateCode"].then === "function"
                      ) {
                        $steps["updateCode"] = await $steps["updateCode"];
                      }

                      $steps["invokeGlobalAction2"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.babarkat.com/webhook/saraf/login",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      mobile: $state.number,
                                      code: $state.code
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] =
                        $steps.invokeGlobalAction2?.data?.success == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u06a9\u062f \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u0645\u06cc \u0628\u0627\u0634\u062f.",
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode"] = (
                        $steps.invokeGlobalAction2?.data
                          ? $steps.invokeGlobalAction2?.data?.success == true
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  localStorage.setItem(
                                    "userbabarcat",
                                    JSON.stringify(
                                      $steps.invokeGlobalAction2.data.data
                                    )
                                  );
                                  const item = {
                                    value:
                                      $steps.invokeGlobalAction2.data.data
                                        .token,
                                    expiration:
                                      new Date().getTime() + 10 * 60 * 1000
                                  };
                                  return sessionStorage.setItem(
                                    "userbabarcatToken",
                                    JSON.stringify(item)
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction3"] = (
                        $steps.invokeGlobalAction2?.data
                          ? $steps.invokeGlobalAction2?.data?.success == false
                          : true
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0645\u0634\u06a9\u0644\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["runCode2"] =
                        $steps.invokeGlobalAction2?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return localStorage.setItem(
                                      "userBabarkatPass",
                                      "true"
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["goToPanel"] =
                        $steps.invokeGlobalAction2?.data?.success == true
                          ? (() => {
                              const actionArgs = { destination: `/panel` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPanel"] != null &&
                        typeof $steps["goToPanel"] === "object" &&
                        typeof $steps["goToPanel"].then === "function"
                      ) {
                        $steps["goToPanel"] = await $steps["goToPanel"];
                      }

                      $steps["updateLoadedbtn2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn2"] != null &&
                        typeof $steps["updateLoadedbtn2"] === "object" &&
                        typeof $steps["updateLoadedbtn2"].then === "function"
                      ) {
                        $steps["updateLoadedbtn2"] = await $steps[
                          "updateLoadedbtn2"
                        ];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "sendcode",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadedbtn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jdnEx,
                        {
                          [sty.textunnamedVariant__jdnExBNary]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {"\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                  </Button>
                ) : null}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__yJ1Ps, {
                  [sty.freeBoxloginByPassword__yJ1PsGqb7]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.freeBoxloginByPassword_unnamedVariant2__yJ1PsGqb7TCajl]:
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant($state, "loginByPassword", "loginByPassword"),
                  [sty.freeBoxpassword__yJ1PsVrixq]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.freeBoxunnamedVariant2__yJ1PstCajl]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxunnamedVariant__yJ1PsBNary]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
              >
                <Embed
                  className={classNames("__wab_instance", sty.embedHtml__y7OGn)}
                  code={"<hr></hr>"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xHt3Y
                  )}
                >
                  {
                    "\u0648\u0631\u0648\u062f \u0627\u0632 \u0637\u0631\u06cc\u0642"
                  }
                </div>
                <Embed
                  className={classNames(
                    "__wab_instance",
                    sty.embedHtml___2402E
                  )}
                  code={"<hr></hr>"}
                />
              </div>
              <Button
                data-plasmic-name={"button5"}
                data-plasmic-override={overrides.button5}
                className={classNames("__wab_instance", sty.button5, {
                  [sty.button5loginByPassword]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.button5password]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.button5unnamedVariant2]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.button5unnamedVariant]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  ),
                  [sty.button5unnamedVariant_unnamedVariant2]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                })}
                color={"softGreen"}
                endIcon={
                  <Icon153Icon
                    className={classNames(projectcss.all, sty.svg__qhxFs)}
                    role={"img"}
                  />
                }
                loadingviow={generateStateValueProp($state, [
                  "button5",
                  "loadingviow"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLoginByPassword"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "loginByPassword",
                          operation: 4
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, true);
                          return true;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoginByPassword"] != null &&
                    typeof $steps["updateLoginByPassword"] === "object" &&
                    typeof $steps["updateLoginByPassword"].then === "function"
                  ) {
                    $steps["updateLoginByPassword"] = await $steps[
                      "updateLoginByPassword"
                    ];
                  }
                }}
                onLoadingviowChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "button5",
                      "loadingviow"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                showEndIcon={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5MFkv,
                    {
                      [sty.textloginByPassword___5MFkvGqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textloginByPassword_unnamedVariant2___5MFkvGqb7TCajl]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) &&
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                      [sty.textpassword___5MFkvVrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textunnamedVariant2___5MFkvtCajl]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant___5MFkvBNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.textunnamedVariant_unnamedVariant2___5MFkvBNaryTCajl]:
                        hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ) &&
                        hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                    }
                  )}
                >
                  {
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 "
                  }
                </div>
              </Button>
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? true
                  : false
              ) ? (
                <div
                  data-plasmic-name={"figmaPaste"}
                  data-plasmic-override={overrides.figmaPaste}
                  className={classNames(projectcss.all, sty.figmaPaste, {
                    [sty.figmaPasteunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"group"}
                    data-plasmic-override={overrides.group}
                    className={classNames(projectcss.all, sty.group, {
                      [sty.groupunnamedVariant]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    })}
                  >
                    <div
                      data-plasmic-name={"group2"}
                      data-plasmic-override={overrides.group2}
                      className={classNames(projectcss.all, sty.group2)}
                    >
                      <div
                        data-plasmic-name={"rectangle35"}
                        data-plasmic-override={overrides.rectangle35}
                        className={classNames(projectcss.all, sty.rectangle35)}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__niF6H
                        )}
                      >
                        {"\u0627\u062f\u0627\u0645\u0647"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"group3"}
                      data-plasmic-override={overrides.group3}
                      className={classNames(projectcss.all, sty.group3, {
                        [sty.group3unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      })}
                    >
                      <div
                        data-plasmic-name={"group4"}
                        data-plasmic-override={overrides.group4}
                        className={classNames(projectcss.all, sty.group4)}
                      >
                        <div
                          data-plasmic-name={"rectangle23"}
                          data-plasmic-override={overrides.rectangle23}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle23
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kiSee
                          )}
                        >
                          {"1"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group5"}
                        data-plasmic-override={overrides.group5}
                        className={classNames(projectcss.all, sty.group5)}
                      >
                        <div
                          data-plasmic-name={"rectangle24"}
                          data-plasmic-override={overrides.rectangle24}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle24
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fnbEi
                          )}
                        >
                          {"2"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group6"}
                        data-plasmic-override={overrides.group6}
                        className={classNames(projectcss.all, sty.group6)}
                      >
                        <div
                          data-plasmic-name={"rectangle25"}
                          data-plasmic-override={overrides.rectangle25}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle25
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ynDPb
                          )}
                        >
                          {"3"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group7"}
                        data-plasmic-override={overrides.group7}
                        className={classNames(projectcss.all, sty.group7)}
                      >
                        <div
                          data-plasmic-name={"rectangle"}
                          data-plasmic-override={overrides.rectangle}
                          className={classNames(projectcss.all, sty.rectangle, {
                            [sty.rectangleunnamedVariant]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          })}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gN10O
                          )}
                        >
                          {"4"}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3UHa,
                        {
                          [sty.textunnamedVariant___3UHaBNary]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 \u0632\u06cc\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eUoBl,
                        {
                          [sty.textunnamedVariant__eUoBlBNary]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"group8"}
                    data-plasmic-override={overrides.group8}
                    className={classNames(projectcss.all, sty.group8)}
                  />
                </div>
              ) : null}
              <div
                data-plasmic-name={"group9"}
                data-plasmic-override={overrides.group9}
                className={classNames(projectcss.all, sty.group9, {
                  [sty.group9loginByPassword]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.group9loginByPassword_unnamedVariant2]:
                    hasVariant($state, "loginByPassword", "loginByPassword") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.group9password]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.group9password_unnamedVariant2]:
                    hasVariant($state, "password", "password") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.group9unnamedVariant2]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.group9unnamedVariant]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  ),
                  [sty.group9unnamedVariant_password]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "password", "password"),
                  [sty.group9unnamedVariant_unnamedVariant2]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateUnnamedVariant"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "unnamedVariant",
                          operation: 6
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateUnnamedVariant"] != null &&
                    typeof $steps["updateUnnamedVariant"] === "object" &&
                    typeof $steps["updateUnnamedVariant"].then === "function"
                  ) {
                    $steps["updateUnnamedVariant"] = await $steps[
                      "updateUnnamedVariant"
                    ];
                  }

                  $steps["updateLoginByPassword"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "loginByPassword",
                          operation: 6
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoginByPassword"] != null &&
                    typeof $steps["updateLoginByPassword"] === "object" &&
                    typeof $steps["updateLoginByPassword"].then === "function"
                  ) {
                    $steps["updateLoginByPassword"] = await $steps[
                      "updateLoginByPassword"
                    ];
                  }

                  $steps["updatePassword"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "password", operation: 6 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePassword"] != null &&
                    typeof $steps["updatePassword"] === "object" &&
                    typeof $steps["updatePassword"].then === "function"
                  ) {
                    $steps["updatePassword"] = await $steps["updatePassword"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3ZvMi,
                    {
                      [sty.textloginByPassword___3ZvMiGqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textloginByPassword_unnamedVariant2___3ZvMiGqb7TCajl]:
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ) &&
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                      [sty.textpassword___3ZvMiVrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textpassword_unnamedVariant2___3ZvMiVrixqTCajl]:
                        hasVariant($state, "password", "password") &&
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                      [sty.textunnamedVariant2___3ZvMitCajl]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant___3ZvMiBNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.textunnamedVariant_unnamedVariant2___3ZvMiBNaryTCajl]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) &&
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                    }
                  )}
                >
                  {hasVariant($state, "loginByPassword", "loginByPassword")
                    ? "\u0648\u0631\u0648\u062f \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                    : hasVariant($state, "password", "password")
                    ? "\u0648\u0631\u0648\u062f \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                    : "\u0627\u0635\u0644\u0627\u062d \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                </div>
                <LeftArrowBackSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg___61TN0, {
                    [sty.svgloginByPassword_unnamedVariant2___61TN0Gqb7TCajl]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.svgpassword_unnamedVariant2___61TN0VrixqTCajl]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.svgunnamedVariant___61TN0BNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  role={"img"}
                />
              </div>
              <div
                data-plasmic-name={"group10"}
                data-plasmic-override={overrides.group10}
                className={classNames(projectcss.all, sty.group10, {
                  [sty.group10loginByPassword]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.group10loginByPassword_password]:
                    hasVariant($state, "password", "password") &&
                    hasVariant($state, "loginByPassword", "loginByPassword"),
                  [sty.group10loginByPassword_unnamedVariant2]:
                    hasVariant($state, "loginByPassword", "loginByPassword") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.group10password]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.group10password_unnamedVariant2]:
                    hasVariant($state, "password", "password") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.group10unnamedVariant2]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.group10unnamedVariant]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  ),
                  [sty.group10unnamedVariant_loginByPassword]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "loginByPassword", "loginByPassword"),
                  [sty.group10unnamedVariant_unnamedVariant2]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateUnnamedVariant"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "unnamedVariant",
                          operation: 6
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateUnnamedVariant"] != null &&
                    typeof $steps["updateUnnamedVariant"] === "object" &&
                    typeof $steps["updateUnnamedVariant"].then === "function"
                  ) {
                    $steps["updateUnnamedVariant"] = await $steps[
                      "updateUnnamedVariant"
                    ];
                  }

                  $steps["updatePassword"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "password", operation: 6 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePassword"] != null &&
                    typeof $steps["updatePassword"] === "object" &&
                    typeof $steps["updatePassword"].then === "function"
                  ) {
                    $steps["updatePassword"] = await $steps["updatePassword"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8IvKi,
                    {
                      [sty.textloginByPassword___8IvKiGqb7]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textloginByPassword_unnamedVariant2___8IvKiGqb7TCajl]:
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ) &&
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                      [sty.textpassword___8IvKiVrixq]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textpassword_unnamedVariant2___8IvKiVrixqTCajl]:
                        hasVariant($state, "password", "password") &&
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                      [sty.textunnamedVariant2___8IvKitCajl]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant___8IvKiBNary]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ),
                      [sty.textunnamedVariant_unnamedVariant2___8IvKiBNaryTCajl]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) &&
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                    }
                  )}
                >
                  {hasVariant($state, "loginByPassword", "loginByPassword")
                    ? "\u0648\u0631\u0648\u062f \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                    : hasVariant($state, "password", "password")
                    ? "\u0648\u0631\u0648\u062f \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                    : "\u0627\u0635\u0644\u0627\u062d \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                </div>
                <LeftArrowBackSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__c4I0W, {
                    [sty.svgloginByPassword_unnamedVariant2__c4I0Wgqb7TCajl]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.svgpassword_unnamedVariant2__c4I0WvrixqTCajl]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.svgunnamedVariant__c4I0WbNary]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  role={"img"}
                />
              </div>
            </div>
          </Reveal>
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___1W0Nw, {
              [sty.freeBoxunnamedVariant___1W0NwBNary]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uNtC)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__o5C0T)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "80px"
                    : "150px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/babarkat/images/image10.svg",
                  fullWidth: 100,
                  fullHeight: 100,
                  aspectRatio: 1
                }}
              />
            </div>
          </div>
        ) : null}
        {false ? (
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__t0NYh)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/babarkat/images/image8.png",
              fullWidth: 390,
              fullHeight: 533,
              aspectRatio: undefined
            }}
          />
        ) : null}
        <ApiRequest
          data-plasmic-name={"apiRequest"}
          data-plasmic-override={overrides.apiRequest}
          className={classNames("__wab_instance", sty.apiRequest, {
            [sty.apiRequestloginByPassword]: hasVariant(
              $state,
              "loginByPassword",
              "loginByPassword"
            ),
            [sty.apiRequestpassword]: hasVariant(
              $state,
              "password",
              "password"
            ),
            [sty.apiRequestunnamedVariant2]: hasVariant(
              $state,
              "unnamedVariant2",
              "unnamedVariant2"
            ),
            [sty.apiRequestunnamedVariant]: hasVariant(
              $state,
              "unnamedVariant",
              "unnamedVariant"
            )
          })}
          errorDisplay={null}
          loadingDisplay={null}
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
              null,
              eventArgs
            );

            (async loading => {
              const $steps = {};

              $steps["goToPanel"] =
                localStorage.getItem("userbabarcat") != null &&
                sessionStorage.getItem("userbabarcatToken") != null
                  ? (() => {
                      const actionArgs = { destination: `/panel` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToPanel"] != null &&
                typeof $steps["goToPanel"] === "object" &&
                typeof $steps["goToPanel"].then === "function"
              ) {
                $steps["goToPanel"] = await $steps["goToPanel"];
              }

              $steps["updateLoginByPassword"] =
                localStorage.getItem("userbabarcat") != null &&
                sessionStorage.getItem("userbabarcatToken") == null &&
                localStorage.getItem("userBabarkatPass") != null
                  ? (() => {
                      const actionArgs = {
                        vgroup: "loginByPassword",
                        operation: 4
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateLoginByPassword"] != null &&
                typeof $steps["updateLoginByPassword"] === "object" &&
                typeof $steps["updateLoginByPassword"].then === "function"
              ) {
                $steps["updateLoginByPassword"] = await $steps[
                  "updateLoginByPassword"
                ];
              }
            }).apply(null, eventArgs);
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
              null,
              eventArgs
            );
          }}
          shouldFetch={true}
          url={"/"}
        />

        <Embed
          className={classNames("__wab_instance", sty.embedHtml__e0PYz, {
            [sty.embedHtmlloginByPassword__e0PYzGqb7]: hasVariant(
              $state,
              "loginByPassword",
              "loginByPassword"
            ),
            [sty.embedHtmlunnamedVariant__e0PYzBNary]: hasVariant(
              $state,
              "unnamedVariant",
              "unnamedVariant"
            )
          })}
          code={
            hasVariant($state, "loginByPassword", "loginByPassword")
              ? "<script>\r\n    const myElement = document.querySelector('.logoLogin');\r\n    let initialHeight = window.innerHeight;\r\n\r\n    window.addEventListener('resize', () => {\r\n        if (window.innerHeight < initialHeight * (2 / 3)) {\r\n            myElement.style.display = 'none';\r\n        } else {\r\n            myElement.style.display = 'block';\r\n        }\r\n    });\r\n</script>\r\n"
              : hasVariant($state, "unnamedVariant", "unnamedVariant")
              ? "  <script>\r\n        const myElement = document.getElementById('logoLogin');\r\n        let initialHeight = window.innerHeight;\r\n\r\n        window.addEventListener('resize', () => {\r\n            if (window.innerHeight < initialHeight * (2 / 3)) {\r\n              console.log(\"\u0627\u0644\u0627\u0646\");\r\n                myElement.style.display = 'none';\r\n            } else {\r\n                myElement.style.display = 'block';\r\n            }\r\n        });\r\n    </script>"
              : "  <script>\r\n          var initialHeight = window.innerHeight;\r\n\r\n        window.addEventListener('resize', () => {\r\n            if (window.innerHeight < initialHeight * (2 / 3)) {\r\n                        document.getElementById('logoLogin').style.display = 'none';\r\n            } else {\r\n                        document.getElementById('logoLogin').style.display = 'block';\r\n            }\r\n        });\r\n    </script>"
          }
        />

        <AntdModal
          data-plasmic-name={"modal"}
          data-plasmic-override={overrides.modal}
          className={classNames("__wab_instance", sty.modal)}
          closeButtonClassName={classNames({
            [sty["pcls_lGMWKXVVEk5J"]]: true
          })}
          closeIcon={
            <svg
              className={classNames(projectcss.all, sty.svg___2LKii)}
              role={"img"}
            />
          }
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components
          )}
          hideFooter={true}
          maskClosable={false}
          modalContentClassName={classNames({
            [sty["pcls_7Bp2HIPGx__1"]]: true
          })}
          modalScopeClassName={sty["modal__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["modal", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["modal", "open"])}
          title={null}
          trigger={null}
          width={"100vw"}
          wrapClassName={classNames({ [sty["pcls_RTMk0rX9Eqms"]]: true })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vQv7Q)}>
            <Icon82Icon
              className={classNames(projectcss.all, sty.svg__t630C)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wKEu
              )}
            >
              {
                "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0631\u0648\u0632 \u0631\u0633\u0627\u0646\u06cc..."
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hWvGc
              )}
            >
              {
                "\u0628\u0647 \u0632\u0648\u062f\u06cc \u0642\u0627\u0628\u0644 \u062f\u0633\u062a\u0631\u0633 \u0645\u06cc \u0628\u0627\u0634\u062f."
              }
            </div>
          </div>
        </AntdModal>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "reveal",
    "username",
    "button4",
    "fragmentInput4",
    "select3",
    "fragmentInput5",
    "fragmentInput6",
    "select4",
    "button",
    "fragmentInput",
    "select2",
    "fragmentInput3",
    "fragmentInput2",
    "select",
    "btnNumber",
    "button2",
    "button3",
    "btnSaraf",
    "sendcode",
    "button5",
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8",
    "group9",
    "group10",
    "apiRequest",
    "modal"
  ],
  reveal: [
    "reveal",
    "username",
    "button4",
    "fragmentInput4",
    "select3",
    "fragmentInput5",
    "fragmentInput6",
    "select4",
    "button",
    "fragmentInput",
    "select2",
    "fragmentInput3",
    "fragmentInput2",
    "select",
    "btnNumber",
    "button2",
    "button3",
    "btnSaraf",
    "sendcode",
    "button5",
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8",
    "group9",
    "group10"
  ],
  username: [
    "username",
    "button4",
    "fragmentInput4",
    "select3",
    "fragmentInput5",
    "fragmentInput6",
    "select4"
  ],
  button4: ["button4"],
  fragmentInput4: ["fragmentInput4"],
  select3: ["select3"],
  fragmentInput5: ["fragmentInput5"],
  fragmentInput6: ["fragmentInput6"],
  select4: ["select4"],
  button: ["button"],
  fragmentInput: ["fragmentInput"],
  select2: ["select2"],
  fragmentInput3: ["fragmentInput3"],
  fragmentInput2: ["fragmentInput2"],
  select: ["select"],
  btnNumber: ["btnNumber"],
  button2: ["button2"],
  button3: ["button3"],
  btnSaraf: ["btnSaraf"],
  sendcode: ["sendcode"],
  button5: ["button5"],
  figmaPaste: [
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8"
  ],
  group: [
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle"
  ],
  group2: ["group2", "rectangle35"],
  rectangle35: ["rectangle35"],
  group3: [
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle"
  ],
  group4: ["group4", "rectangle23"],
  rectangle23: ["rectangle23"],
  group5: ["group5", "rectangle24"],
  rectangle24: ["rectangle24"],
  group6: ["group6", "rectangle25"],
  rectangle25: ["rectangle25"],
  group7: ["group7", "rectangle"],
  rectangle: ["rectangle"],
  group8: ["group8"],
  group9: ["group9"],
  group10: ["group10"],
  apiRequest: ["apiRequest"],
  modal: ["modal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  reveal: typeof Reveal;
  username: "div";
  button4: typeof Button;
  fragmentInput4: typeof Input;
  select3: typeof AntdSelect;
  fragmentInput5: typeof Input;
  fragmentInput6: typeof Input;
  select4: typeof AntdSelect;
  button: typeof Button;
  fragmentInput: typeof Input;
  select2: typeof AntdSelect;
  fragmentInput3: typeof Input;
  fragmentInput2: typeof Input;
  select: typeof AntdSelect;
  btnNumber: typeof Button;
  button2: typeof Button;
  button3: typeof Button;
  btnSaraf: typeof Button;
  sendcode: typeof Button;
  button5: typeof Button;
  figmaPaste: "div";
  group: "div";
  group2: "div";
  rectangle35: "div";
  group3: "div";
  group4: "div";
  rectangle23: "div";
  group5: "div";
  rectangle24: "div";
  group6: "div";
  rectangle25: "div";
  group7: "div";
  rectangle: "div";
  group8: "div";
  group9: "div";
  group10: "div";
  apiRequest: typeof ApiRequest;
  modal: typeof AntdModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginPanel__VariantsArgs;
    args?: PlasmicLoginPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginPanel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLoginPanel__ArgProps,
          internalVariantPropNames: PlasmicLoginPanel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginPanel";
  } else {
    func.displayName = `PlasmicLoginPanel.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sZQMbqXz9utLNaTnNb3uss"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicLoginPanel = Object.assign(
  // Top-level PlasmicLoginPanel renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    username: makeNodeComponent("username"),
    button4: makeNodeComponent("button4"),
    fragmentInput4: makeNodeComponent("fragmentInput4"),
    select3: makeNodeComponent("select3"),
    fragmentInput5: makeNodeComponent("fragmentInput5"),
    fragmentInput6: makeNodeComponent("fragmentInput6"),
    select4: makeNodeComponent("select4"),
    button: makeNodeComponent("button"),
    fragmentInput: makeNodeComponent("fragmentInput"),
    select2: makeNodeComponent("select2"),
    fragmentInput3: makeNodeComponent("fragmentInput3"),
    fragmentInput2: makeNodeComponent("fragmentInput2"),
    select: makeNodeComponent("select"),
    btnNumber: makeNodeComponent("btnNumber"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    btnSaraf: makeNodeComponent("btnSaraf"),
    sendcode: makeNodeComponent("sendcode"),
    button5: makeNodeComponent("button5"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    group: makeNodeComponent("group"),
    group2: makeNodeComponent("group2"),
    rectangle35: makeNodeComponent("rectangle35"),
    group3: makeNodeComponent("group3"),
    group4: makeNodeComponent("group4"),
    rectangle23: makeNodeComponent("rectangle23"),
    group5: makeNodeComponent("group5"),
    rectangle24: makeNodeComponent("rectangle24"),
    group6: makeNodeComponent("group6"),
    rectangle25: makeNodeComponent("rectangle25"),
    group7: makeNodeComponent("group7"),
    rectangle: makeNodeComponent("rectangle"),
    group8: makeNodeComponent("group8"),
    group9: makeNodeComponent("group9"),
    group10: makeNodeComponent("group10"),
    apiRequest: makeNodeComponent("apiRequest"),
    modal: makeNodeComponent("modal"),

    // Metadata about props expected for PlasmicLoginPanel
    internalVariantProps: PlasmicLoginPanel__VariantProps,
    internalArgProps: PlasmicLoginPanel__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "بابرکت",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/cdcc22ba73cb1607cdeb736202b178e2.png",
      canonical: ""
    }
  }
);

export default PlasmicLoginPanel;
/* prettier-ignore-end */
