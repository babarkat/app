// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: guZRqy1VG4VR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PercentageBox from "../../PercentageBox"; // plasmic-import: TD7BXkDTXaTo/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: guZRqy1VG4VR/css

import BabarkatlogoCopy2SvgIcon from "./icons/PlasmicIcon__BabarkatlogoCopy2Svg"; // plasmic-import: T8YZBqDbfTTx/icon
import GroupSvgIcon from "./icons/PlasmicIcon__GroupSvg"; // plasmic-import: 51hz8qmjnijI/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: XqFJUGsoKZel/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: 9kOh69ICiFe8/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: 33CxUtuIdK2p/icon
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: AbdW4zXLIAYD/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon55Icon from "./icons/PlasmicIcon__Icon55"; // plasmic-import: pYVCSSEZE7RE/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dXgXrJG5lp3Z/icon
import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: T5qnRYhm3_iD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jg6gpiNRWEQd/icon
import Icon60Icon from "./icons/PlasmicIcon__Icon60"; // plasmic-import: P52THJblgWka/icon
import Icon63Icon from "./icons/PlasmicIcon__Icon63"; // plasmic-import: 3pIKdy4AyleH/icon
import Icon64Icon from "./icons/PlasmicIcon__Icon64"; // plasmic-import: ikcgDOFGXPOS/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: FrIpHYscyQGN/icon
import Icon46Icon from "./icons/PlasmicIcon__Icon46"; // plasmic-import: 4DyVfhKQ1yWx/icon
import Icon44Icon from "./icons/PlasmicIcon__Icon44"; // plasmic-import: nmRZKCTHFfFp/icon
import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: rPH6lstZmeFB/icon
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: flxpisepE8-C/icon
import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: Zi-CDKu9gyKG/icon
import Icon57Icon from "./icons/PlasmicIcon__Icon57"; // plasmic-import: T9OBsfBXupjw/icon
import Icon69Icon from "./icons/PlasmicIcon__Icon69"; // plasmic-import: 0IzoCqJISrHt/icon
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: aU_d9Ch-rBVW/icon

import __lib_copyToClipboard from "copy-to-clipboard";
import __lib_md5 from "md5";

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {};
export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {
  userbabarcat?: any;
  lodingbtn?: boolean;
  newPassValue?: string;
  reoeatNewPassValue?: string;
  token?: string;
  level?: number;
};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>(
  "userbabarcat",
  "lodingbtn",
  "newPassValue",
  "reoeatNewPassValue",
  "token",
  "level"
);

export type PlasmicHeader__OverridesType = {
  header?: Flex__<"div">;
  percentageBox?: Flex__<typeof PercentageBox>;
  editProfile?: Flex__<typeof AntdModal>;
  wallet4?: Flex__<"div">;
  name?: Flex__<typeof Input>;
  lastname?: Flex__<typeof Input>;
  fathername?: Flex__<typeof Input>;
  city?: Flex__<typeof Input>;
  location?: Flex__<typeof Input>;
  editSaraf?: Flex__<typeof AntdModal>;
  wallet6?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  fragmentInput?: Flex__<typeof Input>;
  fragmentInput3?: Flex__<typeof Input>;
  fragmentInput2?: Flex__<typeof Input>;
  timer?: Flex__<typeof Timer>;
  select?: Flex__<typeof AntdSelect>;
  btnNumber?: Flex__<typeof Button>;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  btnSaraf?: Flex__<typeof Button>;
  sendcode?: Flex__<typeof Button>;
  figmaPaste?: Flex__<"div">;
  group?: Flex__<"div">;
  group2?: Flex__<"div">;
  rectangle35?: Flex__<"div">;
  group3?: Flex__<"div">;
  group4?: Flex__<"div">;
  rectangle23?: Flex__<"div">;
  group5?: Flex__<"div">;
  rectangle24?: Flex__<"div">;
  group6?: Flex__<"div">;
  rectangle25?: Flex__<"div">;
  group7?: Flex__<"div">;
  rectangle?: Flex__<"div">;
  group8?: Flex__<"div">;
  support?: Flex__<typeof AntdModal>;
  wallet7?: Flex__<"div">;
  editPassword?: Flex__<typeof AntdModal>;
  wallet5?: Flex__<"div">;
  nowPass?: Flex__<typeof Input>;
  newPass?: Flex__<typeof Input>;
  progress?: Flex__<typeof AntdProgress>;
  reoeatNewPass?: Flex__<typeof Input>;
  drawer?: Flex__<typeof AntdDrawer>;
  exitModal?: Flex__<typeof AntdModal>;
};

export interface DefaultHeaderProps {
  userbabarcat?: any;
  lodingbtn?: boolean;
  newPassValue?: string;
  reoeatNewPassValue?: string;
  token?: string;
  level?: number;
  className?: string;
}

const $$ = {
  copyToClipboard: __lib_copyToClipboard,
  md5: __lib_md5
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          userbabarcat: (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userbabarcat");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })(),
          lodingbtn: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "exitModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "editProfile.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastname.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "city.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "location.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "fathername.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editPassword.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "nowPass.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "reoeatNewPass.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "newPass.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "pass1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "password"
      },
      {
        path: "pass2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "password"
      },
      {
        path: "pass3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "password"
      },
      {
        path: "p1",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "editSaraf.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "fragmentInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "fragmentInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "fragmentInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.userbabarcat._saraf;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "saraflist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const transformedArray = $props.userbabarcat.saraflist.map(
                  item => ({
                    label: item.name,
                    value: item.id
                  })
                );
                return transformedArray;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "loadedbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "support.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsosEvNkdp6Zt6()
  });

  return (
    <div
      data-plasmic-name={"header"}
      data-plasmic-override={overrides.header}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.header
      )}
    >
      <BabarkatlogoCopy2SvgIcon
        className={classNames(projectcss.all, sty.svg__mvySp)}
        role={"img"}
      />

      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__nBoJs)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__h41B6)}>
          <GroupSvgIcon
            className={classNames(projectcss.all, sty.svg__bVNe)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDrawerOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["drawer", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDrawerOpen"] != null &&
                typeof $steps["updateDrawerOpen"] === "object" &&
                typeof $steps["updateDrawerOpen"].then === "function"
              ) {
                $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
              }
            }}
            role={"img"}
          />
        </div>
        <PercentageBox
          data-plasmic-name={"percentageBox"}
          data-plasmic-override={overrides.percentageBox}
          className={classNames("__wab_instance", sty.percentageBox)}
          shape={"round"}
          unnamedGroupOfVariants={(() => {
            try {
              return $props.level == 0
                ? "red"
                : $props.level == 3
                ? "yellow"
                : $props.level == 2
                ? "blue"
                : $props.level == 1
                ? ""
                : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "blue";
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rumSg
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.level == 0
                    ? "بلاک"
                    : $props.level == 3
                    ? "با اعتبار"
                    : $props.level == 2
                    ? "همکار"
                    : $props.level == 1
                    ? "عادی"
                    : "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "99 % ";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </PercentageBox>
      </Stack__>
      <Icon4Icon
        className={classNames(projectcss.all, sty.svg___4Y1Ns)}
        role={"img"}
      />

      <AntdModal
        data-plasmic-name={"editProfile"}
        data-plasmic-override={overrides.editProfile}
        className={classNames("__wab_instance", sty.editProfile)}
        closeButtonClassName={classNames({ [sty["pcls_jXvPmkqxDbqs"]]: true })}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        hideFooter={true}
        modalContentClassName={classNames({
          [sty["pcls_kdalUTwzGL3w"]]: true,
          [sty["pcls_qynkwFxV0E2x"]]: hasVariant(
            globalVariants,
            "screen",
            "mobileOnly"
          )
        })}
        modalScopeClassName={sty["editProfile__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["editProfile", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["editProfile", "open"])}
        title={null}
        trigger={null}
        width={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "100vw" : "100vw"
        }
        wrapClassName={classNames({ [sty["pcls_bl76GPFKHsbK"]]: true })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__sdvDv)}>
          <Stack__
            as={"div"}
            data-plasmic-name={"wallet4"}
            data-plasmic-override={overrides.wallet4}
            hasGap={true}
            className={classNames(projectcss.all, sty.wallet4)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fJp0M)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9KkJs
                )}
              >
                {
                  "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                }
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bdqb1)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xx5Bw
              )}
            >
              {
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u06a9\u0627\u0631\u0628\u0631\u06cc"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__v3Ud)}>
              <Icon30Icon
                className={classNames(projectcss.all, sty.svg__uqfYd)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"name"}
                data-plasmic-override={overrides.name}
                className={classNames("__wab_instance", sty.name)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["name", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                placeholder={"\u0646\u0627\u0645"}
                type={"text"}
                value={generateStateValueProp($state, ["name", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zAxBg)}>
              <Icon30Icon
                className={classNames(projectcss.all, sty.svg__chfOn)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"lastname"}
                data-plasmic-override={overrides.lastname}
                className={classNames("__wab_instance", sty.lastname)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "lastname",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={
                  "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                }
                type={"text"}
                value={generateStateValueProp($state, ["lastname", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__d2Iks)}>
              <Icon30Icon
                className={classNames(projectcss.all, sty.svg__l93ZI)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"fathername"}
                data-plasmic-override={overrides.fathername}
                className={classNames("__wab_instance", sty.fathername)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "fathername",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={"\u0646\u0627\u0645 \u067e\u062f\u0631"}
                type={"text"}
                value={generateStateValueProp($state, ["fathername", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pmkk9)}>
              <Icon28Icon
                className={classNames(projectcss.all, sty.svg__mVLsl)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"city"}
                data-plasmic-override={overrides.city}
                className={classNames("__wab_instance", sty.city)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["city", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                placeholder={
                  "\u0634\u0647\u0631 \u0645\u062d\u0644 \u062a\u0648\u0644\u062f"
                }
                type={"text"}
                value={generateStateValueProp($state, ["city", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__c92Mp)}>
              <Icon29Icon
                className={classNames(projectcss.all, sty.svg___5Uh0H)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"location"}
                data-plasmic-override={overrides.location}
                className={classNames("__wab_instance", sty.location)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "location",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={" \u0622\u062f\u0631\u0633"}
                type={"text"}
                value={generateStateValueProp($state, ["location", "value"])}
              />
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__pF7Mx)}
              color={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "green"
                  : "green"
              }
              onClick={async event => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "PUT",
                          "https://n8n.babarkat.com/webhook/Babarkat/login",
                          undefined,
                          (() => {
                            try {
                              return {
                                name: $state.name.value,
                                last_name: $state.lastname.value,
                                birthplace: $state.city.value,
                                location: $state.location.value,
                                fatherName: $state.fathername.value,
                                userToken: $props.token
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["invokeGlobalAction2"] = (
                  $steps.invokeGlobalAction?.data
                    ? $steps.invokeGlobalAction?.data[0]?.success === true
                    : false
                )
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "success",
                          "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0628\u0631\u0648\u0632 \u0634\u062f."
                        ]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] = await $steps[
                    "invokeGlobalAction2"
                  ];
                }

                $steps["updateModal4Open"] = (
                  $steps.invokeGlobalAction?.data
                    ? $steps.invokeGlobalAction?.data[0]?.success === true
                    : false
                )
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["editProfile", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModal4Open"] != null &&
                  typeof $steps["updateModal4Open"] === "object" &&
                  typeof $steps["updateModal4Open"].then === "function"
                ) {
                  $steps["updateModal4Open"] = await $steps["updateModal4Open"];
                }

                $steps["invokeGlobalAction3"] = (
                  $steps.invokeGlobalAction?.data
                    ? $steps.invokeGlobalAction?.data[0]?.success === false
                    : false
                )
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0622\u0645\u062f\u0647 \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                          "top-left"
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction3"] != null &&
                  typeof $steps["invokeGlobalAction3"] === "object" &&
                  typeof $steps["invokeGlobalAction3"].then === "function"
                ) {
                  $steps["invokeGlobalAction3"] = await $steps[
                    "invokeGlobalAction3"
                  ];
                }

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {
                        queryInvalidation: ["plasmic_refresh_all"]
                      };
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["refreshData"] != null &&
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s80C4
                )}
              >
                {
                  "\u062b\u0628\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                }
              </div>
            </Button>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__wJUmw)} />
        </div>
      </AntdModal>
      <AntdModal
        data-plasmic-name={"editSaraf"}
        data-plasmic-override={overrides.editSaraf}
        className={classNames("__wab_instance", sty.editSaraf)}
        closeButtonClassName={classNames({ [sty["pcls_LO2dPyO7g1fN"]]: true })}
        closeIcon={
          (() => {
            try {
              return !$state.loadedbtn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Icon60Icon
              className={classNames(projectcss.all, sty.svg__dkfx7)}
              role={"img"}
            />
          ) : null
        }
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        hideFooter={true}
        modalContentClassName={classNames({
          [sty["pcls_KLaWN2XlLNSk"]]: true,
          [sty["pcls_emKwbulljBAR"]]: hasVariant(
            globalVariants,
            "screen",
            "mobileOnly"
          )
        })}
        modalScopeClassName={sty["editSaraf__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["editSaraf", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["editSaraf", "open"])}
        title={null}
        trigger={null}
        width={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "100vw" : "100vw"
        }
        wrapClassName={classNames({ [sty["pcls_ECy8sTZpS0H1"]]: true })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__xbkO)}>
          <Stack__
            as={"div"}
            data-plasmic-name={"wallet6"}
            data-plasmic-override={overrides.wallet6}
            hasGap={true}
            className={classNames(projectcss.all, sty.wallet6)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0E0Sh)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kplWd
                )}
              >
                {
                  "\u062a\u063a\u06cc\u06cc\u0631 \u0627\u0645\u0627\u0646\u062a\u062f\u0627\u0631"
                }
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0PVr0)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uOCyg)}>
              <div className={classNames(projectcss.all, sty.freeBox__wLrkG)}>
                {false ? (
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/babarkat/images/image10.svg",
                      fullWidth: 100,
                      fullHeight: 100,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zu7Pk)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___62RaG
                  )}
                >
                  {
                    "\u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0645\u0627\u0646\u062a\u062f\u0627\u0631\u06cc"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dhrRs
                  )}
                >
                  {
                    "\u06cc\u06a9\u06cc \u0627\u0632 \u0627\u0645\u0627\u0646\u062a\u062f\u0627\u0631\u06cc \u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0628\u0647 \u0622\u0646\u0647\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a\u06cc\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a\u0627\u0646 \u0628\u0647 \u0622\u0646 \u0645\u062a\u0635\u0644 \u0634\u0648\u062f."
                  }
                </div>
                <Input
                  data-plasmic-name={"fragmentInput"}
                  data-plasmic-override={overrides.fragmentInput}
                  className={classNames("__wab_instance", sty.fragmentInput)}
                  disabled={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? false
                      : undefined
                  }
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "fragmentInput",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  placeholder={"*********09"}
                  type={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "tel"
                      : "tel"
                  }
                  value={generateStateValueProp($state, [
                    "fragmentInput",
                    "value"
                  ])}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__veRk
                  )}
                >
                  {
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0648 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 >"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uyF4O
                  )}
                >
                  {
                    "\u0627\u0646\u062a\u062e\u0627\u0628 \u0635\u0631\u0627\u0641\u06cc"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nwZ
                  )}
                >
                  {
                    "\u06cc\u06a9\u06cc \u0627\u0632 \u0635\u0631\u0627\u0641\u06cc\u200c\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0628\u0647 \u0622\u0646\u0647\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a\u06cc\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a\u0627\u0646 \u0628\u0647 \u0622\u0646 \u0645\u062a\u0635\u0644 \u0634\u0648\u062f."
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__cvZrj)}>
                  <Input
                    data-plasmic-name={"fragmentInput3"}
                    data-plasmic-override={overrides.fragmentInput3}
                    className={classNames("__wab_instance", sty.fragmentInput3)}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput3",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    placeholder={"98+"}
                    type={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "tel"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput3",
                      "value"
                    ])}
                  />

                  <Icon55Icon
                    className={classNames(projectcss.all, sty.svg__tRtl9)}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ozlBn)}
                >
                  <Input
                    data-plasmic-name={"fragmentInput2"}
                    data-plasmic-override={overrides.fragmentInput2}
                    className={classNames("__wab_instance", sty.fragmentInput2)}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput2",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    placeholder={"98+"}
                    type={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "number"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput2",
                      "value"
                    ])}
                  />
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Euqw
                  )}
                >
                  {
                    "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)"
                  }
                </div>
                <Timer
                  data-plasmic-name={"timer"}
                  data-plasmic-override={overrides.timer}
                  className={classNames("__wab_instance", sty.timer)}
                  isRunning={true}
                  runWhileEditing={false}
                />

                {false ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zAzMt
                    )}
                  >
                    {
                      "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)"
                    }
                  </div>
                ) : null}
                <AntdSelect
                  data-plasmic-name={"select"}
                  data-plasmic-override={overrides.select}
                  className={classNames("__wab_instance", sty.select)}
                  defaultOpen={false}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  defaultValue={(() => {
                    try {
                      return $props.userbabarcat._saraf;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return $state.saraflist;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={null}
                  popupScopeClassName={sty["select__popup"]}
                  size={"large"}
                  suffixIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon37Icon
                          : Icon10Icon
                      }
                      className={classNames(projectcss.all, sty.svg__q783Z)}
                      role={"img"}
                    />
                  }
                  value={generateStateValueProp($state, ["select", "value"])}
                />
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bpaf0
                )}
              >
                {
                  "\u0627\u0646\u062a\u062e\u0627\u0628 \u0635\u0631\u0627\u0641\u06cc"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wq4F)}>
                <Button
                  data-plasmic-name={"btnNumber"}
                  data-plasmic-override={overrides.btnNumber}
                  className={classNames("__wab_instance", sty.btnNumber)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__klha)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__izSt
                    )}
                  >
                    {
                      "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"
                    }
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___9MBcw)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vRf7X
                    )}
                  >
                    {
                      "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"
                    }
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___6B9Mm)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iwiI
                    )}
                  >
                    {
                      "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"
                    }
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"btnSaraf"}
                  data-plasmic-override={overrides.btnSaraf}
                  className={classNames("__wab_instance", sty.btnSaraf)}
                  color={"green"}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__mzGtD)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return $state.loadedbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/Babarkat/login",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    _saraf: $state.select.value,
                                    userToken: $props.token
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = (
                      $steps.invokeGlobalAction?.data
                        ? $steps.invokeGlobalAction?.data[0]?.success == false
                        : true
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0645\u0634\u06a9\u0644\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f."
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["runCode"] = (
                      $steps.invokeGlobalAction?.data
                        ? $steps.invokeGlobalAction?.data[0]?.success == true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                localStorage.setItem(
                                  "userbabarcat",
                                  JSON.stringify(
                                    $steps.invokeGlobalAction.data[0].data
                                  )
                                );
                                const item = {
                                  value:
                                    $steps.invokeGlobalAction.data[0].data
                                      .token,
                                  expiration:
                                    new Date().getTime() + 10 * 60 * 1000
                                };
                                return sessionStorage.setItem(
                                  "userbabarcatToken",
                                  JSON.stringify(item)
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["updateEditSarafOpen"] = (
                      $steps.invokeGlobalAction?.data
                        ? $steps.invokeGlobalAction?.data[0]?.success == true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["editSaraf", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateEditSarafOpen"] != null &&
                      typeof $steps["updateEditSarafOpen"] === "object" &&
                      typeof $steps["updateEditSarafOpen"].then === "function"
                    ) {
                      $steps["updateEditSarafOpen"] = await $steps[
                        "updateEditSarafOpen"
                      ];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            queryInvalidation: ["plasmic_refresh_all"]
                          };
                          return (async ({ queryInvalidation }) => {
                            if (!queryInvalidation) {
                              return;
                            }
                            await plasmicInvalidate(queryInvalidation);
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }

                    $steps["invokeGlobalAction3"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/users/logLaunch",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    type: "chooseSarafLogin",
                                    userToken: JSON.parse(
                                      sessionStorage.getItem(
                                        "userbabarcatToken"
                                      )
                                    ).value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateLoadedbtn3"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn3"] != null &&
                      typeof $steps["updateLoadedbtn3"] === "object" &&
                      typeof $steps["updateLoadedbtn3"].then === "function"
                    ) {
                      $steps["updateLoadedbtn3"] = await $steps[
                        "updateLoadedbtn3"
                      ];
                    }
                  }}
                  showEndIcon={(() => {
                    try {
                      return $state.loadedbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vh8Cv
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
                {false ? (
                  <Button
                    data-plasmic-name={"sendcode"}
                    data-plasmic-override={overrides.sendcode}
                    className={classNames("__wab_instance", sty.sendcode)}
                    endIcon={
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg___1KoDi)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5U4Jm
                      )}
                    >
                      {"\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                  </Button>
                ) : null}
              </div>
              {false ? (
                <div
                  data-plasmic-name={"figmaPaste"}
                  data-plasmic-override={overrides.figmaPaste}
                  className={classNames(projectcss.all, sty.figmaPaste)}
                >
                  <div
                    data-plasmic-name={"group"}
                    data-plasmic-override={overrides.group}
                    className={classNames(projectcss.all, sty.group)}
                  >
                    <div
                      data-plasmic-name={"group2"}
                      data-plasmic-override={overrides.group2}
                      className={classNames(projectcss.all, sty.group2)}
                    >
                      <div
                        data-plasmic-name={"rectangle35"}
                        data-plasmic-override={overrides.rectangle35}
                        className={classNames(projectcss.all, sty.rectangle35)}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4Ikul
                        )}
                      >
                        {"\u0627\u062f\u0627\u0645\u0647"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"group3"}
                      data-plasmic-override={overrides.group3}
                      className={classNames(projectcss.all, sty.group3)}
                    >
                      <div
                        data-plasmic-name={"group4"}
                        data-plasmic-override={overrides.group4}
                        className={classNames(projectcss.all, sty.group4)}
                      >
                        <div
                          data-plasmic-name={"rectangle23"}
                          data-plasmic-override={overrides.rectangle23}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle23
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8Fk2E
                          )}
                        >
                          {"1"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group5"}
                        data-plasmic-override={overrides.group5}
                        className={classNames(projectcss.all, sty.group5)}
                      >
                        <div
                          data-plasmic-name={"rectangle24"}
                          data-plasmic-override={overrides.rectangle24}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle24
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__b1Dbp
                          )}
                        >
                          {"2"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group6"}
                        data-plasmic-override={overrides.group6}
                        className={classNames(projectcss.all, sty.group6)}
                      >
                        <div
                          data-plasmic-name={"rectangle25"}
                          data-plasmic-override={overrides.rectangle25}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle25
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5LoVc
                          )}
                        >
                          {"3"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group7"}
                        data-plasmic-override={overrides.group7}
                        className={classNames(projectcss.all, sty.group7)}
                      >
                        <div
                          data-plasmic-name={"rectangle"}
                          data-plasmic-override={overrides.rectangle}
                          className={classNames(projectcss.all, sty.rectangle)}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dWdJs
                          )}
                        >
                          {"4"}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nszs
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 \u0632\u06cc\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ge6Py
                      )}
                    >
                      {
                        "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"group8"}
                    data-plasmic-override={overrides.group8}
                    className={classNames(projectcss.all, sty.group8)}
                  />
                </div>
              ) : null}
            </div>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__g4CXs)} />
        </div>
      </AntdModal>
      <AntdModal
        data-plasmic-name={"support"}
        data-plasmic-override={overrides.support}
        className={classNames("__wab_instance", sty.support)}
        closeButtonClassName={classNames({ [sty["pcls_I3V8uXLAhMOG"]]: true })}
        closeIcon={
          <Icon60Icon
            className={classNames(projectcss.all, sty.svg__psSw1)}
            role={"img"}
          />
        }
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        hideFooter={true}
        modalContentClassName={classNames({
          [sty["pcls_JVT-lW6sudcQ"]]: true,
          [sty["pcls_QsGw2v-yxSEV"]]: hasVariant(
            globalVariants,
            "screen",
            "mobileOnly"
          )
        })}
        modalScopeClassName={sty["support__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["support", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["support", "open"])}
        title={null}
        trigger={null}
        width={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "100vw" : "100vw"
        }
        wrapClassName={classNames({ [sty["pcls_jCHCzh-MESJT"]]: true })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__zzWtD)}>
          <Stack__
            as={"div"}
            data-plasmic-name={"wallet7"}
            data-plasmic-override={overrides.wallet7}
            hasGap={true}
            className={classNames(projectcss.all, sty.wallet7)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ovnj)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d6YO
                )}
              >
                {"\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"}
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__d1WQ)}
          >
            <Icon63Icon
              className={classNames(projectcss.all, sty.svg__lnJa8)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bkd8
              )}
            >
              {
                "\u0631\u0627\u0647 \u0647\u0627\u06cc \u0627\u0631\u062a\u0628\u0627\u0637\u06cc \u0628\u0627 \u0645\u0627"
              }
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5BhwW)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ewOsF)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return $$.copyToClipboard("02171057159");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "\u0634\u0645\u0627\u0631\u0647 \u062a\u0645\u0627\u0633 \u06a9\u067e\u06cc \u0634\u062f.",
                          "top-left",
                          5000
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
            >
              <div className={classNames(projectcss.all, sty.freeBox__agRs)}>
                <Icon64Icon
                  className={classNames(projectcss.all, sty.svg__ytc6G)}
                  role={"img"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__jsNhG)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xt5Hf
                  )}
                >
                  {
                    "\u062a\u0645\u0627\u0633 \u0628\u0627 \u0648\u0627\u062d\u062f \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mk83
                  )}
                >
                  {"02171057159"}
                </div>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__uxnBp)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return Android.onElementClicked(
                            "https://wa.me/+989202116750"
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "\u062f\u0631 \u062d\u0627\u0644 \u0627\u0646\u062a\u0642\u0627\u0644 \u0628\u0647 \u0648\u0627\u062a\u0633\u0627\u067e ...",
                          "top-left",
                          5000
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ge920)}>
                <Icon22Icon
                  className={classNames(projectcss.all, sty.svg__l2WDh)}
                  role={"img"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__rPqdo)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__piaKq
                  )}
                >
                  {
                    "\u0627\u0631\u062a\u0628\u0627\u0637 \u0627\u0632 \u0637\u0631\u06cc\u0642 \u0648\u0627\u062a\u0633\u0627\u067e"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jbkcX
                  )}
                >
                  {"09202116750"}
                </div>
              </div>
            </Stack__>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__uJ4K)} />
        </div>
      </AntdModal>
      <AntdModal
        data-plasmic-name={"editPassword"}
        data-plasmic-override={overrides.editPassword}
        className={classNames("__wab_instance", sty.editPassword)}
        closeButtonClassName={classNames({ [sty["pcls_sqOdS_lf2FiV"]]: true })}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        hideFooter={true}
        modalContentClassName={classNames({
          [sty["pcls_QyKFmuvz2r6k"]]: true,
          [sty["pcls_qcuyn_lNwZfK"]]: hasVariant(
            globalVariants,
            "screen",
            "mobileOnly"
          )
        })}
        modalScopeClassName={sty["editPassword__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["editPassword", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["editPassword", "open"])}
        title={null}
        trigger={null}
        width={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "100vw" : "100vw"
        }
        wrapClassName={classNames({ [sty["pcls_TkC6kSjbcg6h"]]: true })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__hTf31)}>
          <Stack__
            as={"div"}
            data-plasmic-name={"wallet5"}
            data-plasmic-override={overrides.wallet5}
            hasGap={true}
            className={classNames(projectcss.all, sty.wallet5)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mJy2C)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uiwci
                )}
              >
                {
                  "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                }
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fklle)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__nzhPd)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wt6XN
                )}
              >
                {
                  "\u062a\u063a\u06cc\u06cc\u0631  \u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__eKrXk)}>
              <div className={classNames(projectcss.all, sty.freeBox__lvYIt)}>
                <Icon46Icon
                  className={classNames(projectcss.all, sty.svg__a9Ffs)}
                  role={"img"}
                />

                <Input
                  data-plasmic-name={"nowPass"}
                  data-plasmic-override={overrides.nowPass}
                  className={classNames("__wab_instance", sty.nowPass)}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "nowPass",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  placeholder={
                    "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0641\u0639\u0644\u06cc"
                  }
                  type={(() => {
                    try {
                      return $state.pass1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "password";
                      }
                      throw e;
                    }
                  })()}
                  value={generateStateValueProp($state, ["nowPass", "value"])}
                />

                <Icon55Icon
                  className={classNames(projectcss.all, sty.svg__kd9Gl)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePass1"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pass1"]
                            },
                            operation: 0,
                            value: "text"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePass1"] != null &&
                      typeof $steps["updatePass1"] === "object" &&
                      typeof $steps["updatePass1"].then === "function"
                    ) {
                      $steps["updatePass1"] = await $steps["updatePass1"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = { args: [1000] };
                          return $globalActions["Fragment.wait"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updatePass12"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pass1"]
                            },
                            operation: 0,
                            value: "password"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePass12"] != null &&
                      typeof $steps["updatePass12"] === "object" &&
                      typeof $steps["updatePass12"].then === "function"
                    ) {
                      $steps["updatePass12"] = await $steps["updatePass12"];
                    }
                  }}
                  role={"img"}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kVsXz
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToLogIn2"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/Forgotten-password`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToLogIn2"] != null &&
                    typeof $steps["goToLogIn2"] === "object" &&
                    typeof $steps["goToLogIn2"].then === "function"
                  ) {
                    $steps["goToLogIn2"] = await $steps["goToLogIn2"];
                  }
                }}
              >
                {
                  "\u0622\u06cc\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062e\u0648\u062f \u0631\u0627 \u0641\u0631\u0627\u0645\u0648\u0634 \u06a9\u0631\u062f\u0647\u200c\u0627\u06cc\u062f\u061f"
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__h35Lx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uJMv
                )}
              >
                {
                  "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0627\u06cc\u062f \u062d\u062f\u0627\u0642\u0644 6 \u06a9\u0627\u0631\u0627\u06a9\u062a\u0631 \u0628\u0627\u0634\u062f."
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wiZht)}>
                <Icon44Icon
                  className={classNames(projectcss.all, sty.svg__djXWx)}
                  role={"img"}
                />

                <Input
                  data-plasmic-name={"newPass"}
                  data-plasmic-override={overrides.newPass}
                  className={classNames("__wab_instance", sty.newPass)}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "newPass",
                      "value"
                    ]).apply(null, eventArgs);

                    (async value => {
                      const $steps = {};

                      $steps["updateP1"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["p1"]
                              },
                              operation: 0,
                              value: (() => {
                                let score = 0;
                                if ($state.newPass.value.length >= 2)
                                  score += 30;
                                if ($state.newPass.value.length >= 4)
                                  score += 30;
                                if ($state.newPass.value.length >= 6)
                                  score += 40;
                                return score;
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateP1"] != null &&
                        typeof $steps["updateP1"] === "object" &&
                        typeof $steps["updateP1"].then === "function"
                      ) {
                        $steps["updateP1"] = await $steps["updateP1"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={
                    "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062c\u062f\u06cc\u062f"
                  }
                  type={(() => {
                    try {
                      return $state.pass2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "password";
                      }
                      throw e;
                    }
                  })()}
                  value={generateStateValueProp($state, ["newPass", "value"])}
                />

                <Icon55Icon
                  className={classNames(projectcss.all, sty.svg__odKuU)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePass2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pass2"]
                            },
                            operation: 0,
                            value: "text"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePass2"] != null &&
                      typeof $steps["updatePass2"] === "object" &&
                      typeof $steps["updatePass2"].then === "function"
                    ) {
                      $steps["updatePass2"] = await $steps["updatePass2"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = { args: [1000] };
                          return $globalActions["Fragment.wait"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updatePass22"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["pass2"]
                            },
                            operation: 0,
                            value: "password"
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePass22"] != null &&
                      typeof $steps["updatePass22"] === "object" &&
                      typeof $steps["updatePass22"].then === "function"
                    ) {
                      $steps["updatePass22"] = await $steps["updatePass22"];
                    }
                  }}
                  role={"img"}
                />
              </div>
              <AntdProgress
                data-plasmic-name={"progress"}
                data-plasmic-override={overrides.progress}
                className={classNames("__wab_instance", sty.progress)}
                percent={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.p1;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 50;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return $state.p1;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()
                }
                strokeColor={(() => {
                  try {
                    return $state.p1 > 80
                      ? "#2DC57B"
                      : $state.p1 > 50
                      ? "#FAAD14"
                      : "#FF4D4F";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "#FAAD14";
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__hFgb)}>
              <Icon45Icon
                className={classNames(projectcss.all, sty.svg__jT2Ll)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"reoeatNewPass"}
                data-plasmic-override={overrides.reoeatNewPass}
                className={classNames("__wab_instance", sty.reoeatNewPass)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "reoeatNewPass",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={
                  "\u062a\u06a9\u0631\u0627\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062c\u062f\u06cc\u062f"
                }
                type={(() => {
                  try {
                    return $state.pass3;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "password";
                    }
                    throw e;
                  }
                })()}
                value={generateStateValueProp($state, [
                  "reoeatNewPass",
                  "value"
                ])}
              />

              <Icon55Icon
                className={classNames(projectcss.all, sty.svg__rjZpj)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updatePass3"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["pass3"]
                          },
                          operation: 0,
                          value: "text"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePass3"] != null &&
                    typeof $steps["updatePass3"] === "object" &&
                    typeof $steps["updatePass3"].then === "function"
                  ) {
                    $steps["updatePass3"] = await $steps["updatePass3"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = { args: [1000] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["updatePass32"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["pass3"]
                          },
                          operation: 0,
                          value: "password"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePass32"] != null &&
                    typeof $steps["updatePass32"] === "object" &&
                    typeof $steps["updatePass32"].then === "function"
                  ) {
                    $steps["updatePass32"] = await $steps["updatePass32"];
                  }
                }}
                role={"img"}
              />

              {(() => {
                try {
                  return (
                    $state.reoeatNewPass.value.length > 0 &&
                    $state.newPass.value != $state.reoeatNewPass.value
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vKr5O
                  )}
                >
                  {
                    "\u062a\u06a9\u0631\u0627\u0631 \u0631\u0645\u0632 \u0628\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0645\u0637\u0627\u0628\u0642\u062a \u0646\u062f\u0627\u0631\u062f."
                  }
                </div>
              ) : null}
              {(() => {
                try {
                  return (
                    $state.reoeatNewPass.value.length > 0 &&
                    $state.newPass.value == $state.reoeatNewPass.value
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n1DKp
                  )}
                >
                  {
                    "\u062a\u0637\u0627\u0628\u0642 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062a\u0623\u06cc\u06cc\u062f \u0634\u062f."
                  }
                </div>
              ) : null}
            </div>
            <Button
              className={classNames("__wab_instance", sty.button__rJ17O)}
              color={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "green"
                  : "green"
              }
              endIcon={
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? IconIcon
                      : Icon3Icon
                  }
                  className={classNames(projectcss.all, sty.svg__ekcIi)}
                  role={"img"}
                />
              }
              isDisabled={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return (
                          $state.newPass.value != $state.reoeatNewPass.value ||
                          $state.p1 != 100 ||
                          $state.lodingbtn
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (
                          $state.newPass.value != $state.reoeatNewPass.value ||
                          $props.p1 != 100
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
              }
              onClick={async event => {
                const $steps = {};

                $steps["updateLoadedbtn"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loadedbtn"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoadedbtn"] != null &&
                  typeof $steps["updateLoadedbtn"] === "object" &&
                  typeof $steps["updateLoadedbtn"].then === "function"
                ) {
                  $steps["updateLoadedbtn"] = await $steps["updateLoadedbtn"];
                }

                $steps["invokeGlobalAction2"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.babarkat.com/webhook/Babarkat/password",
                          undefined,
                          (() => {
                            try {
                              return {
                                mobile: $props.userbabarcat.mobile,
                                password: $state.nowPass.value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] = await $steps[
                    "invokeGlobalAction2"
                  ];
                }

                $steps["invokeGlobalAction"] =
                  $steps.invokeGlobalAction2?.data[0]?.success === false
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u06cc\u0633\u062a.",
                            "top-left"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["invokeGlobalAction3"] =
                  $steps.invokeGlobalAction2?.data[0]?.success === true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "https://n8n.babarkat.com/webhook/Babarkat/password",
                            (() => {
                              try {
                                return {
                                  userToken: $props.token,
                                  password: $state.newPass.value
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            undefined,
                            undefined
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction3"] != null &&
                  typeof $steps["invokeGlobalAction3"] === "object" &&
                  typeof $steps["invokeGlobalAction3"].then === "function"
                ) {
                  $steps["invokeGlobalAction3"] = await $steps[
                    "invokeGlobalAction3"
                  ];
                }

                $steps["updateModal4Open"] =
                  $steps.invokeGlobalAction3?.data[0]?.success === true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "\u0631\u0645\u0632 \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062a\u063a\u06cc\u06cc\u0631 \u06cc\u0627\u0641\u062a.",
                            "top-left"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["updateModal4Open"] != null &&
                  typeof $steps["updateModal4Open"] === "object" &&
                  typeof $steps["updateModal4Open"].then === "function"
                ) {
                  $steps["updateModal4Open"] = await $steps["updateModal4Open"];
                }

                $steps["invokeGlobalAction4"] =
                  $steps.invokeGlobalAction3?.data[0]?.success === false
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "\u0645\u0634\u06a9\u0644\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                            "top-left"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction4"] != null &&
                  typeof $steps["invokeGlobalAction4"] === "object" &&
                  typeof $steps["invokeGlobalAction4"].then === "function"
                ) {
                  $steps["invokeGlobalAction4"] = await $steps[
                    "invokeGlobalAction4"
                  ];
                }

                $steps["updatePasswordOpen"] =
                  $steps.invokeGlobalAction3?.data[0]?.success === true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["editPassword", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updatePasswordOpen"] != null &&
                  typeof $steps["updatePasswordOpen"] === "object" &&
                  typeof $steps["updatePasswordOpen"].then === "function"
                ) {
                  $steps["updatePasswordOpen"] = await $steps[
                    "updatePasswordOpen"
                  ];
                }

                $steps["updateLoadedbtn2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loadedbtn"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoadedbtn2"] != null &&
                  typeof $steps["updateLoadedbtn2"] === "object" &&
                  typeof $steps["updateLoadedbtn2"].then === "function"
                ) {
                  $steps["updateLoadedbtn2"] = await $steps["updateLoadedbtn2"];
                }
              }}
              showEndIcon={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return $state.loadedbtn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "showEndIcon";
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___61LyC
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </Button>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__kNRh0)} />
        </div>
      </AntdModal>
      <AntdDrawer
        data-plasmic-name={"drawer"}
        data-plasmic-override={overrides.drawer}
        className={classNames("__wab_instance", sty.drawer)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        drawerBodyClassName={classNames({ [sty["pcls_gEPSKEVXpylB"]]: true })}
        drawerFooterClassName={classNames({ [sty["pcls_qG4AYU9oZO8u"]]: true })}
        drawerHeaderClassName={classNames({ [sty["pcls_Ob_VTA5_Ey9K"]]: true })}
        drawerScopeClassName={sty["drawer__drawer"]}
        drawerTitleClassName={classNames({ [sty["pcls_zN8rMt01-aq4"]]: true })}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["drawer", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["drawer", "open"])}
        title={
          <React.Fragment>
            <BabarkatlogoCopy2SvgIcon
              className={classNames(projectcss.all, sty.svg___3V0Zd)}
              role={"img"}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nlHLk)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDrawerOpen"] = $props.userbabarcat.canEdit
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["drawer", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDrawerOpen"] != null &&
                  typeof $steps["updateDrawerOpen"] === "object" &&
                  typeof $steps["updateDrawerOpen"].then === "function"
                ) {
                  $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
                }

                $steps["updateModal4Open"] = $props.userbabarcat.canEdit
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["editProfile", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModal4Open"] != null &&
                  typeof $steps["updateModal4Open"] === "object" &&
                  typeof $steps["updateModal4Open"].then === "function"
                ) {
                  $steps["updateModal4Open"] = await $steps["updateModal4Open"];
                }
              }}
            >
              <GroupSvgIcon
                className={classNames(projectcss.all, sty.svg__rApRx)}
                role={"img"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__bT6Yh)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tiUdR
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.userbabarcat.last_name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "kkkkkk";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z8Sns
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.userbabarcat.mobile;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "09228951264";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? Icon36Icon
                    : Icon36Icon
                }
                className={classNames(
                  projectcss.all,
                  sty.svg___4Qp9,
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "go"
                    : undefined
                )}
                role={"img"}
              />
            </Stack__>
          </React.Fragment>
        }
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wtMld)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wlCoF)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ka5OS)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDrawerOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["drawer", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDrawerOpen"] != null &&
                  typeof $steps["updateDrawerOpen"] === "object" &&
                  typeof $steps["updateDrawerOpen"].then === "function"
                ) {
                  $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
                }

                $steps["updatePasswordOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["editPassword", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePasswordOpen"] != null &&
                  typeof $steps["updatePasswordOpen"] === "object" &&
                  typeof $steps["updatePasswordOpen"].then === "function"
                ) {
                  $steps["updatePasswordOpen"] = await $steps[
                    "updatePasswordOpen"
                  ];
                }
              }}
            >
              <Icon43Icon
                className={classNames(projectcss.all, sty.svg__qlF3U)}
                role={"img"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__a6Bmx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hjppR
                  )}
                >
                  {
                    "\u062a\u0646\u0638\u06cc\u0645\u0627\u062a \u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                  }
                </div>
              </div>
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? Icon36Icon
                    : Icon36Icon
                }
                className={classNames(projectcss.all, sty.svg__k7Yjj)}
                role={"img"}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___4BKvU)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDrawerOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["drawer", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDrawerOpen"] != null &&
                  typeof $steps["updateDrawerOpen"] === "object" &&
                  typeof $steps["updateDrawerOpen"].then === "function"
                ) {
                  $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
                }

                $steps["updatePasswordOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["editSaraf", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePasswordOpen"] != null &&
                  typeof $steps["updatePasswordOpen"] === "object" &&
                  typeof $steps["updatePasswordOpen"].then === "function"
                ) {
                  $steps["updatePasswordOpen"] = await $steps[
                    "updatePasswordOpen"
                  ];
                }
              }}
            >
              <Icon57Icon
                className={classNames(projectcss.all, sty.svg__idyNs)}
                role={"img"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__jHxP)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vifz0
                  )}
                >
                  {
                    "\u062a\u063a\u06cc\u06cc\u0631 \u0627\u0645\u0627\u0646\u062a\u062f\u0627\u0631"
                  }
                </div>
              </div>
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? Icon36Icon
                    : Icon36Icon
                }
                className={classNames(projectcss.all, sty.svg__nfSzB)}
                role={"img"}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__aDXqQ)}
              onClick={async event => {
                const $steps = {};

                $steps["updateDrawerOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["drawer", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDrawerOpen"] != null &&
                  typeof $steps["updateDrawerOpen"] === "object" &&
                  typeof $steps["updateDrawerOpen"].then === "function"
                ) {
                  $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
                }

                $steps["updatePasswordOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["support", "open"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePasswordOpen"] != null &&
                  typeof $steps["updatePasswordOpen"] === "object" &&
                  typeof $steps["updatePasswordOpen"].then === "function"
                ) {
                  $steps["updatePasswordOpen"] = await $steps[
                    "updatePasswordOpen"
                  ];
                }
              }}
            >
              <Icon69Icon
                className={classNames(projectcss.all, sty.svg__dDeLg)}
                role={"img"}
              />

              <div className={classNames(projectcss.all, sty.freeBox___0Rt0N)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oxgZ0
                  )}
                >
                  {"\u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc"}
                </div>
              </div>
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? Icon36Icon
                    : Icon36Icon
                }
                className={classNames(projectcss.all, sty.svg___06LD1)}
                role={"img"}
              />
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ulcP1)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDrawerOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["drawer", "open"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDrawerOpen"] != null &&
                typeof $steps["updateDrawerOpen"] === "object" &&
                typeof $steps["updateDrawerOpen"].then === "function"
              ) {
                $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
              }

              $steps["updateModal3Open"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["exitModal", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModal3Open"] != null &&
                typeof $steps["updateModal3Open"] === "object" &&
                typeof $steps["updateModal3Open"].then === "function"
              ) {
                $steps["updateModal3Open"] = await $steps["updateModal3Open"];
              }
            }}
          >
            <Icon24Icon
              className={classNames(projectcss.all, sty.svg__xiPvr)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__h9Ejh)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ecm9S
                )}
              >
                {
                  "\u062e\u0631\u0648\u062c \u0627\u0632 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                }
              </div>
            </div>
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? Icon36Icon
                  : Icon36Icon
              }
              className={classNames(projectcss.all, sty.svg__nOHu)}
              role={"img"}
            />
          </Stack__>
        </Stack__>
      </AntdDrawer>
      <AntdModal
        data-plasmic-name={"exitModal"}
        data-plasmic-override={overrides.exitModal}
        className={classNames("__wab_instance", sty.exitModal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        hideFooter={true}
        maskClosable={true}
        modalContentClassName={classNames({ [sty["pcls_TPizMrKYPhnq"]]: true })}
        modalScopeClassName={sty["exitModal__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["exitModal", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["exitModal", "open"])}
        title={null}
        trigger={null}
        width={"520"}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vv4DC)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__v28Jk
            )}
          >
            {
              "\u062e\u0631\u0648\u062c \u0627\u0632 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xqcny
            )}
          >
            {
              "\u0622\u06cc\u0627 \u0645\u06cc \u062e\u0648\u0627\u0647\u06cc\u062f \u0627\u0632 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u062e\u0648\u062f \u062e\u0627\u0631\u062c \u0634\u0648\u06cc\u062f\u061f"
            }
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rolc8)}
        >
          <Button
            className={classNames("__wab_instance", sty.button__mZa3)}
            color={"red"}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return localStorage.removeItem("userbabarcat");
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["goToLogIn"] = true
                ? (() => {
                    const actionArgs = { destination: `/login` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToLogIn"] != null &&
                typeof $steps["goToLogIn"] === "object" &&
                typeof $steps["goToLogIn"].then === "function"
              ) {
                $steps["goToLogIn"] = await $steps["goToLogIn"];
              }

              $steps["updateModal3Open"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["exitModal", "open"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModal3Open"] != null &&
                typeof $steps["updateModal3Open"] === "object" &&
                typeof $steps["updateModal3Open"].then === "function"
              ) {
                $steps["updateModal3Open"] = await $steps["updateModal3Open"];
              }
            }}
          >
            {"\u0628\u0644\u0647"}
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__jbPva)}
            color={"sand"}
            onClick={async event => {
              const $steps = {};

              $steps["updateModal3Open"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["exitModal", "open"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModal3Open"] != null &&
                typeof $steps["updateModal3Open"] === "object" &&
                typeof $steps["updateModal3Open"].then === "function"
              ) {
                $steps["updateModal3Open"] = await $steps["updateModal3Open"];
              }
            }}
          >
            {"\u0627\u0646\u0635\u0631\u0627\u0641"}
          </Button>
        </Stack__>
      </AntdModal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  header: [
    "header",
    "percentageBox",
    "editProfile",
    "wallet4",
    "name",
    "lastname",
    "fathername",
    "city",
    "location",
    "editSaraf",
    "wallet6",
    "img",
    "fragmentInput",
    "fragmentInput3",
    "fragmentInput2",
    "timer",
    "select",
    "btnNumber",
    "button",
    "button2",
    "btnSaraf",
    "sendcode",
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8",
    "support",
    "wallet7",
    "editPassword",
    "wallet5",
    "nowPass",
    "newPass",
    "progress",
    "reoeatNewPass",
    "drawer",
    "exitModal"
  ],
  percentageBox: ["percentageBox"],
  editProfile: [
    "editProfile",
    "wallet4",
    "name",
    "lastname",
    "fathername",
    "city",
    "location"
  ],
  wallet4: ["wallet4"],
  name: ["name"],
  lastname: ["lastname"],
  fathername: ["fathername"],
  city: ["city"],
  location: ["location"],
  editSaraf: [
    "editSaraf",
    "wallet6",
    "img",
    "fragmentInput",
    "fragmentInput3",
    "fragmentInput2",
    "timer",
    "select",
    "btnNumber",
    "button",
    "button2",
    "btnSaraf",
    "sendcode",
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8"
  ],
  wallet6: ["wallet6"],
  img: ["img"],
  fragmentInput: ["fragmentInput"],
  fragmentInput3: ["fragmentInput3"],
  fragmentInput2: ["fragmentInput2"],
  timer: ["timer"],
  select: ["select"],
  btnNumber: ["btnNumber"],
  button: ["button"],
  button2: ["button2"],
  btnSaraf: ["btnSaraf"],
  sendcode: ["sendcode"],
  figmaPaste: [
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8"
  ],
  group: [
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle"
  ],
  group2: ["group2", "rectangle35"],
  rectangle35: ["rectangle35"],
  group3: [
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle"
  ],
  group4: ["group4", "rectangle23"],
  rectangle23: ["rectangle23"],
  group5: ["group5", "rectangle24"],
  rectangle24: ["rectangle24"],
  group6: ["group6", "rectangle25"],
  rectangle25: ["rectangle25"],
  group7: ["group7", "rectangle"],
  rectangle: ["rectangle"],
  group8: ["group8"],
  support: ["support", "wallet7"],
  wallet7: ["wallet7"],
  editPassword: [
    "editPassword",
    "wallet5",
    "nowPass",
    "newPass",
    "progress",
    "reoeatNewPass"
  ],
  wallet5: ["wallet5"],
  nowPass: ["nowPass"],
  newPass: ["newPass"],
  progress: ["progress"],
  reoeatNewPass: ["reoeatNewPass"],
  drawer: ["drawer"],
  exitModal: ["exitModal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  header: "div";
  percentageBox: typeof PercentageBox;
  editProfile: typeof AntdModal;
  wallet4: "div";
  name: typeof Input;
  lastname: typeof Input;
  fathername: typeof Input;
  city: typeof Input;
  location: typeof Input;
  editSaraf: typeof AntdModal;
  wallet6: "div";
  img: typeof PlasmicImg__;
  fragmentInput: typeof Input;
  fragmentInput3: typeof Input;
  fragmentInput2: typeof Input;
  timer: typeof Timer;
  select: typeof AntdSelect;
  btnNumber: typeof Button;
  button: typeof Button;
  button2: typeof Button;
  btnSaraf: typeof Button;
  sendcode: typeof Button;
  figmaPaste: "div";
  group: "div";
  group2: "div";
  rectangle35: "div";
  group3: "div";
  group4: "div";
  rectangle23: "div";
  group5: "div";
  rectangle24: "div";
  group6: "div";
  rectangle25: "div";
  group7: "div";
  rectangle: "div";
  group8: "div";
  support: typeof AntdModal;
  wallet7: "div";
  editPassword: typeof AntdModal;
  wallet5: "div";
  nowPass: typeof Input;
  newPass: typeof Input;
  progress: typeof AntdProgress;
  reoeatNewPass: typeof Input;
  drawer: typeof AntdDrawer;
  exitModal: typeof AntdModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("header"),
  {
    // Helper components rendering sub-elements
    percentageBox: makeNodeComponent("percentageBox"),
    editProfile: makeNodeComponent("editProfile"),
    wallet4: makeNodeComponent("wallet4"),
    _name: makeNodeComponent("name"),
    lastname: makeNodeComponent("lastname"),
    fathername: makeNodeComponent("fathername"),
    city: makeNodeComponent("city"),
    location: makeNodeComponent("location"),
    editSaraf: makeNodeComponent("editSaraf"),
    wallet6: makeNodeComponent("wallet6"),
    img: makeNodeComponent("img"),
    fragmentInput: makeNodeComponent("fragmentInput"),
    fragmentInput3: makeNodeComponent("fragmentInput3"),
    fragmentInput2: makeNodeComponent("fragmentInput2"),
    timer: makeNodeComponent("timer"),
    select: makeNodeComponent("select"),
    btnNumber: makeNodeComponent("btnNumber"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    btnSaraf: makeNodeComponent("btnSaraf"),
    sendcode: makeNodeComponent("sendcode"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    group: makeNodeComponent("group"),
    group2: makeNodeComponent("group2"),
    rectangle35: makeNodeComponent("rectangle35"),
    group3: makeNodeComponent("group3"),
    group4: makeNodeComponent("group4"),
    rectangle23: makeNodeComponent("rectangle23"),
    group5: makeNodeComponent("group5"),
    rectangle24: makeNodeComponent("rectangle24"),
    group6: makeNodeComponent("group6"),
    rectangle25: makeNodeComponent("rectangle25"),
    group7: makeNodeComponent("group7"),
    rectangle: makeNodeComponent("rectangle"),
    group8: makeNodeComponent("group8"),
    support: makeNodeComponent("support"),
    wallet7: makeNodeComponent("wallet7"),
    editPassword: makeNodeComponent("editPassword"),
    wallet5: makeNodeComponent("wallet5"),
    nowPass: makeNodeComponent("nowPass"),
    newPass: makeNodeComponent("newPass"),
    progress: makeNodeComponent("progress"),
    reoeatNewPass: makeNodeComponent("reoeatNewPass"),
    drawer: makeNodeComponent("drawer"),
    exitModal: makeNodeComponent("exitModal"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
