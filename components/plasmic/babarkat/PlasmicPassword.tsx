/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: NplQo51f3X7d

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Dialog } from "@plasmicpkgs/radix-ui";
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { DialogClose } from "@plasmicpkgs/radix-ui";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicPassword.module.css"; // plasmic-import: NplQo51f3X7d/css

import Icon162Icon from "./icons/PlasmicIcon__Icon162"; // plasmic-import: 1H7C8RS5wNv-/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: XoiNjWGyNWHX/icon

createPlasmicElementProxy;

export type PlasmicPassword__VariantMembers = {
  noTrigger: "noTrigger";
  hideHeader: "hideHeader";
  noSpacing: "noSpacing";
  fullScreen: "fullScreen";
};
export type PlasmicPassword__VariantsArgs = {
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  hideHeader?: SingleBooleanChoiceArg<"hideHeader">;
  noSpacing?: SingleBooleanChoiceArg<"noSpacing">;
  fullScreen?: SingleBooleanChoiceArg<"fullScreen">;
};
type VariantPropType = keyof PlasmicPassword__VariantsArgs;
export const PlasmicPassword__VariantProps = new Array<VariantPropType>(
  "noTrigger",
  "hideHeader",
  "noSpacing",
  "fullScreen"
);

export type PlasmicPassword__ArgsType = {
  open?: boolean;
  onOpenChange?: (val: boolean) => void;
  data?: any;
  type?: string;
  onTypeChange?: (val: string) => void;
  onClick?: (event: any) => void;
  load?: boolean;
  onLoadChange?: (val: string) => void;
  onClick2?: (event: any) => void;
  onOk?: (event: any) => void;
  onCansel?: () => void;
  code?: string;
  onCodeChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicPassword__ArgsType;
export const PlasmicPassword__ArgProps = new Array<ArgPropType>(
  "open",
  "onOpenChange",
  "data",
  "type",
  "onTypeChange",
  "onClick",
  "load",
  "onLoadChange",
  "onClick2",
  "onOk",
  "onCansel",
  "code",
  "onCodeChange"
);

export type PlasmicPassword__OverridesType = {
  dialog?: Flex__<typeof Dialog>;
  dialogContent?: Flex__<typeof DialogContent>;
  embedHtml?: Flex__<typeof Embed>;
  button3?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  dialogClose?: Flex__<typeof DialogClose>;
};

export interface DefaultPasswordProps {
  open?: boolean;
  onOpenChange?: (val: boolean) => void;
  data?: any;
  type?: string;
  onTypeChange?: (val: string) => void;
  onClick?: (event: any) => void;
  load?: boolean;
  onLoadChange?: (val: string) => void;
  onClick2?: (event: any) => void;
  onOk?: (event: any) => void;
  onCansel?: () => void;
  code?: string;
  onCodeChange?: (val: string) => void;
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  hideHeader?: SingleBooleanChoiceArg<"hideHeader">;
  noSpacing?: SingleBooleanChoiceArg<"noSpacing">;
  fullScreen?: SingleBooleanChoiceArg<"fullScreen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPassword__RenderFunc(props: {
  variants: PlasmicPassword__VariantsArgs;
  args: PlasmicPassword__ArgsType;
  overrides: PlasmicPassword__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: {
            data: [
              {
                text: "\u0645\u0648\u0631\u062f \u0627\u0648\u0644",
                value: 100
              },
              {
                text: "\u0645\u0648\u0631\u062f \u062f\u0648\u0645",
                value: 200
              },
              {
                text: "\u0645\u0648\u0631\u062f \u0633\u0648\u0645",
                value: 300
              },
              {
                text: "\u0645\u0648\u0631\u062f \u0686\u0647\u0627\u0631\u0645",
                value: 400
              },
              {
                text: "\u0645\u0648\u0631\u062f \u067e\u0646\u062c\u0645",
                value: 500
              }
            ],
            amount: {
              type: "\u0627\u0641\u063a\u0627\u0646\u06cc",
              text: "\u0645\u0628\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a \u0634\u062f\u0647 ",
              value: "500000",
              amount: 1000
            }
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "noTrigger",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTrigger
      },
      {
        path: "hideHeader",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideHeader
      },
      {
        path: "noSpacing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noSpacing
      },
      {
        path: "fullScreen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fullScreen
      },
      {
        path: "type",
        type: "writable",
        variableType: "text",

        valueProp: "type",
        onChangeProp: "onTypeChange"
      },
      {
        path: "load",
        type: "writable",
        variableType: "boolean",

        valueProp: "load",
        onChangeProp: "onLoadChange"
      },
      {
        path: "button2.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button3.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "code",
        type: "writable",
        variableType: "text",

        valueProp: "code",
        onChangeProp: "onCodeChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <Dialog
      data-plasmic-name={"dialog"}
      data-plasmic-override={overrides.dialog}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.dialog,
        {
          [sty.dialogfullScreen]: hasVariant(
            $state,
            "fullScreen",
            "fullScreen"
          ),
          [sty.dialoghideHeader]: hasVariant(
            $state,
            "hideHeader",
            "hideHeader"
          ),
          [sty.dialognoSpacing]: hasVariant($state, "noSpacing", "noSpacing"),
          [sty.dialognoTrigger]: hasVariant($state, "noTrigger", "noTrigger")
        }
      )}
      defaultOpen={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["dialog", "open"]).apply(
          null,
          eventArgs
        );
      }}
      open={generateStateValueProp($state, ["dialog", "open"])}
      overlayClassName={classNames({
        [sty["pcls_AIgLmBpsmac5"]]:
          hasVariant($state, "fullScreen", "fullScreen") &&
          hasVariant(globalVariants, "screen", "mobileOnly"),
        [sty["pcls_V90SDJgan31X"]]: hasVariant(
          globalVariants,
          "screen",
          "mobileOnly"
        ),
        [sty["pcls_h9SHkMNZ1_eS"]]: hasVariant(
          $state,
          "fullScreen",
          "fullScreen"
        ),
        [sty["pcls_u4-hWaOdsBl_"]]: true
      })}
      themeResetClass={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames
      )}
      triggerSlot={null}
    >
      <DialogContent
        data-plasmic-name={"dialogContent"}
        data-plasmic-override={overrides.dialogContent}
        className={classNames("__wab_instance", sty.dialogContent, {
          [sty.dialogContentfullScreen]: hasVariant(
            $state,
            "fullScreen",
            "fullScreen"
          ),
          [sty.dialogContentglobal_experiment_override]: hasVariant(
            globalVariants,
            "experiment",
            "override"
          ),
          [sty.dialogContenthideHeader]: hasVariant(
            $state,
            "hideHeader",
            "hideHeader"
          ),
          [sty.dialogContentnoSpacing]: hasVariant(
            $state,
            "noSpacing",
            "noSpacing"
          )
        })}
        enterAnimations={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ["slide-in-from-bottom"]
            : undefined
        }
        enterDuration={
          hasVariant(globalVariants, "screen", "mobileOnly") ? 0.3 : 0.3
        }
        exitAnimations={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ["slide-out-to-bottom"]
            : undefined
        }
        exitDuration={
          hasVariant(globalVariants, "screen", "mobileOnly") ? 0.5 : 0.5
        }
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__ryjSs, {
            [sty.freeBoxhideHeader__ryjSs8PX0]: hasVariant(
              $state,
              "hideHeader",
              "hideHeader"
            )
          })}
          dir={``}
        >
          <div className={classNames(projectcss.all, sty.freeBox__xfhpu)}>
            <Icon162Icon
              className={classNames(projectcss.all, sty.svg__klMvv)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qsWyV
              )}
            >
              {
                "\u0631\u0645\u0632 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q64Hh
              )}
            >
              {
                "\u0628\u0627 \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0631\u0645\u0632\u060c \u0627\u06cc\u0646 \u0639\u0645\u0644\u06cc\u0627\u062a \u062a\u0623\u06cc\u06cc\u062f \u0645\u06cc\u200c\u0634\u0648\u062f"
              }
            </div>
          </div>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<div class="otp-wrapper">\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit1" class="otp-input"\r\n         onkeyup="handleInput(this, 0, \'digit2\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit2" class="otp-input"\r\n         onkeyup="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit3" class="otp-input"\r\n         onkeyup="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')" />\r\n\r\n  <input type="text" inputmode="numeric" pattern="[0-9]*" maxlength="1" id="digit4" class="otp-input"\r\n         onkeyup="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')" />\r\n</div>\r\n\r\n<script>\r\n  window.inputValues = ["", "", "", ""];\r\n  window.codeCompleted = false;\r\n\r\n  function handleInput(current, index, nextFieldId) {\r\n    const value = current.value;\r\n    if (!window.inputValues) {\r\n        window.inputValues = ["", "", "", ""];\r\n    }\r\n    // \u0641\u0642\u0637 \u0639\u062f\u062f\r\n    if (!/^[0-9]$/.test(value)) {\r\n      current.value = \'\';\r\n      window.inputValues[index] = \'\';\r\n    } else {\r\n      window.inputValues[index] = value;\r\n    }\r\n\r\n    // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc\r\n    if (value.length === 1 && nextFieldId) {\r\n      document.getElementById(nextFieldId).focus();\r\n    }\r\n\r\n    // \u0627\u06af\u0647 \u06cc\u06a9\u06cc \u0627\u0632 \u0641\u06cc\u0644\u062f\u0647\u0627 \u062e\u0627\u0644\u06cc \u0628\u0634\u0647 \u2192 \u0627\u062c\u0627\u0632\u0647 \u0628\u062f\u0647 \u062f\u0648\u0628\u0627\u0631\u0647 log \u0628\u0634\u0647\r\n    if (window.inputValues.some(val => val === "")) {\r\n      window.codeCompleted = false;\r\n    }\r\n\r\n    // \u0641\u0642\u0637 \u0648\u0642\u062a\u06cc \u0647\u0645\u0647 \u067e\u0631 \u0628\u0648\u062f\u0646 \u0648 \u0642\u0628\u0644\u0627\u064b log \u0646\u0634\u062f\u0647:\r\n    if (window.inputValues.every(val => val !== "") && !window.codeCompleted) {\r\n      console.log("ok");\r\n      document.querySelector(\'#codeButten button\').click();\r\n      window.codeCompleted = true;\r\n    }\r\n  }\r\n\r\n  function moveToPrev(event, prevFieldId) {\r\n    if (event.key === "Backspace" && !event.target.value) {\r\n      document.getElementById(prevFieldId).focus();\r\n    }\r\n  }\r\n</script>\r\n'
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox___3Bgva)}>
            <div
              className={classNames(projectcss.all, sty.freeBox__sXxnY)}
              id={"codeButten"}
            >
              <Button
                data-plasmic-name={"button3"}
                data-plasmic-override={overrides.button3}
                className={classNames("__wab_instance", sty.button3)}
                color={"green"}
                loadingviow={generateStateValueProp($state, [
                  "button3",
                  "loadingviow"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateCode"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["code"]
                          },
                          operation: 0,
                          value: window.inputValues.join("")
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCode"] != null &&
                    typeof $steps["updateCode"] === "object" &&
                    typeof $steps["updateCode"].then === "function"
                  ) {
                    $steps["updateCode"] = await $steps["updateCode"];
                  }

                  $steps["runOnOk"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["onOk"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runOnOk"] != null &&
                    typeof $steps["runOnOk"] === "object" &&
                    typeof $steps["runOnOk"].then === "function"
                  ) {
                    $steps["runOnOk"] = await $steps["runOnOk"];
                  }
                }}
                onLoadingviowChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "button3",
                      "loadingviow"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lVwdb
                  )}
                >
                  {"\u062a\u0627\u06cc\u06cc\u062f"}
                </div>
              </Button>
            </div>
            <Button
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames("__wab_instance", sty.button2)}
              color={"softGreen"}
              loadingviow={generateStateValueProp($state, [
                "button2",
                "loadingviow"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.dialog.open = false);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["runOnCansel"] = true
                  ? (() => {
                      const actionArgs = { eventRef: $props["onCansel"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnCansel"] != null &&
                  typeof $steps["runOnCansel"] === "object" &&
                  typeof $steps["runOnCansel"].then === "function"
                ) {
                  $steps["runOnCansel"] = await $steps["runOnCansel"];
                }
              }}
              onLoadingviowChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "loadingviow"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0JP5R
                )}
              >
                {"\u0627\u0646\u0635\u0631\u0627\u0641"}
              </div>
            </Button>
          </div>
        </div>
        <DialogClose
          data-plasmic-name={"dialogClose"}
          data-plasmic-override={overrides.dialogClose}
          className={classNames("__wab_instance", sty.dialogClose, {
            [sty.dialogClosehideHeader]: hasVariant(
              $state,
              "hideHeader",
              "hideHeader"
            )
          })}
        >
          <XIcon
            className={classNames(projectcss.all, sty.svg__gEpQu)}
            role={"img"}
          />
        </DialogClose>
      </DialogContent>
    </Dialog>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dialog: [
    "dialog",
    "dialogContent",
    "embedHtml",
    "button3",
    "button2",
    "dialogClose"
  ],
  dialogContent: [
    "dialogContent",
    "embedHtml",
    "button3",
    "button2",
    "dialogClose"
  ],
  embedHtml: ["embedHtml"],
  button3: ["button3"],
  button2: ["button2"],
  dialogClose: ["dialogClose"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dialog: typeof Dialog;
  dialogContent: typeof DialogContent;
  embedHtml: typeof Embed;
  button3: typeof Button;
  button2: typeof Button;
  dialogClose: typeof DialogClose;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPassword__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPassword__VariantsArgs;
    args?: PlasmicPassword__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicPassword__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicPassword__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPassword__ArgProps,
          internalVariantPropNames: PlasmicPassword__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPassword__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dialog") {
    func.displayName = "PlasmicPassword";
  } else {
    func.displayName = `PlasmicPassword.${nodeName}`;
  }
  return func;
}

export const PlasmicPassword = Object.assign(
  // Top-level PlasmicPassword renders the root element
  makeNodeComponent("dialog"),
  {
    // Helper components rendering sub-elements
    dialogContent: makeNodeComponent("dialogContent"),
    embedHtml: makeNodeComponent("embedHtml"),
    button3: makeNodeComponent("button3"),
    button2: makeNodeComponent("button2"),
    dialogClose: makeNodeComponent("dialogClose"),

    // Metadata about props expected for PlasmicPassword
    internalVariantProps: PlasmicPassword__VariantProps,
    internalArgProps: PlasmicPassword__ArgProps
  }
);

export default PlasmicPassword;
/* prettier-ignore-end */
