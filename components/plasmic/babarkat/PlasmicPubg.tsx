/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: Izx7HE7nypnF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Boxselect2 from "../../Boxselect2"; // plasmic-import: skA4mCHGCjr2/component
import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: OG1SoduAPhRs/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import ShopModal from "../../ShopModal"; // plasmic-import: pU2JisUur_AL/component

import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicPubg.module.css"; // plasmic-import: Izx7HE7nypnF/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dXgXrJG5lp3Z/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: ABwvUbBMtZqM/icon
import Icon154Icon from "./icons/PlasmicIcon__Icon154"; // plasmic-import: vEkGA7arj2Yg/icon
import RadioButtonCheckedSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__RadioButtonCheckedSvgrepoCom2Svg"; // plasmic-import: txDOSA20FGud/icon
import CheckCircleSvgrepoComSvgIcon from "./icons/PlasmicIcon__CheckCircleSvgrepoComSvg"; // plasmic-import: 3lQ_sc0p8wap/icon
import LineXlSvgrepoComSvgIcon from "./icons/PlasmicIcon__LineXlSvgrepoComSvg"; // plasmic-import: PKDhRR5tO_9t/icon
import Icon72Icon from "./icons/PlasmicIcon__Icon72"; // plasmic-import: IUYTI9O-WF22/icon
import Icon70Icon from "./icons/PlasmicIcon__Icon70"; // plasmic-import: I0oI14s4oqbt/icon
import Icon112Icon from "./icons/PlasmicIcon__Icon112"; // plasmic-import: n9IddAjxlxU9/icon
import Icon113Icon from "./icons/PlasmicIcon__Icon113"; // plasmic-import: G2o3PwB6SKLN/icon
import Icon114Icon from "./icons/PlasmicIcon__Icon114"; // plasmic-import: TMIYL_YcSO8V/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Group3SvgIcon from "./icons/PlasmicIcon__Group3Svg"; // plasmic-import: 3nXrgMVaV7TW/icon
import Group4SvgIcon from "./icons/PlasmicIcon__Group4Svg"; // plasmic-import: 8w6sGTNqgCIT/icon
import Group7SvgIcon from "./icons/PlasmicIcon__Group7Svg"; // plasmic-import: o5fEPeaAf9nA/icon

import { v4 as __lib_uuid__v4 } from "uuid";

createPlasmicElementProxy;

export type PlasmicPubg__VariantMembers = {
  steps2: "step2" | "step3";
};
export type PlasmicPubg__VariantsArgs = {
  steps2?: SingleChoiceArg<"step2" | "step3">;
};
type VariantPropType = keyof PlasmicPubg__VariantsArgs;
export const PlasmicPubg__VariantProps = new Array<VariantPropType>("steps2");

export type PlasmicPubg__ArgsType = {};
type ArgPropType = keyof PlasmicPubg__ArgsType;
export const PlasmicPubg__ArgProps = new Array<ArgPropType>();

export type PlasmicPubg__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  operators?: Flex__<"div">;
  boxselect?: Flex__<typeof Boxselect2>;
  wallet?: Flex__<"div">;
  steps?: Flex__<"div">;
  مشخصات?: Flex__<"div">;
  selected?: Flex__<"svg">;
  مبلغشارژ?: Flex__<"div">;
  unselected?: Flex__<"svg">;
  تاییدخرید?: Flex__<"div">;
  unselected2?: Flex__<"svg">;
  pubgi?: Flex__<"div">;
  pubginame?: Flex__<typeof Input>;
  pubgiId?: Flex__<typeof Input>;
  likee?: Flex__<"div">;
  likee2?: Flex__<typeof Input>;
  bigoLive?: Flex__<"div">;
  bigoLive3?: Flex__<typeof Input>;
  imo2?: Flex__<"div">;
  imo?: Flex__<typeof Input>;
  chargeType?: Flex__<"div">;
  boxselect2?: Flex__<typeof Boxselect2>;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabButton?: Flex__<typeof TabButton>;
  button?: Flex__<typeof Button>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  tabContent?: Flex__<typeof TabContent>;
  button2?: Flex__<typeof Button>;
  button3?: Flex__<typeof Button>;
  step1Next?: Flex__<typeof Button>;
  step1Next2?: Flex__<typeof Button>;
  step1Next3?: Flex__<typeof Button>;
  modal?: Flex__<typeof AntdModal>;
  ul?: Flex__<"ul">;
  اپراتور3?: Flex__<"div">;
  button4?: Flex__<typeof Button>;
  modal3?: Flex__<typeof AntdModal>;
  lottie?: Flex__<typeof LottieWrapper>;
  button5?: Flex__<typeof Button>;
  commissionBabarkat?: Flex__<typeof ApiRequest>;
  rate?: Flex__<typeof ApiRequest>;
  button6?: Flex__<typeof Button>;
  embedHtml?: Flex__<typeof Embed>;
  sideEffect?: Flex__<typeof SideEffect>;
  shopModal?: Flex__<typeof ShopModal>;
  exchangeRate?: Flex__<typeof ApiRequest>;
};

export interface DefaultPubgProps {}

const $$ = {
  uuid: {
    v4: __lib_uuid__v4
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPubg__RenderFunc(props: {
  variants: PlasmicPubg__VariantsArgs;
  args: PlasmicPubg__ArgsType;
  overrides: PlasmicPubg__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "operators2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "MTN",
            nameop: "Irancell",
            description:
              "\u0634\u0627\u0631\u0698 \u0627\u06cc\u0631\u0627\u0646\u0633\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image19.svg",
            codes: [
              "0900",
              "0901",
              "0902",
              "0903",
              "0904",
              "0905",
              "0930",
              "0933",
              "0935",
              "0936",
              "0937",
              "0938",
              "0939",
              "0941"
            ],
            internet: [
              {
                text: "\u0627\u0639\u062a\u0628\u0627\u0631\u06cc",
                type: "credit"
              },
              { text: "\u062f\u0627\u0626\u0645\u06cc", type: "permanent" },
              { text: "TDLTE", type: "TDLTE" }
            ]
          },
          {
            name: "MCI",
            nameop: "hamrah_Aval",
            description:
              "\u0634\u0627\u0631\u0698 \u0647\u0645\u0631\u0627\u0647 \u0627\u0648\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image20.svg",
            codes: [
              "0910",
              "0911",
              "0912",
              "0913",
              "0914",
              "0915",
              "0916",
              "0917",
              "0918",
              "0919",
              "0990",
              "0991",
              "0992",
              "0993",
              "0994",
              "0996"
            ],
            chargeRange: {
              min: 1000,
              max: 100000,
              customAmounts: false,
              amountStep: 1000
            },
            internet: [
              {
                text: "\u0627\u0639\u062a\u0628\u0627\u0631\u06cc",
                type: "credit"
              },
              { text: "\u062f\u0627\u0626\u0645\u06cc", type: "permanent" }
            ]
          },
          {
            name: "RTL",
            nameop: "RighTel",
            description:
              "\u0634\u0627\u0631\u0698 \u0631\u0627\u06cc\u062a\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image22.svg",
            codes: ["0920", "0921", "0922", "0923"],
            chargeRange: { min: 1000, max: 150000, customAmounts: true },
            internet: [
              {
                text: "\u0627\u0639\u062a\u0628\u0627\u0631\u06cc",
                type: "credit"
              },
              { text: "\u062f\u0627\u0626\u0645\u06cc", type: "permanent" }
            ]
          },
          {
            name: "SHT",
            nameop: "Shatel",
            description:
              "\u0634\u0627\u0631\u0698 \u0634\u0627\u062a\u0644 \u0645\u0648\u0628\u0627\u06cc\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image21.svg",
            codes: ["0998", "0999"],
            internet: [
              {
                text: "\u0627\u06cc\u0646\u062a\u0631\u0646\u062a \u0647\u0645\u0631\u0627\u0647",
                type: "credit"
              }
            ]
          }
        ]
      },
      {
        path: "pubginame.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "boxselect[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "boxselect[].disable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "boxselect2[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "boxselect2[].disable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "operatorselect",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => -1
      },
      {
        path: "typecharge",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "steps2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.steps2
      },
      {
        path: "internetPack",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const internet = $state.apiRequest.data.products.internet;
                const filteredProducts = internet.filter(
                  product =>
                    product.operator ===
                      $state.operators2[$state.operatorselect].name &&
                    product.sim_type ===
                      $state.operators2[$state.operatorselect].internet[
                        $state.typecharge
                      ].type
                );
                return filteredProducts.map(product => ({ json: product }));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const internetPlans = $state.internetPack;
                const categorizedPlans = [];
                internetPlans.forEach(plan => {
                  const period = plan.json.periodicity;
                  let periodFa = "";
                  switch (period) {
                    case "daily":
                      periodFa = "روزانه";
                      break;
                    case "weekly":
                      periodFa = "هفتگی";
                      break;
                    case "monthly":
                      periodFa = "ماهانه";
                      break;
                    default:
                      periodFa = "نامشخص";
                  }
                  let existingCategory = categorizedPlans.find(
                    category => category.periodicity === period
                  );
                  if (!existingCategory) {
                    existingCategory = {
                      periodicity: period,
                      periodicityFa: periodFa,
                      plans: []
                    };
                    categorizedPlans.push(existingCategory);
                  }
                  existingCategory.plans.push(plan);
                });
                return categorizedPlans;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "mojodi",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userinfo.toman;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "uuid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectpack",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "infopardakt",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "modal3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "steps2", "step3")
            ? false
            : hasVariant($state, "steps2", "step2") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
            ? false
            : hasVariant($state, "steps2", "step2")
            ? false
            : hasVariant(globalVariants, "screen", "mobileOnly")
            ? false
            : false
      },
      {
        path: "userinfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userbabarcat");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pardakhtid",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(sessionStorage.getItem("userbabarcatToken"))
                .value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "commissionBabarkat.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commissionBabarkat.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commissionBabarkat.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "rate.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "pubgiId.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "id",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button[].loadingviow",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button2[][].loadingviow",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button3[].loadingviow",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "step1Next.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "step1Next2.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "step1Next3.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button4.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button5.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button6[].loadingviow",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.type ||
                new URLSearchParams(window.location.search).urlParams.get(
                  "type"
                )
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "likee2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "bigoLive3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "imo.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "otherData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shopModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shopModal.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "shopModal.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "exchangeRate.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "exchangeRate.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "exchangeRate.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate2",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsosEvNkdp6Zt6()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPubg.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPubg.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPubg.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "page"
              : "page",
            {
              [sty.rootsteps2_step2]: hasVariant($state, "steps2", "step2"),
              [sty.rootsteps2_step3]: hasVariant($state, "steps2", "step3")
            }
          )}
        >
          <section
            className={classNames(projectcss.all, sty.section__dH9V, {
              [sty.sectionsteps2_step2__dH9VjQ3Ah]: hasVariant(
                $state,
                "steps2",
                "step2"
              ),
              [sty.sectionsteps2_step3__dH9VJpk3R]: hasVariant(
                $state,
                "steps2",
                "step3"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__dyyPr, {
                [sty.freeBoxsteps2_step2__dyyPRjQ3Ah]: hasVariant(
                  $state,
                  "steps2",
                  "step2"
                ),
                [sty.freeBoxsteps2_step3__dyyPrJpk3R]: hasVariant(
                  $state,
                  "steps2",
                  "step3"
                )
              })}
            >
              <div
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames(projectcss.all, sty.header, {
                  [sty.headersteps2_step2]: hasVariant(
                    $state,
                    "steps2",
                    "step2"
                  ),
                  [sty.headersteps2_step3]: hasVariant(
                    $state,
                    "steps2",
                    "step3"
                  )
                })}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon10Icon
                      : Icon3Icon
                  }
                  className={classNames(projectcss.all, sty.svg__mZ6FI, {
                    [sty.svgsteps2_step2__mZ6FIjQ3Ah]: hasVariant(
                      $state,
                      "steps2",
                      "step2"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__asuJq
                  )}
                >
                  {
                    "\u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647 \u0628\u0631\u0646\u0627\u0645\u0647 \u0648 \u0628\u0627\u0632\u06cc \u0647\u0627"
                  }
                </div>
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon9Icon
                      : Icon9Icon
                  }
                  className={classNames(projectcss.all, sty.svg__wM5P2, {
                    [sty.svgsteps2_step2__wM5P2JQ3Ah]: hasVariant(
                      $state,
                      "steps2",
                      "step2"
                    ),
                    [sty.svgsteps2_step3__wM5P2Jpk3R]: hasVariant(
                      $state,
                      "steps2",
                      "step3"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }}
                  role={"img"}
                />
              </div>
              <Reveal
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                className={classNames("__wab_instance", sty.reveal, {
                  [sty.revealsteps2_step2]: hasVariant(
                    $state,
                    "steps2",
                    "step2"
                  ),
                  [sty.revealsteps2_step3]: hasVariant(
                    $state,
                    "steps2",
                    "step3"
                  )
                })}
                delay={5}
                effect={"fade"}
                triggerOnce={true}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__bhtHm, {
                    [sty.freeBoxsteps2_step2__bhtHMjQ3Ah]: hasVariant(
                      $state,
                      "steps2",
                      "step2"
                    ),
                    [sty.freeBoxsteps2_step3__bhtHmJpk3R]: hasVariant(
                      $state,
                      "steps2",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lxqcr
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0627\u067e\u0631\u0627\u062a\u0648\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                      : "\u0627\u067e\u0631\u0627\u062a\u0648\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"operators"}
                    data-plasmic-override={overrides.operators}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.operators)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.operators2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const operatoritem = __plasmic_item_0;
                      const operatorIndex = __plasmic_idx_0;
                      return (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.boxselect
                          ),
                          disable2: generateStateValueProp($state, [
                            "boxselect",
                            __plasmic_idx_0,
                            "disable2"
                          ]),
                          key: operatorIndex,
                          onClick: async event => {
                            const $steps = {};

                            $steps["runCode"] = !$state.boxselect[0].disable2
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        for (
                                          let i = 0;
                                          i < $state.boxselect.length;
                                          i++
                                        ) {
                                          $state.boxselect[i].select = false;
                                        }
                                        $state.boxselect[operatorIndex].select =
                                          true;
                                        $state.operatorselect = operatorIndex;
                                        for (
                                          let i = 0;
                                          i < $state.boxselect2.length;
                                          i++
                                        ) {
                                          $state.boxselect2[i].select = false;
                                        }
                                        $state.boxselect2[0].select = true;
                                        return ($state.typecharge = 0);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          },
                          onDisable2Change: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "boxselect",
                              __plasmic_idx_0,
                              "disable2"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onSelectChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "boxselect",
                              __plasmic_idx_0,
                              "select"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          select: generateStateValueProp($state, [
                            "boxselect",
                            __plasmic_idx_0,
                            "select"
                          ])
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "boxselect[].select",
                              initFunc: ({ $props, $state, $queries }) =>
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? false
                                  : false
                            },
                            {
                              name: "boxselect[].disable2",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return $state.pubginame.value.length != 11;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Boxselect2
                            data-plasmic-name={"boxselect"}
                            data-plasmic-override={overrides.boxselect}
                            {...child$Props}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__erkpp, {
                                [sty.imgsteps2_step2__erkppjQ3Ah]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step2"
                                )
                              })}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "50px"
                                  : "60px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={(() => {
                                try {
                                  return operatoritem.logoUrl;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </Boxselect2>
                        );
                      })();
                    })}
                  </Stack__>
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"wallet"}
                  data-plasmic-override={overrides.wallet}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.wallet, {
                    [sty.walletsteps2_step2]: hasVariant(
                      $state,
                      "steps2",
                      "step2"
                    ),
                    [sty.walletsteps2_step3]: hasVariant(
                      $state,
                      "steps2",
                      "step3"
                    )
                  })}
                >
                  <Icon154Icon
                    className={classNames(projectcss.all, sty.svg__vMxtv, {
                      [sty.svgsteps2_step2__vMxtvjQ3Ah]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      ),
                      [sty.svgsteps2_step3__vMxtvJpk3R]: hasVariant(
                        $state,
                        "steps2",
                        "step3"
                      )
                    })}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"steps"}
                    data-plasmic-override={overrides.steps}
                    className={classNames(projectcss.all, sty.steps, {
                      [sty.stepssteps2_step2]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      ),
                      [sty.stepssteps2_step3]: hasVariant(
                        $state,
                        "steps2",
                        "step3"
                      )
                    })}
                  >
                    <div
                      data-plasmic-name={"\u0645\u0634\u062e\u0635\u0627\u062a"}
                      data-plasmic-override={overrides.مشخصات}
                      className={classNames(projectcss.all, sty.مشخصات)}
                    >
                      <PlasmicIcon__
                        data-plasmic-name={"selected"}
                        data-plasmic-override={overrides.selected}
                        PlasmicIconType={
                          hasVariant($state, "steps2", "step3")
                            ? CheckCircleSvgrepoComSvgIcon
                            : hasVariant($state, "steps2", "step2")
                            ? CheckCircleSvgrepoComSvgIcon
                            : RadioButtonCheckedSvgrepoCom2SvgIcon
                        }
                        className={classNames(projectcss.all, sty.selected, {
                          [sty.selectedsteps2_step2]: hasVariant(
                            $state,
                            "steps2",
                            "step2"
                          ),
                          [sty.selectedsteps2_step3]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__auUw,
                          {
                            [sty.textsteps2_step2__auUwjQ3Ah]: hasVariant(
                              $state,
                              "steps2",
                              "step2"
                            ),
                            [sty.textsteps2_step3__auUwJpk3R]: hasVariant(
                              $state,
                              "steps2",
                              "step3"
                            )
                          }
                        )}
                      >
                        {"\u0645\u0634\u062e\u0635\u0627\u062a"}
                      </div>
                    </div>
                    <LineXlSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__yelcg)}
                      role={"img"}
                    />

                    <div
                      data-plasmic-name={
                        "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698"
                      }
                      data-plasmic-override={overrides.مبلغشارژ}
                      className={classNames(projectcss.all, sty.مبلغشارژ, {
                        [sty.مبلغشارژsteps2_step2]: hasVariant(
                          $state,
                          "steps2",
                          "step2"
                        )
                      })}
                    >
                      <PlasmicIcon__
                        data-plasmic-name={"unselected"}
                        data-plasmic-override={overrides.unselected}
                        PlasmicIconType={
                          hasVariant($state, "steps2", "step3")
                            ? CheckCircleSvgrepoComSvgIcon
                            : RadioButtonCheckedSvgrepoCom2SvgIcon
                        }
                        className={classNames(projectcss.all, sty.unselected, {
                          [sty.unselectedsteps2_step2]: hasVariant(
                            $state,
                            "steps2",
                            "step2"
                          ),
                          [sty.unselectedsteps2_step3]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wRJi,
                          {
                            [sty.textsteps2_step2__wRJijQ3Ah]: hasVariant(
                              $state,
                              "steps2",
                              "step2"
                            ),
                            [sty.textsteps2_step3__wRJiJpk3R]: hasVariant(
                              $state,
                              "steps2",
                              "step3"
                            )
                          }
                        )}
                      >
                        {
                          "\u0627\u0646\u062a\u062e\u0627\u0628 \u0628\u0633\u062a\u0647"
                        }
                      </div>
                    </div>
                    <LineXlSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__jjhi)}
                      role={"img"}
                    />

                    <div
                      data-plasmic-name={
                        "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f"
                      }
                      data-plasmic-override={overrides.تاییدخرید}
                      className={classNames(projectcss.all, sty.تاییدخرید)}
                    >
                      <RadioButtonCheckedSvgrepoCom2SvgIcon
                        data-plasmic-name={"unselected2"}
                        data-plasmic-override={overrides.unselected2}
                        className={classNames(projectcss.all, sty.unselected2, {
                          [sty.unselected2steps2_step3]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fSMkV,
                          {
                            [sty.textsteps2_step3__fSMkVJpk3R]: hasVariant(
                              $state,
                              "steps2",
                              "step3"
                            )
                          }
                        )}
                      >
                        {
                          "\u062a\u0627\u0626\u06cc\u062f \u062e\u0631\u06cc\u062f"
                        }
                      </div>
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tDp2S, {
                      [sty.freeBoxsteps2_step2__tDp2SjQ3Ah]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      ),
                      [sty.freeBoxsteps2_step3__tDp2SJpk3R]: hasVariant(
                        $state,
                        "steps2",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jnRaf
                      )}
                    >
                      {
                        "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6Rb6S,
                        {
                          [sty.freeBoxsteps2_step3___6Rb6SJpk3R]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ellha,
                          {
                            [sty.textsteps2_step2__ellhajQ3Ah]: hasVariant(
                              $state,
                              "steps2",
                              "step2"
                            ),
                            [sty.textsteps2_step3__ellhaJpk3R]: hasVariant(
                              $state,
                              "steps2",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "steps2", "step3")
                          ? "\u0646\u0627\u0645 \u0628\u0633\u062a\u0647"
                          : "\u0639\u0646\u0648\u0627\u0646 \u067e\u0631\u062f\u0627\u062e\u062a"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ukMb7,
                          {
                            [sty.textsteps2_step3__ukMb7Jpk3R]: hasVariant(
                              $state,
                              "steps2",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "steps2", "step3") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  " بسته " +
                                  $state.selectpack.name +
                                  " _ " +
                                  $state.selectpack.number
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return " بسته " + $state.selectpack.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dppY, {
                        [sty.freeBoxsteps2_step3__dppYJpk3R]: hasVariant(
                          $state,
                          "steps2",
                          "step3"
                        )
                      })}
                    >
                      {(
                        hasVariant($state, "steps2", "step3")
                          ? (() => {
                              try {
                                return $state.otherData.userName;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___8JIlp,
                            {
                              [sty.freeBoxsteps2_step2___8JIlpjQ3Ah]:
                                hasVariant($state, "steps2", "step2"),
                              [sty.freeBoxsteps2_step3___8JIlpJpk3R]:
                                hasVariant($state, "steps2", "step3")
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__z2I8M,
                              {
                                [sty.textsteps2_step3__z2I8MJpk3R]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step3"
                                )
                              }
                            )}
                          >
                            {hasVariant($state, "steps2", "step3")
                              ? "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc "
                              : "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uwUmc,
                              {
                                [sty.textsteps2_step3__uwUmcJpk3R]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step3"
                                )
                              }
                            )}
                          >
                            {hasVariant($state, "steps2", "step3") ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.otherData.userName;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.number;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "steps2", "step3")
                          ? (() => {
                              try {
                                return $state.otherData.userId;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__h3Env,
                            {
                              [sty.freeBoxsteps2_step3__h3EnvJpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4DBs2,
                              {
                                [sty.textsteps2_step3___4DBs2Jpk3R]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step3"
                                )
                              }
                            )}
                          >
                            {hasVariant($state, "steps2", "step3")
                              ? "\u0634\u0646\u0627\u0633\u0647 \u06a9\u0627\u0631\u0628\u0631"
                              : "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jcf53,
                              {
                                [sty.textsteps2_step3__jcf53Jpk3R]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step3"
                                )
                              }
                            )}
                          >
                            {hasVariant($state, "steps2", "step3") ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.otherData.userId;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.number;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "steps2", "step3")
                          ? (() => {
                              try {
                                return $state.otherData.mobile;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rNaY2,
                            {
                              [sty.freeBoxsteps2_step3__rNaY2Jpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wA2YY,
                              {
                                [sty.textsteps2_step3__wA2YYJpk3R]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step3"
                                )
                              }
                            )}
                          >
                            {hasVariant($state, "steps2", "step3")
                              ? "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                              : "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oEgJu,
                              {
                                [sty.textsteps2_step3__oEgJuJpk3R]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step3"
                                )
                              }
                            )}
                          >
                            {hasVariant($state, "steps2", "step3") ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.otherData.mobile;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.number;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__jgJtz,
                        {
                          [sty.freeBoxsteps2_step2__jgJtZjQ3Ah]: hasVariant(
                            $state,
                            "steps2",
                            "step2"
                          ),
                          [sty.freeBoxsteps2_step3__jgJtzJpk3R]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bzGf6,
                          {
                            [sty.textsteps2_step3__bzGf6Jpk3R]: hasVariant(
                              $state,
                              "steps2",
                              "step3"
                            )
                          }
                        )}
                      >
                        {
                          "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a0Bz9,
                          {
                            [sty.textsteps2_step2__a0Bz9JQ3Ah]: hasVariant(
                              $state,
                              "steps2",
                              "step2"
                            ),
                            [sty.textsteps2_step3__a0Bz9Jpk3R]: hasVariant(
                              $state,
                              "steps2",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "steps2", "step3") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  Math.ceil(
                                    $state.selectpack.rate +
                                      $state.selectpack.rate *
                                        (($state.commissionBabarkat.data
                                          .babrkat +
                                          $state.commissionBabarkat.data
                                            .saraf) /
                                          100)
                                  ).toLocaleString("en") + " تومان "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  $state.selectpack.amount.toLocaleString(
                                    "en"
                                  ) + " تومان "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                  </Stack__>
                  {(() => {
                    try {
                      return $state.type == "UC";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"pubgi"}
                      data-plasmic-override={overrides.pubgi}
                      className={classNames(projectcss.all, sty.pubgi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1GPzr,
                          {
                            [sty.freeBoxsteps2_step2___1GPzrjQ3Ah]: hasVariant(
                              $state,
                              "steps2",
                              "step2"
                            ),
                            [sty.freeBoxsteps2_step3___1GPzrJpk3R]: hasVariant(
                              $state,
                              "steps2",
                              "step3"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1AkJ5,
                            {
                              [sty.textsteps2_step2___1AkJ5JQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.textsteps2_step3___1AkJ5Jpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc PUBG \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yLh4F
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xl48U
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                              }
                            </div>
                          ) : null}
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__leDbU
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                              }
                            </div>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zB4Ch
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gcsSr
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                              }
                            </div>
                          ) : null}
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fpuZa
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                              }
                            </div>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__s6Guc
                          )}
                        >
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qEiop
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                              }
                            </div>
                          ) : null}
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bWqea
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                              }
                            </div>
                          ) : null}
                        </div>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__olFdd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__f8Cod,
                            {
                              [sty.freeBoxsteps2_step2__f8CoDjQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.freeBoxsteps2_step3__f8CodJpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          <Input
                            data-plasmic-name={"pubginame"}
                            data-plasmic-override={overrides.pubginame}
                            className={classNames(
                              "__wab_instance",
                              sty.pubginame,
                              {
                                [sty.pubginamesteps2_step2]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step2"
                                ),
                                [sty.pubginamesteps2_step3]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step3"
                                )
                              }
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "pubginame",
                                "value"
                              ]).apply(null, eventArgs);

                              (async value => {
                                const $steps = {};
                              }).apply(null, eventArgs);
                            }}
                            placeholder={
                              "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc "
                            }
                            type={"text"}
                            value={generateStateValueProp($state, [
                              "pubginame",
                              "value"
                            ])}
                          />

                          <Icon72Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pc2A
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8EGcC,
                            {
                              [sty.textsteps2_step2___8EGcCjQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.textsteps2_step3___8EGcCJpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u0639\u062f\u062f\u06cc PUBG \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bZkit,
                            {
                              [sty.freeBoxsteps2_step2__bZkiTjQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.freeBoxsteps2_step3__bZkitJpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          <Input
                            data-plasmic-name={"pubgiId"}
                            data-plasmic-override={overrides.pubgiId}
                            className={classNames(
                              "__wab_instance",
                              sty.pubgiId,
                              {
                                [sty.pubgiIdsteps2_step2]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step2"
                                ),
                                [sty.pubgiIdsteps2_step3]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step3"
                                )
                              }
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "pubgiId",
                                "value"
                              ]).apply(null, eventArgs);

                              (async value => {
                                const $steps = {};
                              }).apply(null, eventArgs);
                            }}
                            placeholder={
                              "\u0634\u0646\u0627\u0633\u0647 \u0639\u062f\u062f\u06cc"
                            }
                            type={"text"}
                            value={generateStateValueProp($state, [
                              "pubgiId",
                              "value"
                            ])}
                          />

                          <Icon70Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zSVsd,
                              {
                                [sty.svgsteps2_step2__zSVsdjQ3Ah]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step2"
                                )
                              }
                            )}
                            role={"img"}
                          />
                        </div>
                      </Stack__>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.type == "likee";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"likee"}
                      data-plasmic-override={overrides.likee}
                      className={classNames(projectcss.all, sty.likee)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zZar2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fcUYl,
                            {
                              [sty.textsteps2_step2__fcUYljQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.textsteps2_step3__fcUYlJpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          {
                            "\u0634\u0646\u0627\u0633\u0647 \u06a9\u0627\u0631\u0628\u0631 Likee \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6UuDw,
                            {
                              [sty.freeBoxsteps2_step2___6UuDwjQ3Ah]:
                                hasVariant($state, "steps2", "step2"),
                              [sty.freeBoxsteps2_step3___6UuDwJpk3R]:
                                hasVariant($state, "steps2", "step3")
                            }
                          )}
                        >
                          <Input
                            data-plasmic-name={"likee2"}
                            data-plasmic-override={overrides.likee2}
                            className={classNames(
                              "__wab_instance",
                              sty.likee2,
                              {
                                [sty.likee2steps2_step2]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step2"
                                ),
                                [sty.likee2steps2_step3]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step3"
                                )
                              }
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "likee2",
                                "value"
                              ]).apply(null, eventArgs);

                              (async value => {
                                const $steps = {};
                              }).apply(null, eventArgs);
                            }}
                            placeholder={
                              "\u0634\u0646\u0627\u0633\u0647 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                            }
                            type={"text"}
                            value={generateStateValueProp($state, [
                              "likee2",
                              "value"
                            ])}
                          />

                          <Icon112Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__blNqF,
                              {
                                [sty.svgsteps2_step2__blNqFjQ3Ah]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step2"
                                )
                              }
                            )}
                            role={"img"}
                          />
                        </div>
                      </Stack__>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.type == "bigo-live";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"bigoLive"}
                      data-plasmic-override={overrides.bigoLive}
                      className={classNames(projectcss.all, sty.bigoLive, {
                        [sty.bigoLivesteps2_step2]: hasVariant(
                          $state,
                          "steps2",
                          "step2"
                        )
                      })}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__n59Uv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nMl,
                            {
                              [sty.textsteps2_step2__nMljQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.textsteps2_step3__nMlJpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          {
                            "\u0634\u0646\u0627\u0633\u0647 \u06a9\u0627\u0631\u0628\u0631 Bigo Live \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sXud2,
                            {
                              [sty.freeBoxsteps2_step2__sXud2JQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.freeBoxsteps2_step3__sXud2Jpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          <Input
                            data-plasmic-name={"bigoLive3"}
                            data-plasmic-override={overrides.bigoLive3}
                            className={classNames(
                              "__wab_instance",
                              sty.bigoLive3,
                              {
                                [sty.bigoLive3steps2_step2]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step2"
                                ),
                                [sty.bigoLive3steps2_step3]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step3"
                                )
                              }
                            )}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "bigoLive3",
                                "value"
                              ]).apply(null, eventArgs);

                              (async value => {
                                const $steps = {};
                              }).apply(null, eventArgs);
                            }}
                            placeholder={
                              "\u0634\u0646\u0627\u0633\u0647 \u06a9\u0627\u0631\u0628\u0631\u06cc"
                            }
                            type={"text"}
                            value={generateStateValueProp($state, [
                              "bigoLive3",
                              "value"
                            ])}
                          />

                          <Icon113Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___9NvFy,
                              {
                                [sty.svgsteps2_step2___9NvFYjQ3Ah]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step2"
                                )
                              }
                            )}
                            role={"img"}
                          />
                        </div>
                      </Stack__>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.type == "imo";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"imo2"}
                      data-plasmic-override={overrides.imo2}
                      className={classNames(projectcss.all, sty.imo2)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lqCT
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__p6KgP,
                            {
                              [sty.textsteps2_step2__p6KgPjQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.textsteps2_step3__p6KgPJpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          {
                            "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 Imo \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bHpk,
                            {
                              [sty.freeBoxsteps2_step2__bHpKjQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.freeBoxsteps2_step3__bHpkJpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                        >
                          <Input
                            data-plasmic-name={"imo"}
                            data-plasmic-override={overrides.imo}
                            className={classNames("__wab_instance", sty.imo, {
                              [sty.imosteps2_step2]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.imosteps2_step3]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            })}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "imo",
                                "value"
                              ]).apply(null, eventArgs);

                              (async value => {
                                const $steps = {};
                              }).apply(null, eventArgs);
                            }}
                            placeholder={
                              "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                            }
                            type={"text"}
                            value={generateStateValueProp($state, [
                              "imo",
                              "value"
                            ])}
                          />

                          <Icon114Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mpSn,
                              {
                                [sty.svgsteps2_step2__mpSNjQ3Ah]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step2"
                                )
                              }
                            )}
                            role={"img"}
                          />
                        </div>
                      </Stack__>
                    </div>
                  ) : null}
                </Stack__>
                {(
                  hasVariant($state, "steps2", "step3")
                    ? true
                    : hasVariant($state, "steps2", "step2")
                    ? true
                    : (() => {
                        try {
                          return $state.operatorselect >= 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lpbb, {
                      [sty.freeBoxsteps2_step2__lpbbjQ3Ah]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      ),
                      [sty.freeBoxsteps2_step3__lpbbJpk3R]: hasVariant(
                        $state,
                        "steps2",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__luW5,
                        {
                          [sty.textsteps2_step3__luW5Jpk3R]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "\u0646\u0648\u0639 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a"
                        : "\u0646\u0648\u0639 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"chargeType"}
                      data-plasmic-override={overrides.chargeType}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.chargeType, {
                        [sty.chargeTypesteps2_step2]: hasVariant(
                          $state,
                          "steps2",
                          "step2"
                        )
                      })}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.operators2[$state.operatorselect]
                              .internet;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const typeitem = __plasmic_item_0;
                        const typeindex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.boxselect2
                            ),
                            disable2: generateStateValueProp($state, [
                              "boxselect2",
                              __plasmic_idx_0,
                              "disable2"
                            ]),
                            key: typeindex,
                            onClick: async event => {
                              const $steps = {};

                              $steps["runCode"] = !$state.boxselect2[0].disable2
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          for (
                                            let i = 0;
                                            i < $state.boxselect2.length;
                                            i++
                                          ) {
                                            $state.boxselect2[i].select = false;
                                          }
                                          $state.boxselect2[typeindex].select =
                                            true;
                                          return ($state.typecharge =
                                            typeindex);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            },
                            onDisable2Change: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "boxselect2",
                                __plasmic_idx_0,
                                "disable2"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onSelectChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "boxselect2",
                                __plasmic_idx_0,
                                "select"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            select: generateStateValueProp($state, [
                              "boxselect2",
                              __plasmic_idx_0,
                              "select"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "boxselect2[].select",
                                initFunc: ({ $props, $state, $queries }) =>
                                  false
                              },
                              {
                                name: "boxselect2[].disable2",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return (
                                        $state.pubginame.value.length != 11
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Boxselect2
                              data-plasmic-name={"boxselect2"}
                              data-plasmic-override={overrides.boxselect2}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__iape
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__spTmd
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return typeitem.text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </Boxselect2>
                          );
                        })();
                      })}
                    </Stack__>
                  </div>
                ) : null}
                {(hasVariant($state, "steps2", "step2") ? false : false) ? (
                  <TabsContainer
                    data-plasmic-name={"tabsContainer"}
                    data-plasmic-override={overrides.tabsContainer}
                    initialKey={
                      hasVariant($state, "steps2", "step2") ? "daily" : "tab1"
                    }
                    mountMode={
                      hasVariant($state, "steps2", "step2")
                        ? "mountLazily"
                        : "mountOneAtATime"
                    }
                    previewAll={
                      hasVariant($state, "steps2", "step2") ? false : undefined
                    }
                    previewKey={hasVariant($state, "steps2", "step2") ? `` : ``}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__e9Dg1,
                            {
                              [sty.freeBoxsteps2_step2__e9Dg1JQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              )
                            }
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gNMr,
                              {
                                [sty.freeBoxsteps2_step2__gNMRjQ3Ah]:
                                  hasVariant($state, "steps2", "step2")
                              }
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ctGIl,
                                {
                                  [sty.freeBoxsteps2_step2__ctGIljQ3Ah]:
                                    hasVariant($state, "steps2", "step2")
                                }
                              )}
                            >
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $state.variable;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <TabButton
                                    data-plasmic-name={"tabButton"}
                                    data-plasmic-override={overrides.tabButton}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.tabButton,
                                      {
                                        [sty.tabButtonsteps2_step2]: hasVariant(
                                          $state,
                                          "steps2",
                                          "step2"
                                        )
                                      }
                                    )}
                                    key={currentIndex}
                                    tabKey={(() => {
                                      try {
                                        return currentItem.periodicity;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.button,
                                          {
                                            [sty.buttonsteps2_step2]:
                                              hasVariant(
                                                $state,
                                                "steps2",
                                                "step2"
                                              )
                                          }
                                        ),
                                        color: hasVariant(
                                          $state,
                                          "steps2",
                                          "step2"
                                        )
                                          ? "clear"
                                          : "sand",
                                        loadingviow: generateStateValueProp(
                                          $state,
                                          [
                                            "button",
                                            __plasmic_idx_0,
                                            "loadingviow"
                                          ]
                                        ),
                                        onLoadingviowChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "button",
                                              __plasmic_idx_0,
                                              "loadingviow"
                                            ])(eventArgs[0]);
                                          }).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        },
                                        shape: "rounded",
                                        size:
                                          hasVariant(
                                            $state,
                                            "steps2",
                                            "step2"
                                          ) &&
                                          hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          )
                                            ? "compact"
                                            : undefined,
                                        submitsForm: false
                                      };

                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "button[].loadingviow",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return $state.loadingviow;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <Button
                                          data-plasmic-name={"button"}
                                          data-plasmic-override={
                                            overrides.button
                                          }
                                          {...child$Props}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qwMf9,
                                              {
                                                [sty.textsteps2_step2__qwMf9JQ3Ah]:
                                                  hasVariant(
                                                    $state,
                                                    "steps2",
                                                    "step2"
                                                  )
                                              }
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return currentItem.periodicityFa;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "Button";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </Button>
                                      );
                                    })()}
                                  </TabButton>
                                );
                              })}
                              <TabUnderline
                                data-plasmic-name={"tabUnderline"}
                                data-plasmic-override={overrides.tabUnderline}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabUnderline,
                                  {
                                    [sty.tabUnderlinesteps2_step2]: hasVariant(
                                      $state,
                                      "steps2",
                                      "step2"
                                    )
                                  }
                                )}
                              />
                            </Stack__>
                          </Stack__>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zZaEe,
                              {
                                [sty.freeBoxsteps2_step2__zZaEEjQ3Ah]:
                                  hasVariant($state, "steps2", "step2")
                              }
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.variable;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <TabContent
                                  data-plasmic-name={"tabContent"}
                                  data-plasmic-override={overrides.tabContent}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabContent,
                                    {
                                      [sty.tabContentsteps2_step2]: hasVariant(
                                        $state,
                                        "steps2",
                                        "step2"
                                      )
                                    }
                                  )}
                                  key={currentIndex}
                                  tabKey={(() => {
                                    try {
                                      return currentItem.periodicity;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__rbN6B,
                                      {
                                        [sty.freeBoxsteps2_step2__rbN6BjQ3Ah]:
                                          hasVariant($state, "steps2", "step2")
                                      }
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return currentItem.plans;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_1, __plasmic_idx_1) => {
                                        const currentItem = __plasmic_item_1;
                                        const currentIndex = __plasmic_idx_1;
                                        return (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__jc2Sw,
                                              {
                                                [sty.freeBoxsteps2_step2__jc2SwjQ3Ah]:
                                                  hasVariant(
                                                    $state,
                                                    "steps2",
                                                    "step2"
                                                  ),
                                                [sty.freeBoxsteps2_step3__jc2SwJpk3R]:
                                                  hasVariant(
                                                    $state,
                                                    "steps2",
                                                    "step3"
                                                  )
                                              }
                                            )}
                                            key={currentIndex}
                                          >
                                            <PlasmicImg__
                                              alt={""}
                                              className={classNames(
                                                sty.img__kr7Op,
                                                {
                                                  [sty.imgsteps2_step2__kr7OpjQ3Ah]:
                                                    hasVariant(
                                                      $state,
                                                      "steps2",
                                                      "step2"
                                                    )
                                                }
                                              )}
                                              displayHeight={"auto"}
                                              displayMaxHeight={"none"}
                                              displayMaxWidth={"100%"}
                                              displayMinHeight={"0"}
                                              displayMinWidth={"0"}
                                              displayWidth={"auto"}
                                              loading={"lazy"}
                                              src={{
                                                src: "/plasmic/babarkat/images/image6.svg",
                                                fullWidth: 58,
                                                fullHeight: 62,
                                                aspectRatio: 0.935484
                                              }}
                                            />

                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__ynHcw,
                                                {
                                                  [sty.freeBoxsteps2_step2__ynHcwjQ3Ah]:
                                                    hasVariant(
                                                      $state,
                                                      "steps2",
                                                      "step2"
                                                    )
                                                }
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__wLMt3
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__nnf4Z,
                                                    {
                                                      [sty.textsteps2_step2__nnf4ZjQ3Ah]:
                                                        hasVariant(
                                                          $state,
                                                          "steps2",
                                                          "step2"
                                                        )
                                                    }
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.json
                                                          .name;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                {(() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.button2
                                                    ),
                                                    color: "softGreen",
                                                    loadingviow:
                                                      generateStateValueProp(
                                                        $state,
                                                        [
                                                          "button2",
                                                          __plasmic_idx_0,
                                                          __plasmic_idx_1,
                                                          "loadingviow"
                                                        ]
                                                      ),
                                                    onClick: async event => {
                                                      const $steps = {};

                                                      $steps[
                                                        "updateSelectpack"
                                                      ] = true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "selectpack"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value:
                                                                currentItem.json
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                      if (
                                                        $steps[
                                                          "updateSelectpack"
                                                        ] != null &&
                                                        typeof $steps[
                                                          "updateSelectpack"
                                                        ] === "object" &&
                                                        typeof $steps[
                                                          "updateSelectpack"
                                                        ].then === "function"
                                                      ) {
                                                        $steps[
                                                          "updateSelectpack"
                                                        ] = await $steps[
                                                          "updateSelectpack"
                                                        ];
                                                      }

                                                      $steps["updateSteps2"] =
                                                        true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  vgroup:
                                                                    "steps2",
                                                                  operation: 0,
                                                                  value: "step3"
                                                                };
                                                              return (({
                                                                vgroup,
                                                                value
                                                              }) => {
                                                                if (
                                                                  typeof value ===
                                                                  "string"
                                                                ) {
                                                                  value = [
                                                                    value
                                                                  ];
                                                                }

                                                                $stateSet(
                                                                  $state,
                                                                  vgroup,
                                                                  value
                                                                );
                                                                return value;
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                      if (
                                                        $steps[
                                                          "updateSteps2"
                                                        ] != null &&
                                                        typeof $steps[
                                                          "updateSteps2"
                                                        ] === "object" &&
                                                        typeof $steps[
                                                          "updateSteps2"
                                                        ].then === "function"
                                                      ) {
                                                        $steps["updateSteps2"] =
                                                          await $steps[
                                                            "updateSteps2"
                                                          ];
                                                      }
                                                    },
                                                    onLoadingviowChange: async (
                                                      ...eventArgs: any
                                                    ) => {
                                                      ((...eventArgs) => {
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "button2",
                                                            __plasmic_idx_0,
                                                            __plasmic_idx_1,
                                                            "loadingviow"
                                                          ]
                                                        )(eventArgs[0]);
                                                      }).apply(null, eventArgs);

                                                      if (
                                                        eventArgs.length > 1 &&
                                                        eventArgs[1] &&
                                                        eventArgs[1]
                                                          ._plasmic_state_init_
                                                      ) {
                                                        return;
                                                      }
                                                    },
                                                    size: "minimal"
                                                  };

                                                  initializePlasmicStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "button2[][].loadingviow",
                                                        initFunc: ({
                                                          $props,
                                                          $state,
                                                          $queries
                                                        }) =>
                                                          (() => {
                                                            try {
                                                              return $state.loadingviow;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return undefined;
                                                              }
                                                              throw e;
                                                            }
                                                          })()
                                                      }
                                                    ],
                                                    [
                                                      __plasmic_idx_0,
                                                      __plasmic_idx_1
                                                    ]
                                                  );
                                                  return (
                                                    <Button
                                                      data-plasmic-name={
                                                        "button2"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.button2
                                                      }
                                                      {...child$Props}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          projectcss.__wab_text,
                                                          sty.text__qbmuB
                                                        )}
                                                      >
                                                        {
                                                          "\u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647"
                                                        }
                                                      </div>
                                                    </Button>
                                                  );
                                                })()}
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__fcH85
                                                )}
                                              >
                                                <Group3SvgIcon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__pjL6G
                                                  )}
                                                  role={"img"}
                                                />

                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___3NQaW
                                                  )}
                                                >
                                                  {
                                                    "\u0645\u0628\u0644\u063a + \u0645\u0627\u0644\u06cc\u0627\u062a :"
                                                  }
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__yxAch
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          currentItem.json.amount.toLocaleString(
                                                            "en"
                                                          ) + " تومان "
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "14056 \u062a\u0648\u0645\u0627\u0646";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                        );
                                      }
                                    )}
                                  </Stack__>
                                </TabContent>
                              );
                            })}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tfZmK,
                                {
                                  [sty.freeBoxsteps2_step2__tfZmKjQ3Ah]:
                                    hasVariant($state, "steps2", "step2")
                                }
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hVgt9,
                              {
                                [sty.freeBoxsteps2_step2__hVgt9JQ3Ah]:
                                  hasVariant($state, "steps2", "step2")
                              }
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.rate.data;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___0Terr,
                                    {
                                      [sty.freeBoxsteps2_step2___0TerrjQ3Ah]:
                                        hasVariant($state, "steps2", "step2")
                                    }
                                  )}
                                  key={currentIndex}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img___1ArYp, {
                                      [sty.imgsteps2_step2___1ArYpjQ3Ah]:
                                        hasVariant($state, "steps2", "step2")
                                    })}
                                    displayHeight={
                                      hasVariant($state, "steps2", "step2") &&
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "70px"
                                        : hasVariant($state, "steps2", "step2")
                                        ? "80px"
                                        : "auto"
                                    }
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={
                                      hasVariant($state, "steps2", "step2") &&
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "auto"
                                        : hasVariant($state, "steps2", "step2")
                                        ? "80px"
                                        : "auto"
                                    }
                                    loading={"lazy"}
                                    src={
                                      hasVariant($state, "steps2", "step2")
                                        ? {
                                            src: "/plasmic/babarkat/images/image38.webp",
                                            fullWidth: 500,
                                            fullHeight: 500,
                                            aspectRatio: undefined
                                          }
                                        : undefined
                                    }
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bzR8T,
                                      {
                                        [sty.textsteps2_step2__bzR8TjQ3Ah]:
                                          hasVariant($state, "steps2", "step2")
                                      }
                                    )}
                                  >
                                    {hasVariant($state, "steps2", "step2") ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.name
                                              .toUpperCase()
                                              .split("-")
                                              .join(" ");
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "120 UC";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : (
                                      "Button"
                                    )}
                                  </div>
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.button3,
                                        {
                                          [sty.button3steps2_step2]: hasVariant(
                                            $state,
                                            "steps2",
                                            "step2"
                                          ),
                                          [sty.button3steps2_step3]: hasVariant(
                                            $state,
                                            "steps2",
                                            "step3"
                                          )
                                        }
                                      ),
                                      color: hasVariant(
                                        $state,
                                        "steps2",
                                        "step2"
                                      )
                                        ? "green"
                                        : undefined,
                                      loadingviow: generateStateValueProp(
                                        $state,
                                        [
                                          "button3",
                                          __plasmic_idx_0,
                                          "loadingviow"
                                        ]
                                      ),
                                      onClick: async event => {
                                        const $steps = {};

                                        $steps["updateSelectpack"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["selectpack"]
                                                },
                                                operation: 0,
                                                value: currentItem
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateSelectpack"] != null &&
                                          typeof $steps["updateSelectpack"] ===
                                            "object" &&
                                          typeof $steps["updateSelectpack"]
                                            .then === "function"
                                        ) {
                                          $steps["updateSelectpack"] =
                                            await $steps["updateSelectpack"];
                                        }

                                        $steps["updateSteps2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                vgroup: "steps2",
                                                operation: 0,
                                                value: "step3"
                                              };
                                              return (({ vgroup, value }) => {
                                                if (typeof value === "string") {
                                                  value = [value];
                                                }

                                                $stateSet(
                                                  $state,
                                                  vgroup,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateSteps2"] != null &&
                                          typeof $steps["updateSteps2"] ===
                                            "object" &&
                                          typeof $steps["updateSteps2"].then ===
                                            "function"
                                        ) {
                                          $steps["updateSteps2"] = await $steps[
                                            "updateSteps2"
                                          ];
                                        }
                                      },
                                      onLoadingviowChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "button3",
                                            __plasmic_idx_0,
                                            "loadingviow"
                                          ])(eventArgs[0]);
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      },
                                      size: hasVariant(
                                        $state,
                                        "steps2",
                                        "step2"
                                      )
                                        ? "compact"
                                        : undefined
                                    };

                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "button3[].loadingviow",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return $state.loadingviow;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <Button
                                        data-plasmic-name={"button3"}
                                        data-plasmic-override={
                                          overrides.button3
                                        }
                                        {...child$Props}
                                      >
                                        {hasVariant(
                                          $state,
                                          "steps2",
                                          "step2"
                                        ) ? (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  Math.ceil(
                                                    currentItem.rate +
                                                      currentItem.rate *
                                                        (($state
                                                          .commissionBabarkat
                                                          .data.babrkat +
                                                          $state
                                                            .commissionBabarkat
                                                            .data.saraf) /
                                                          100)
                                                  ).toLocaleString("en") +
                                                  " تومان "
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "520000 \u062a\u0648\u0645\u0627\u0646";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        ) : (
                                          "Button"
                                        )}
                                      </Button>
                                    );
                                  })()}
                                </Stack__>
                              );
                            })}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ocqpi,
                                {
                                  [sty.freeBoxsteps2_step2__ocqpIjQ3Ah]:
                                    hasVariant($state, "steps2", "step2")
                                }
                              )}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.columns__dVOa,
                              {
                                [sty.columnssteps2_step2__dVOAjQ3Ah]:
                                  hasVariant($state, "steps2", "step2")
                              }
                            )}
                          />
                        </Stack__>
                      )}
                    </DataCtxReader__>
                  </TabsContainer>
                ) : null}
              </Reveal>
              <section
                className={classNames(projectcss.all, sty.section__e61JZ)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__cfynx, {
                    [sty.freeBoxsteps2_step2__cfynxjQ3Ah]: hasVariant(
                      $state,
                      "steps2",
                      "step2"
                    ),
                    [sty.freeBoxsteps2_step3__cfynxJpk3R]: hasVariant(
                      $state,
                      "steps2",
                      "step3"
                    )
                  })}
                >
                  <Button
                    data-plasmic-name={"step1Next"}
                    data-plasmic-override={overrides.step1Next}
                    className={classNames("__wab_instance", sty.step1Next, {
                      [sty.step1Nextsteps2_step2]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      ),
                      [sty.step1Nextsteps2_step3]: hasVariant(
                        $state,
                        "steps2",
                        "step3"
                      )
                    })}
                    color={"green"}
                    isDisabled={(() => {
                      try {
                        return (() => {
                          if ($state.type == "UC")
                            return (
                              $state.pubginame.value.length < 1 ||
                              $state.pubgiId.value.length < 1
                            );
                          else if ($state.type == "likee")
                            return $state.likee2.value.length < 1;
                          else if ($state.type == "imo")
                            return $state.imo.value.length < 9;
                          else if ($state.type == "bigo-live")
                            return $state.bigoLive3.value.length < 1;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loadingviow={generateStateValueProp($state, [
                      "step1Next",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateOtherData"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["otherData"]
                              },
                              operation: 0,
                              value: (() => {
                                if ($state.type == "UC")
                                  return {
                                    userName: $state.pubginame.value,
                                    userId: $state.pubgiId.value
                                  };
                                else if ($state.type == "likee")
                                  return { userId: $state.likee2.value };
                                else if ($state.type == "imo")
                                  return { mobile: $state.imo.value };
                                else if ($state.type == "bigo-live")
                                  return { userId: $state.bigoLive3.value };
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateOtherData"] != null &&
                        typeof $steps["updateOtherData"] === "object" &&
                        typeof $steps["updateOtherData"].then === "function"
                      ) {
                        $steps["updateOtherData"] = await $steps[
                          "updateOtherData"
                        ];
                      }

                      $steps["updateSteps2"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "steps2",
                              operation: 0,
                              value: "step2"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSteps2"] != null &&
                        typeof $steps["updateSteps2"] === "object" &&
                        typeof $steps["updateSteps2"].then === "function"
                      ) {
                        $steps["updateSteps2"] = await $steps["updateSteps2"];
                      }

                      $steps["invokeGlobalAction"] = false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u0634\u0645\u0627\u0631\u0647 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0645\u0639\u062a\u0628\u0631 \u0646\u0645\u06cc\u200c\u0628\u0627\u0634\u062f.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "step1Next",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wmsD1,
                        {
                          [sty.textsteps2_step2__wmsD1JQ3Ah]: hasVariant(
                            $state,
                            "steps2",
                            "step2"
                          )
                        }
                      )}
                    >
                      {"\u0627\u062f\u0627\u0645\u0647"}
                    </div>
                  </Button>
                  <Button
                    data-plasmic-name={"step1Next2"}
                    data-plasmic-override={overrides.step1Next2}
                    className={classNames("__wab_instance", sty.step1Next2, {
                      [sty.step1Next2steps2_step2]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      ),
                      [sty.step1Next2steps2_step3]: hasVariant(
                        $state,
                        "steps2",
                        "step3"
                      )
                    })}
                    color={"softGreen"}
                    isDisabled={
                      hasVariant($state, "steps2", "step2")
                        ? (() => {
                            try {
                              return false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.pubginame.value.length != 11;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                    }
                    loadingviow={generateStateValueProp($state, [
                      "step1Next2",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSteps2"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "steps2",
                              operation: 1,
                              value: "step2"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, undefined);
                              return undefined;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSteps2"] != null &&
                        typeof $steps["updateSteps2"] === "object" &&
                        typeof $steps["updateSteps2"].then === "function"
                      ) {
                        $steps["updateSteps2"] = await $steps["updateSteps2"];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "step1Next2",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iGre7,
                        {
                          [sty.textsteps2_step2__iGre7JQ3Ah]: hasVariant(
                            $state,
                            "steps2",
                            "step2"
                          )
                        }
                      )}
                    >
                      {"\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"}
                    </div>
                  </Button>
                  <Button
                    data-plasmic-name={"step1Next3"}
                    data-plasmic-override={overrides.step1Next3}
                    className={classNames("__wab_instance", sty.step1Next3, {
                      [sty.step1Next3steps2_step2]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      ),
                      [sty.step1Next3steps2_step3]: hasVariant(
                        $state,
                        "steps2",
                        "step3"
                      )
                    })}
                    color={"softGreen"}
                    isDisabled={
                      hasVariant($state, "steps2", "step3")
                        ? (() => {
                            try {
                              return false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.pubginame.value.length != 11;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                    }
                    loadingviow={generateStateValueProp($state, [
                      "step1Next3",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSteps2"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "steps2",
                              operation: 0,
                              value: "step2"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSteps2"] != null &&
                        typeof $steps["updateSteps2"] === "object" &&
                        typeof $steps["updateSteps2"].then === "function"
                      ) {
                        $steps["updateSteps2"] = await $steps["updateSteps2"];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "step1Next3",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kJlW0,
                        {
                          [sty.textsteps2_step2__kJlW0JQ3Ah]: hasVariant(
                            $state,
                            "steps2",
                            "step2"
                          )
                        }
                      )}
                    >
                      {"\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"}
                    </div>
                  </Button>
                </div>
              </section>
              <AntdModal
                data-plasmic-name={"modal"}
                data-plasmic-override={overrides.modal}
                className={classNames("__wab_instance", sty.modal, {
                  [sty.modalsteps2_step3]: hasVariant($state, "steps2", "step3")
                })}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                hideFooter={true}
                modalContentClassName={classNames({
                  [sty["pcls_coD4fOufzCNx"]]: true
                })}
                modalScopeClassName={sty["modal__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["modal", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["modal", "open"])}
                title={null}
                trigger={null}
              >
                <div className={classNames(projectcss.all, sty.freeBox__kk0NB)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nt24
                    )}
                  >
                    {
                      "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9RqKq
                    )}
                  >
                    {
                      "\u06af\u0627\u0645 \u0647\u0627\u06cc \u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647:"
                    }
                  </div>
                  <Stack__
                    as={"ul"}
                    data-plasmic-name={"ul"}
                    data-plasmic-override={overrides.ul}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.ul,
                      sty.ul
                    )}
                  >
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        sty.li___9Grrj
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bihy3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ji7Sh
                          )}
                        >
                          {
                            "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc PUBG \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f ."
                          }
                        </div>
                      </div>
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        sty.li__xCttg
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6FasX
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xmIk
                          )}
                        >
                          {
                            "\u0634\u0646\u0627\u0633\u0647 \u06a9\u0627\u0631\u0628\u0631\u06cc PUBG \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f ."
                          }
                        </div>
                      </div>
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        sty.li__jRpEc
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wGi2Z
                        )}
                      >
                        <div
                          data-plasmic-name={
                            "\u0627\u067e\u0631\u0627\u062a\u0648\u06313"
                          }
                          data-plasmic-override={overrides.اپراتور3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.اپراتور3
                          )}
                        >
                          {
                            "\u0628\u0633\u062a\u0647 \u062f\u0644 \u062e\u0648\u0627\u0647 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                      </div>
                    </li>
                  </Stack__>
                  <Button
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    className={classNames("__wab_instance", sty.button4)}
                    color={"green"}
                    loadingviow={generateStateValueProp($state, [
                      "button4",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen"] != null &&
                        typeof $steps["updateModalOpen"] === "object" &&
                        typeof $steps["updateModalOpen"].then === "function"
                      ) {
                        $steps["updateModalOpen"] = await $steps[
                          "updateModalOpen"
                        ];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button4",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    {"\u0645\u062a\u0648\u062c\u0647 \u0634\u062f\u0645"}
                  </Button>
                </div>
              </AntdModal>
              {(hasVariant($state, "steps2", "step3") ? true : false) ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mFeU8, {
                    [sty.freeBoxsteps2_step3__mFeU8Jpk3R]: hasVariant(
                      $state,
                      "steps2",
                      "step3"
                    )
                  })}
                >
                  {(() => {
                    try {
                      return !$state.disable;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__fbJep,
                        {
                          [sty.freeBoxsteps2_step2__fbJePjQ3Ah]: hasVariant(
                            $state,
                            "steps2",
                            "step2"
                          ),
                          [sty.freeBoxsteps2_step3__fbJepJpk3R]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        }
                      )}
                      id={
                        hasVariant($state, "steps2", "step3")
                          ? "pay"
                          : undefined
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateRate2"] = (
                          $state.exchangeRate?.data?.rate ? true : false
                        )
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["rate2"]
                                },
                                operation: 0,
                                value: (() => {
                                  switch ($state.shopModal.type) {
                                    case "toman":
                                      return $state.selectpack.rate;
                                    case "afghani":
                                      return Math.round(
                                        $state.selectpack.rate /
                                          $state.exchangeRate.data.rate
                                      );
                                    default:
                                      console.log("نوع ارز نامعتبر است");
                                  }
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateRate2"] != null &&
                          typeof $steps["updateRate2"] === "object" &&
                          typeof $steps["updateRate2"].then === "function"
                        ) {
                          $steps["updateRate2"] = await $steps["updateRate2"];
                        }

                        $steps["updateDisable"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["disable"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDisable"] != null &&
                          typeof $steps["updateDisable"] === "object" &&
                          typeof $steps["updateDisable"].then === "function"
                        ) {
                          $steps["updateDisable"] = await $steps[
                            "updateDisable"
                          ];
                        }

                        $steps["updateUuid"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["uuid"]
                                },
                                operation: 0,
                                value: $$.uuid
                                  .v4()
                                  .replace(/[^0-9]/g, "")
                                  .slice(0, 10)
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUuid"] != null &&
                          typeof $steps["updateUuid"] === "object" &&
                          typeof $steps["updateUuid"].then === "function"
                        ) {
                          $steps["updateUuid"] = await $steps["updateUuid"];
                        }

                        $steps["invokeGlobalAction4"] =
                          $state.rate2 != ""
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.babarkat.com/webhook/Babarkat/transaction",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          type: "package_" + $state.type,
                                          mobile: $state.userinfo.mobile,
                                          otherData: $state.otherData,
                                          price: $state.rate2,
                                          origin: $state.type,
                                          originId: $state.uuid + "",
                                          priceType: $state.shopModal.type,
                                          userToken: $state.token
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction4"] != null &&
                          typeof $steps["invokeGlobalAction4"] === "object" &&
                          typeof $steps["invokeGlobalAction4"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction4"] = await $steps[
                            "invokeGlobalAction4"
                          ];
                        }

                        $steps["updatePardakhtid"] = $steps.invokeGlobalAction4
                          ?.data?.[0]?.id
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["pardakhtid"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction4.data[0].id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePardakhtid"] != null &&
                          typeof $steps["updatePardakhtid"] === "object" &&
                          typeof $steps["updatePardakhtid"].then === "function"
                        ) {
                          $steps["updatePardakhtid"] = await $steps[
                            "updatePardakhtid"
                          ];
                        }

                        $steps["invokeGlobalAction"] =
                          $steps.invokeGlobalAction4?.data[0]?.success == true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "GET",
                                    "https://n8n.babarkat.com/webhook/telegram_Bot",
                                    (() => {
                                      try {
                                        return (() => {
                                          if ($state.type == "UC")
                                            return {
                                              text:
                                                "\n خرید موفق uc پابجی \nکاربر: " +
                                                $state.userinfo.last_name +
                                                "\nشماره کاربر: " +
                                                $state.userinfo.mobile +
                                                "\n......................" +
                                                "\nقیمت به تومان: " +
                                                $state.selectpack.rate +
                                                "\nتعداد : " +
                                                $state.selectpack.number +
                                                "\nکپی کردن نام کاربری: " +
                                                " `" +
                                                $state.otherData.userName +
                                                "` " +
                                                "\nکپی کردن شناسه عددی: " +
                                                " `" +
                                                $state.otherData.userId +
                                                "` " +
                                                "\nشناسه تراکنش: " +
                                                $state.uuid
                                            };
                                          else if ($state.type == "likee")
                                            return {
                                              text:
                                                "\n خرید موفق Likee \nکاربر: " +
                                                $state.userinfo.last_name +
                                                "\nشماره کاربر: " +
                                                $state.userinfo.mobile +
                                                "\n......................" +
                                                "\nقیمت به تومان: " +
                                                $state.selectpack.rate +
                                                "\nتعداد : " +
                                                $state.selectpack.number +
                                                "\nکپی کردن شناسه کاربر: " +
                                                " `" +
                                                $state.otherData.userId +
                                                "` " +
                                                "\nشناسه تراکنش: " +
                                                $state.uuid
                                            };
                                          else if ($state.type == "imo")
                                            return {
                                              text:
                                                "\n خرید موفق imo \nکاربر: " +
                                                $state.userinfo.last_name +
                                                "\nشماره کاربر: " +
                                                $state.userinfo.mobile +
                                                "\n......................" +
                                                "\nقیمت به تومان: " +
                                                $state.selectpack.rate +
                                                "\nتعداد : " +
                                                $state.selectpack.number +
                                                "\nکپی کردن شماره کاربر: " +
                                                " `" +
                                                $state.otherData.mobile +
                                                "` " +
                                                "\nشناسه تراکنش: " +
                                                $state.uuid
                                            };
                                          else if ($state.type == "bigo-live")
                                            return {
                                              text:
                                                "\n خرید موفق bigo-live \nکاربر: " +
                                                $state.userinfo.last_name +
                                                "\nشماره کاربر: " +
                                                $state.userinfo.mobile +
                                                "\n......................" +
                                                "\nقیمت به تومان: " +
                                                $state.selectpack.rate +
                                                "\nتعداد : " +
                                                $state.selectpack.number +
                                                "\nکپی کردن شناسه کاربر: " +
                                                " `" +
                                                $state.otherData.userId +
                                                "` " +
                                                "\nشناسه تراکنش: " +
                                                $state.uuid
                                            };
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    undefined
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction5"] =
                          $steps.invokeGlobalAction4?.data[0]?.success == true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "PUT",
                                    "https://n8n.babarkat.com/webhook/Babarkat/transaction",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          id: $state.pardakhtid,
                                          trackingId: $state.uuid,
                                          userToken: $state.token
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction5"] != null &&
                          typeof $steps["invokeGlobalAction5"] === "object" &&
                          typeof $steps["invokeGlobalAction5"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction5"] = await $steps[
                            "invokeGlobalAction5"
                          ];
                        }

                        $steps["updateModal3Open"] =
                          $steps.invokeGlobalAction4?.data[0]?.success == true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["modal3", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateModal3Open"] != null &&
                          typeof $steps["updateModal3Open"] === "object" &&
                          typeof $steps["updateModal3Open"].then === "function"
                        ) {
                          $steps["updateModal3Open"] = await $steps[
                            "updateModal3Open"
                          ];
                        }

                        $steps["invokeGlobalAction3"] = (
                          $state.infopardakt?.code
                            ? $state.infopardakt?.code != 1
                            : false
                        )
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  (() => {
                                    try {
                                      return $state.infopardakt.msg
                                        ? $state.infopardakt.msg
                                        : "مشکلی رخ داده است مجدد تلاش کنید.";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  "top-left",
                                  5000
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction3"] != null &&
                          typeof $steps["invokeGlobalAction3"] === "object" &&
                          typeof $steps["invokeGlobalAction3"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction3"] = await $steps[
                            "invokeGlobalAction3"
                          ];
                        }

                        $steps["updateError"] =
                          $steps.invokeGlobalAction4?.data[0]?.success ==
                            false &&
                          $steps.invokeGlobalAction4?.data[0]?.message
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["error"]
                                  },
                                  operation: 0,
                                  value:
                                    $steps.invokeGlobalAction4.data[0].message
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateError"] != null &&
                          typeof $steps["updateError"] === "object" &&
                          typeof $steps["updateError"].then === "function"
                        ) {
                          $steps["updateError"] = await $steps["updateError"];
                        }

                        $steps["invokeGlobalAction6"] =
                          $steps.invokeGlobalAction4?.data[0]?.success ==
                            false &&
                          $steps.invokeGlobalAction4?.data[0]?.message
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    (() => {
                                      try {
                                        return (() => {
                                          if ($state.error.includes("صراف")) {
                                            return ($state.error =
                                              $state.error.replace(
                                                "صراف",
                                                "امانتدار"
                                              ));
                                          } else return $state.error;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction6"] != null &&
                          typeof $steps["invokeGlobalAction6"] === "object" &&
                          typeof $steps["invokeGlobalAction6"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction6"] = await $steps[
                            "invokeGlobalAction6"
                          ];
                        }

                        $steps["updateDisable2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["disable"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDisable2"] != null &&
                          typeof $steps["updateDisable2"] === "object" &&
                          typeof $steps["updateDisable2"].then === "function"
                        ) {
                          $steps["updateDisable2"] = await $steps[
                            "updateDisable2"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.shopModal.load = false;
                                    return ($state.shopModal.open = false);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    />
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dwWqa, {
                      [sty.freeBoxsteps2_step2__dwWqAjQ3Ah]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      ),
                      [sty.freeBoxsteps2_step3__dwWqaJpk3R]: hasVariant(
                        $state,
                        "steps2",
                        "step3"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateShopModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["shopModal", "open"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShopModalOpen"] != null &&
                        typeof $steps["updateShopModalOpen"] === "object" &&
                        typeof $steps["updateShopModalOpen"].then === "function"
                      ) {
                        $steps["updateShopModalOpen"] = await $steps[
                          "updateShopModalOpen"
                        ];
                      }
                    }}
                  >
                    <Group4SvgIcon
                      className={classNames(projectcss.all, sty.svg___8ORn, {
                        [sty.svgsteps2_step3___8ORnJpk3R]: hasVariant(
                          $state,
                          "steps2",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__beouC,
                        {
                          [sty.freeBoxsteps2_step3__beouCJpk3R]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ki7RA,
                          {
                            [sty.textsteps2_step3__ki7RAJpk3R]: hasVariant(
                              $state,
                              "steps2",
                              "step3"
                            )
                          }
                        )}
                      >
                        {
                          "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qeApb,
                          hasVariant($state, "steps2", "step3")
                            ? "dateshow"
                            : undefined,
                          {
                            [sty.textsteps2_step3__qeApbJpk3R]: hasVariant(
                              $state,
                              "steps2",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "steps2", "step3") ? (
                          "\u0628\u0631 \u0627\u0633\u0627\u0633 \u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644  (\u062a\u0648\u0645\u0627\u0646 \u060c \u0627\u0641\u063a\u0627\u0646\u06cc)"
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return "موجودی :" + $state.mojodi + " تومان ";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0648\u062c\u0648\u062f\u06cc : 150000 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                    <Group7SvgIcon
                      className={classNames(projectcss.all, sty.svg__od574, {
                        [sty.svgsteps2_step3__od574Jpk3R]: hasVariant(
                          $state,
                          "steps2",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />
                  </div>
                </Stack__>
              ) : null}
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aJznM, {
                  [sty.freeBoxsteps2_step2__aJznMjQ3Ah]: hasVariant(
                    $state,
                    "steps2",
                    "step2"
                  ),
                  [sty.freeBoxsteps2_step3__aJznMJpk3R]: hasVariant(
                    $state,
                    "steps2",
                    "step3"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__o7Ua6, {
                    [sty.freeBoxsteps2_step2__o7Ua6JQ3Ah]: hasVariant(
                      $state,
                      "steps2",
                      "step2"
                    ),
                    [sty.freeBoxsteps2_step3__o7Ua6Jpk3R]: hasVariant(
                      $state,
                      "steps2",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__auLkn,
                      {
                        [sty.textsteps2_step3__auLknJpk3R]: hasVariant(
                          $state,
                          "steps2",
                          "step3"
                        )
                      }
                    )}
                  >
                    {
                      "\u0644\u0637\u0641\u0627\u064b \u0634\u0646\u0627\u0633\u0647 \u0627\u06a9\u0627\u0646\u062a (ID) \u0648 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u062e\u0648\u062f \u0631\u0627 \u0628\u0627 \u062f\u0642\u062a \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f \u0648 \u0642\u0628\u0644 \u0627\u0632 \u062a\u0623\u06cc\u06cc\u062f\u060c \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u0646\u0645\u0627\u06cc\u06cc\u062f. "
                    }
                  </div>
                </div>
              </Stack__>
              <AntdModal
                data-plasmic-name={"modal3"}
                data-plasmic-override={overrides.modal3}
                className={classNames("__wab_instance", sty.modal3, {
                  [sty.modal3steps2_step2]: hasVariant(
                    $state,
                    "steps2",
                    "step2"
                  ),
                  [sty.modal3steps2_step3]: hasVariant(
                    $state,
                    "steps2",
                    "step3"
                  )
                })}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                hideFooter={true}
                modalContentClassName={classNames({
                  [sty["pcls_ICzI0CbqJq2w"]]: hasVariant(
                    globalVariants,
                    "screen",
                    "mobileOnly"
                  ),
                  [sty["pcls_lOL0PkE5XqEG"]]: true
                })}
                modalScopeClassName={sty["modal3__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["modal3", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["modal3", "open"])}
                title={null}
                trigger={null}
                width={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "100vw"
                    : undefined
                }
                wrapClassName={classNames({ [sty["pcls_F0MnRGXsNZ14"]]: true })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__rgrKk)}>
                  <LottieWrapper
                    data-plasmic-name={"lottie"}
                    data-plasmic-override={overrides.lottie}
                    animationData={{
                      v: "4.10.1",
                      fr: 30,
                      ip: 0,
                      op: 40,
                      w: 80,
                      h: 80,
                      nm: "Success Checkmark",
                      ddd: 0,
                      assets: [],
                      layers: [
                        {
                          ddd: 0,
                          ind: 1,
                          ty: 4,
                          nm: "Check Mark",
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [40, 40, 0], ix: 2 },
                            a: { a: 0, k: [-1.312, 6, 0], ix: 1 },
                            s: { a: 0, k: [100, 100, 100], ix: 6 }
                          },
                          ao: 0,
                          shapes: [
                            {
                              ty: "gr",
                              it: [
                                {
                                  ind: 0,
                                  ty: "sh",
                                  ix: 1,
                                  ks: {
                                    a: 0,
                                    k: {
                                      i: [
                                        [0, 0],
                                        [0, 0],
                                        [0, 0]
                                      ],
                                      o: [
                                        [0, 0],
                                        [0, 0],
                                        [0, 0]
                                      ],
                                      v: [
                                        [-15.75, 8],
                                        [-8, 16],
                                        [13.125, -4]
                                      ],
                                      c: false
                                    },
                                    ix: 2
                                  },
                                  nm: "Path 1",
                                  mn: "ADBE Vector Shape - Group",
                                  hd: false
                                },
                                {
                                  ty: "tm",
                                  s: {
                                    a: 1,
                                    k: [
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        n: ["0p667_1_0p333_0"],
                                        t: 25,
                                        s: [0],
                                        e: [100]
                                      },
                                      { t: 33 }
                                    ],
                                    ix: 1
                                  },
                                  e: { a: 0, k: 0, ix: 2 },
                                  o: { a: 0, k: 0, ix: 3 },
                                  m: 1,
                                  ix: 2,
                                  nm: "Trim Paths 1",
                                  mn: "ADBE Vector Filter - Trim",
                                  hd: false
                                },
                                {
                                  ty: "st",
                                  c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                  o: { a: 0, k: 100, ix: 4 },
                                  w: { a: 0, k: 3, ix: 5 },
                                  lc: 2,
                                  lj: 2,
                                  nm: "Stroke 1",
                                  mn: "ADBE Vector Graphic - Stroke",
                                  hd: false
                                },
                                {
                                  ty: "tr",
                                  p: { a: 0, k: [0, 0], ix: 2 },
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  o: { a: 0, k: 100, ix: 7 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  nm: "Transform"
                                }
                              ],
                              nm: "Shape 1",
                              np: 3,
                              cix: 2,
                              ix: 1,
                              mn: "ADBE Vector Group",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 40,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 2,
                          ty: 4,
                          nm: "Circle Flash",
                          sr: 1,
                          ks: {
                            o: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.833], y: [0.833] },
                                  o: { x: [0.167], y: [0.167] },
                                  n: ["0p833_0p833_0p167_0p167"],
                                  t: 25,
                                  s: [0],
                                  e: [98]
                                },
                                {
                                  i: { x: [0.833], y: [0.833] },
                                  o: { x: [0.167], y: [0.167] },
                                  n: ["0p833_0p833_0p167_0p167"],
                                  t: 30,
                                  s: [98],
                                  e: [0]
                                },
                                { t: 38 }
                              ],
                              ix: 11
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [40, 40, 0], ix: 2 },
                            a: { a: 0, k: [0, 0, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                  o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                  n: [
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0"
                                  ],
                                  t: 25,
                                  s: [0, 0, 100],
                                  e: [100, 100, 100]
                                },
                                { t: 30 }
                              ],
                              ix: 6
                            }
                          },
                          ao: 0,
                          shapes: [
                            {
                              d: 1,
                              ty: "el",
                              s: { a: 0, k: [64, 64], ix: 2 },
                              p: { a: 0, k: [0, 0], ix: 3 },
                              nm: "Ellipse Path 1",
                              mn: "ADBE Vector Shape - Ellipse",
                              hd: false
                            },
                            {
                              ty: "fl",
                              c: {
                                a: 0,
                                k: [
                                  0.529866635799, 0.961458325386,
                                  0.448091417551, 1
                                ],
                                ix: 4
                              },
                              o: { a: 0, k: 100, ix: 5 },
                              r: 1,
                              nm: "Fill 1",
                              mn: "ADBE Vector Graphic - Fill",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 40,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 3,
                          ty: 4,
                          nm: "Circle Stroke",
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [39.022, 39.022, 0], ix: 2 },
                            a: { a: 0, k: [0, 0, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                  o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                  n: [
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0"
                                  ],
                                  t: 16,
                                  s: [100, 100, 100],
                                  e: [80, 80, 100]
                                },
                                {
                                  i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                  o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                  n: [
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0"
                                  ],
                                  t: 22,
                                  s: [80, 80, 100],
                                  e: [120, 120, 100]
                                },
                                {
                                  i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                  o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                  n: [
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0"
                                  ],
                                  t: 25,
                                  s: [120, 120, 100],
                                  e: [100, 100, 100]
                                },
                                { t: 29 }
                              ],
                              ix: 6
                            }
                          },
                          ao: 0,
                          shapes: [
                            {
                              ty: "gr",
                              it: [
                                {
                                  d: 1,
                                  ty: "el",
                                  s: { a: 0, k: [60, 60], ix: 2 },
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  nm: "Ellipse Path 1",
                                  mn: "ADBE Vector Shape - Ellipse",
                                  hd: false
                                },
                                {
                                  ty: "tm",
                                  s: {
                                    a: 1,
                                    k: [
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        n: ["0p667_1_0p333_0"],
                                        t: 0,
                                        s: [0],
                                        e: [100]
                                      },
                                      { t: 16 }
                                    ],
                                    ix: 1
                                  },
                                  e: { a: 0, k: 0, ix: 2 },
                                  o: { a: 0, k: 0, ix: 3 },
                                  m: 1,
                                  ix: 2,
                                  nm: "Trim Paths 1",
                                  mn: "ADBE Vector Filter - Trim",
                                  hd: false
                                },
                                {
                                  ty: "st",
                                  c: {
                                    a: 0,
                                    k: [
                                      0.427450984716, 0.800000011921,
                                      0.35686275363, 1
                                    ],
                                    ix: 3
                                  },
                                  o: { a: 0, k: 100, ix: 4 },
                                  w: { a: 0, k: 3, ix: 5 },
                                  lc: 2,
                                  lj: 2,
                                  nm: "Stroke 1",
                                  mn: "ADBE Vector Graphic - Stroke",
                                  hd: false
                                },
                                {
                                  ty: "tr",
                                  p: { a: 0, k: [0.978, 0.978], ix: 2 },
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  o: { a: 0, k: 100, ix: 7 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  nm: "Transform"
                                }
                              ],
                              nm: "Ellipse 1",
                              np: 3,
                              cix: 2,
                              ix: 1,
                              mn: "ADBE Vector Group",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 40,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 4,
                          ty: 4,
                          nm: "Circle Green Fill",
                          sr: 1,
                          ks: {
                            o: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.833], y: [0.833] },
                                  o: { x: [0.167], y: [0.167] },
                                  n: ["0p833_0p833_0p167_0p167"],
                                  t: 21,
                                  s: [0],
                                  e: [98]
                                },
                                { t: 28 }
                              ],
                              ix: 11
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [40, 40, 0], ix: 2 },
                            a: { a: 0, k: [0, 0, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                  o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                  n: [
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0"
                                  ],
                                  t: 21,
                                  s: [0, 0, 100],
                                  e: [100, 100, 100]
                                },
                                { t: 28 }
                              ],
                              ix: 6
                            }
                          },
                          ao: 0,
                          shapes: [
                            {
                              d: 1,
                              ty: "el",
                              s: { a: 0, k: [64, 64], ix: 2 },
                              p: { a: 0, k: [0, 0], ix: 3 },
                              nm: "Ellipse Path 1",
                              mn: "ADBE Vector Shape - Ellipse",
                              hd: false
                            },
                            {
                              ty: "fl",
                              c: {
                                a: 0,
                                k: [
                                  0.427450984716, 0.800000011921, 0.35686275363,
                                  1
                                ],
                                ix: 4
                              },
                              o: { a: 0, k: 100, ix: 5 },
                              r: 1,
                              nm: "Fill 1",
                              mn: "ADBE Vector Graphic - Fill",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 40,
                          st: 0,
                          bm: 0
                        }
                      ]
                    }}
                    className={classNames("__wab_instance", sty.lottie)}
                    loop={true}
                    preview={true}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fCfy9
                    )}
                  >
                    {
                      "\u062e\u0631\u06cc\u062f \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__v1XOp, {
                      [sty.freeBoxsteps2_step3__v1XOpJpk3R]: hasVariant(
                        $state,
                        "steps2",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wDNgA,
                        {
                          [sty.textsteps2_step3__wDNgAJpk3R]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.infopardakt.ref_code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0634\u0645\u0627\u0631\u0647 \u067e\u06cc\u06af\u06cc\u0631\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ttcFu)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fO2Zv,
                        {
                          [sty.textsteps2_step3__fO2ZvJpk3R]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        }
                      )}
                    >
                      {
                        "\u0634\u0646\u0627\u0633\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v93Y,
                        {
                          [sty.textsteps2_step3__v93YJpk3R]: hasVariant(
                            $state,
                            "steps2",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "steps2", "step3") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.uuid;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0634\u0646\u0627\u0633\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.infopardakt.trans_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0634\u0646\u0627\u0633\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                  <Button
                    data-plasmic-name={"button5"}
                    data-plasmic-override={overrides.button5}
                    className={classNames("__wab_instance", sty.button5)}
                    color={"green"}
                    loadingviow={generateStateValueProp($state, [
                      "button5",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToHomepage"] = true
                        ? (() => {
                            const actionArgs = { destination: `/` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHomepage"] != null &&
                        typeof $steps["goToHomepage"] === "object" &&
                        typeof $steps["goToHomepage"].then === "function"
                      ) {
                        $steps["goToHomepage"] = await $steps["goToHomepage"];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button5",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yX8Vu
                      )}
                    >
                      {"\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                  </Button>
                </div>
              </AntdModal>
            </div>
          </section>
          <ApiRequest
            data-plasmic-name={"commissionBabarkat"}
            data-plasmic-override={overrides.commissionBabarkat}
            className={classNames("__wab_instance", sty.commissionBabarkat, {
              [sty.commissionBabarkatsteps2_step3]: hasVariant(
                $state,
                "steps2",
                "step3"
              )
            })}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "commissionBabarkat",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "commissionBabarkat",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "commissionBabarkat",
                "data"
              ]).apply(null, eventArgs);
            }}
            url={"https://n8n.babarkat.com/webhook/CommissionBabarkat"}
          />

          <ApiRequest
            data-plasmic-name={"rate"}
            data-plasmic-override={overrides.rate}
            body={(() => {
              try {
                return {
                  userToken: $state.token,
                  name:
                    $ctx.query.type ||
                    new URLSearchParams(window.location.search).urlParams.get(
                      "type"
                    )
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.rate, {
              [sty.ratesteps2_step2]: hasVariant($state, "steps2", "step2"),
              [sty.ratesteps2_step3]: hasVariant($state, "steps2", "step3")
            })}
            errorDisplay={null}
            loadingDisplay={
              <section
                className={classNames(projectcss.all, sty.section__b5S7C, {
                  [sty.sectionsteps2_step2__b5S7CjQ3Ah]: hasVariant(
                    $state,
                    "steps2",
                    "step2"
                  )
                })}
              >
                {(hasVariant($state, "steps2", "step2") ? true : false) ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0Kz5Z, {
                      [sty.freeBoxsteps2_step2___0Kz5ZjQ3Ah]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      ),
                      [sty.freeBoxsteps2_step3___0Kz5ZJpk3R]: hasVariant(
                        $state,
                        "steps2",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__nnbxi,
                        {
                          [sty.freeBoxsteps2_step2__nnbxijQ3Ah]: hasVariant(
                            $state,
                            "steps2",
                            "step2"
                          )
                        }
                      )}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return [1, 2, 3, 4, 5, 6];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__e4Bg,
                              hasVariant($state, "steps2", "step2")
                                ? "shimmer"
                                : undefined,
                              {
                                [sty.freeBoxsteps2_step2__e4BgjQ3Ah]:
                                  hasVariant($state, "steps2", "step2"),
                                [sty.freeBoxsteps2_step3__e4BgJpk3R]:
                                  hasVariant($state, "steps2", "step3")
                              }
                            )}
                            key={currentIndex}
                          />
                        );
                      })}
                    </div>
                  </Stack__>
                ) : null}
              </section>
            }
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["rate", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["rate", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["rate", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={"https://n8n.babarkat.com/webhook/transaction/exchange/list"}
          >
            <section
              className={classNames(projectcss.all, sty.section__clxxK, {
                [sty.sectionsteps2_step2__clxxKjQ3Ah]: hasVariant(
                  $state,
                  "steps2",
                  "step2"
                )
              })}
            >
              {(hasVariant($state, "steps2", "step2") ? true : false) ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yuRgs, {
                    [sty.freeBoxsteps2_step2__yuRgsjQ3Ah]: hasVariant(
                      $state,
                      "steps2",
                      "step2"
                    ),
                    [sty.freeBoxsteps2_step3__yuRgsJpk3R]: hasVariant(
                      $state,
                      "steps2",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vfb3A, {
                      [sty.freeBoxsteps2_step2__vfb3AjQ3Ah]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      )
                    })}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.rate.data.list;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__c5CGy,
                            {
                              [sty.freeBoxsteps2_step2__c5CGyjQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              ),
                              [sty.freeBoxsteps2_step3__c5CGyJpk3R]: hasVariant(
                                $state,
                                "steps2",
                                "step3"
                              )
                            }
                          )}
                          key={currentIndex}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__lFtkg, {
                              [sty.imgsteps2_step2__lFtkgjQ3Ah]: hasVariant(
                                $state,
                                "steps2",
                                "step2"
                              )
                            })}
                            displayHeight={
                              hasVariant($state, "steps2", "step2") &&
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "50px"
                                : hasVariant($state, "steps2", "step2")
                                ? "50px"
                                : "auto"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={
                              hasVariant($state, "steps2", "step2") &&
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "auto"
                                : hasVariant($state, "steps2", "step2")
                                ? "50px"
                                : "auto"
                            }
                            loading={"lazy"}
                            src={
                              hasVariant($state, "steps2", "step2")
                                ? (() => {
                                    try {
                                      return currentItem.image;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return {
                                          src: "/plasmic/babarkat/images/image38.webp",
                                          fullWidth: 500,
                                          fullHeight: 500,
                                          aspectRatio: undefined
                                        };
                                      }
                                      throw e;
                                    }
                                  })()
                                : undefined
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__f7Qbw,
                              {
                                [sty.textsteps2_step2__f7QbwjQ3Ah]: hasVariant(
                                  $state,
                                  "steps2",
                                  "step2"
                                )
                              }
                            )}
                          >
                            {hasVariant($state, "steps2", "step2") ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      " بسته : " +
                                      currentItem.name +
                                      " - " +
                                      currentItem.number
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "120 UC";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              "Button"
                            )}
                          </div>
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.button6,
                                {
                                  [sty.button6steps2_step2]: hasVariant(
                                    $state,
                                    "steps2",
                                    "step2"
                                  ),
                                  [sty.button6steps2_step3]: hasVariant(
                                    $state,
                                    "steps2",
                                    "step3"
                                  )
                                }
                              ),
                              color: hasVariant($state, "steps2", "step2")
                                ? "green"
                                : undefined,
                              loadingviow: generateStateValueProp($state, [
                                "button6",
                                __plasmic_idx_0,
                                "loadingviow"
                              ]),
                              onClick: async event => {
                                const $steps = {};

                                $steps["updateSelectpack"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["selectpack"]
                                        },
                                        operation: 0,
                                        value: currentItem
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSelectpack"] != null &&
                                  typeof $steps["updateSelectpack"] ===
                                    "object" &&
                                  typeof $steps["updateSelectpack"].then ===
                                    "function"
                                ) {
                                  $steps["updateSelectpack"] = await $steps[
                                    "updateSelectpack"
                                  ];
                                }

                                $steps["updateSteps2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        vgroup: "steps2",
                                        operation: 0,
                                        value: "step3"
                                      };
                                      return (({ vgroup, value }) => {
                                        if (typeof value === "string") {
                                          value = [value];
                                        }

                                        $stateSet($state, vgroup, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSteps2"] != null &&
                                  typeof $steps["updateSteps2"] === "object" &&
                                  typeof $steps["updateSteps2"].then ===
                                    "function"
                                ) {
                                  $steps["updateSteps2"] = await $steps[
                                    "updateSteps2"
                                  ];
                                }
                              },
                              onLoadingviowChange: async (
                                ...eventArgs: any
                              ) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button6",
                                    __plasmic_idx_0,
                                    "loadingviow"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              },
                              size: hasVariant($state, "steps2", "step2")
                                ? "compact"
                                : undefined
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "button6[].loadingviow",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return $state.loadingviow;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Button
                                data-plasmic-name={"button6"}
                                data-plasmic-override={overrides.button6}
                                {...child$Props}
                              >
                                {hasVariant($state, "steps2", "step2") ? (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          Math.ceil(
                                            currentItem.rate +
                                              currentItem.rate *
                                                (($state.commissionBabarkat.data
                                                  .babrkat +
                                                  $state.commissionBabarkat.data
                                                    .saraf) /
                                                  100)
                                          ).toLocaleString("en") + " تومان "
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "520000 \u062a\u0648\u0645\u0627\u0646";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                ) : (
                                  "Button"
                                )}
                              </Button>
                            );
                          })()}
                        </Stack__>
                      );
                    })}
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__xbwcS,
                        {
                          [sty.freeBoxsteps2_step2__xbwcSjQ3Ah]: hasVariant(
                            $state,
                            "steps2",
                            "step2"
                          )
                        }
                      )}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.columns__cnTq, {
                      [sty.columnssteps2_step2__cnTqJQ3Ah]: hasVariant(
                        $state,
                        "steps2",
                        "step2"
                      )
                    })}
                  />
                </Stack__>
              ) : null}
            </section>
          </ApiRequest>
          {(hasVariant($state, "steps2", "step3") ? true : false) ? (
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml, {
                [sty.embedHtmlsteps2_step3]: hasVariant(
                  $state,
                  "steps2",
                  "step3"
                )
              })}
              code={
                hasVariant($state, "steps2", "step3")
                  ? "<div></div>\r\n    <script>\r\n        window.addEventListener('popstate', function (event) {\r\n            window.location.href = \"/pubg\"\r\n        });\r\n    </script>"
                  : "<div></div>\r\n    <script>\r\n        window.addEventListener('popstate', function (event) {\r\n            window.location.href = \"/charging\"\r\n        });\r\n    </script>"
              }
            />
          ) : null}
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect, {
              [sty.sideEffectsteps2_step3]: hasVariant(
                $state,
                "steps2",
                "step3"
              )
            })}
            onMount={async () => {
              const $steps = {};

              $steps["updateType"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["type"]
                      },
                      operation: 0,
                      value:
                        $ctx.query.type ||
                        new URLSearchParams(
                          window.location.search
                        ).urlParams.get("type")
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateType"] != null &&
                typeof $steps["updateType"] === "object" &&
                typeof $steps["updateType"].then === "function"
              ) {
                $steps["updateType"] = await $steps["updateType"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const item = JSON.parse(
                            sessionStorage.getItem("userbabarcatToken")
                          );
                          if (item == null) {
                            return window.open("/login");
                          } else {
                            const currentTime = new Date().getTime();
                            if (currentTime > item.expiration) {
                              return sessionStorage.removeItem(
                                "userbabarcatToken"
                              );
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <ShopModal
            data-plasmic-name={"shopModal"}
            data-plasmic-override={overrides.shopModal}
            className={classNames("__wab_instance", sty.shopModal, {
              [sty.shopModalsteps2_step3]: hasVariant($state, "steps2", "step3")
            })}
            data={
              hasVariant($state, "steps2", "step3")
                ? (() => {
                    try {
                      return {
                        toman: {
                          name: "تومان",
                          symbol: "toman",
                          isoCode: "IRR",
                          amount: $state.userinfo.toman
                        },
                        afghani: {
                          name: "افغانی",
                          symbol: "afghani",
                          isoCode: "AFN",
                          amount: $state.userinfo.afghani
                        }
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          toman: {
                            name: "\u062a\u0648\u0645\u0627\u0646",
                            symbol: "toman",
                            isoCode: "IRR",
                            amount: 200000
                          },
                          afghani: {
                            name: "\u0627\u0641\u063a\u0627\u0646\u06cc",
                            symbol: "afghani",
                            isoCode: "AFN",
                            amount: 1000
                          }
                        };
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            load={generateStateValueProp($state, ["shopModal", "load"])}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return window.document.getElementById("pay").click();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            onLoadChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shopModal", "load"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shopModal", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onTypeChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shopModal", "type"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["shopModal", "open"])}
            type={generateStateValueProp($state, ["shopModal", "type"])}
          />

          <ApiRequest
            data-plasmic-name={"exchangeRate"}
            data-plasmic-override={overrides.exchangeRate}
            className={classNames("__wab_instance", sty.exchangeRate, {
              [sty.exchangeRatesteps2_step3]: hasVariant(
                $state,
                "steps2",
                "step3"
              )
            })}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zEntH
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___03X9X
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "exchangeRate",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "exchangeRate",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["exchangeRate", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={"https://n8n.babarkat.com/webhook/exchangeRate"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "reveal",
    "operators",
    "boxselect",
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "pubgi",
    "pubginame",
    "pubgiId",
    "likee",
    "likee2",
    "bigoLive",
    "bigoLive3",
    "imo2",
    "imo",
    "chargeType",
    "boxselect2",
    "tabsContainer",
    "tabButton",
    "button",
    "tabUnderline",
    "tabContent",
    "button2",
    "button3",
    "step1Next",
    "step1Next2",
    "step1Next3",
    "modal",
    "ul",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06313",
    "button4",
    "modal3",
    "lottie",
    "button5",
    "commissionBabarkat",
    "rate",
    "button6",
    "embedHtml",
    "sideEffect",
    "shopModal",
    "exchangeRate"
  ],
  header: ["header"],
  reveal: [
    "reveal",
    "operators",
    "boxselect",
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "pubgi",
    "pubginame",
    "pubgiId",
    "likee",
    "likee2",
    "bigoLive",
    "bigoLive3",
    "imo2",
    "imo",
    "chargeType",
    "boxselect2",
    "tabsContainer",
    "tabButton",
    "button",
    "tabUnderline",
    "tabContent",
    "button2",
    "button3"
  ],
  operators: ["operators", "boxselect"],
  boxselect: ["boxselect"],
  wallet: [
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "pubgi",
    "pubginame",
    "pubgiId",
    "likee",
    "likee2",
    "bigoLive",
    "bigoLive3",
    "imo2",
    "imo"
  ],
  steps: [
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2"
  ],
  مشخصات: ["\u0645\u0634\u062e\u0635\u0627\u062a", "selected"],
  selected: ["selected"],
  مبلغشارژ: ["\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698", "unselected"],
  unselected: ["unselected"],
  تاییدخرید: [
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2"
  ],
  unselected2: ["unselected2"],
  pubgi: ["pubgi", "pubginame", "pubgiId"],
  pubginame: ["pubginame"],
  pubgiId: ["pubgiId"],
  likee: ["likee", "likee2"],
  likee2: ["likee2"],
  bigoLive: ["bigoLive", "bigoLive3"],
  bigoLive3: ["bigoLive3"],
  imo2: ["imo2", "imo"],
  imo: ["imo"],
  chargeType: ["chargeType", "boxselect2"],
  boxselect2: ["boxselect2"],
  tabsContainer: [
    "tabsContainer",
    "tabButton",
    "button",
    "tabUnderline",
    "tabContent",
    "button2",
    "button3"
  ],
  tabButton: ["tabButton", "button"],
  button: ["button"],
  tabUnderline: ["tabUnderline"],
  tabContent: ["tabContent", "button2"],
  button2: ["button2"],
  button3: ["button3"],
  step1Next: ["step1Next"],
  step1Next2: ["step1Next2"],
  step1Next3: ["step1Next3"],
  modal: [
    "modal",
    "ul",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06313",
    "button4"
  ],
  ul: ["ul", "\u0627\u067e\u0631\u0627\u062a\u0648\u06313"],
  اپراتور3: ["\u0627\u067e\u0631\u0627\u062a\u0648\u06313"],
  button4: ["button4"],
  modal3: ["modal3", "lottie", "button5"],
  lottie: ["lottie"],
  button5: ["button5"],
  commissionBabarkat: ["commissionBabarkat"],
  rate: ["rate", "button6"],
  button6: ["button6"],
  embedHtml: ["embedHtml"],
  sideEffect: ["sideEffect"],
  shopModal: ["shopModal"],
  exchangeRate: ["exchangeRate"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  reveal: typeof Reveal;
  operators: "div";
  boxselect: typeof Boxselect2;
  wallet: "div";
  steps: "div";
  مشخصات: "div";
  selected: "svg";
  مبلغشارژ: "div";
  unselected: "svg";
  تاییدخرید: "div";
  unselected2: "svg";
  pubgi: "div";
  pubginame: typeof Input;
  pubgiId: typeof Input;
  likee: "div";
  likee2: typeof Input;
  bigoLive: "div";
  bigoLive3: typeof Input;
  imo2: "div";
  imo: typeof Input;
  chargeType: "div";
  boxselect2: typeof Boxselect2;
  tabsContainer: typeof TabsContainer;
  tabButton: typeof TabButton;
  button: typeof Button;
  tabUnderline: typeof TabUnderline;
  tabContent: typeof TabContent;
  button2: typeof Button;
  button3: typeof Button;
  step1Next: typeof Button;
  step1Next2: typeof Button;
  step1Next3: typeof Button;
  modal: typeof AntdModal;
  ul: "ul";
  اپراتور3: "div";
  button4: typeof Button;
  modal3: typeof AntdModal;
  lottie: typeof LottieWrapper;
  button5: typeof Button;
  commissionBabarkat: typeof ApiRequest;
  rate: typeof ApiRequest;
  button6: typeof Button;
  embedHtml: typeof Embed;
  sideEffect: typeof SideEffect;
  shopModal: typeof ShopModal;
  exchangeRate: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPubg__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPubg__VariantsArgs;
    args?: PlasmicPubg__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPubg__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPubg__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPubg__ArgProps,
          internalVariantPropNames: PlasmicPubg__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPubg__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPubg";
  } else {
    func.displayName = `PlasmicPubg.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sZQMbqXz9utLNaTnNb3uss"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPubg = Object.assign(
  // Top-level PlasmicPubg renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    reveal: makeNodeComponent("reveal"),
    operators: makeNodeComponent("operators"),
    boxselect: makeNodeComponent("boxselect"),
    wallet: makeNodeComponent("wallet"),
    steps: makeNodeComponent("steps"),
    مشخصات: makeNodeComponent("\u0645\u0634\u062e\u0635\u0627\u062a"),
    selected: makeNodeComponent("selected"),
    مبلغشارژ: makeNodeComponent(
      "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698"
    ),
    unselected: makeNodeComponent("unselected"),
    تاییدخرید: makeNodeComponent(
      "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f"
    ),
    unselected2: makeNodeComponent("unselected2"),
    pubgi: makeNodeComponent("pubgi"),
    pubginame: makeNodeComponent("pubginame"),
    pubgiId: makeNodeComponent("pubgiId"),
    likee: makeNodeComponent("likee"),
    likee2: makeNodeComponent("likee2"),
    bigoLive: makeNodeComponent("bigoLive"),
    bigoLive3: makeNodeComponent("bigoLive3"),
    imo2: makeNodeComponent("imo2"),
    imo: makeNodeComponent("imo"),
    chargeType: makeNodeComponent("chargeType"),
    boxselect2: makeNodeComponent("boxselect2"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabButton: makeNodeComponent("tabButton"),
    button: makeNodeComponent("button"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    tabContent: makeNodeComponent("tabContent"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    step1Next: makeNodeComponent("step1Next"),
    step1Next2: makeNodeComponent("step1Next2"),
    step1Next3: makeNodeComponent("step1Next3"),
    modal: makeNodeComponent("modal"),
    ul: makeNodeComponent("ul"),
    اپراتور3: makeNodeComponent("\u0627\u067e\u0631\u0627\u062a\u0648\u06313"),
    button4: makeNodeComponent("button4"),
    modal3: makeNodeComponent("modal3"),
    lottie: makeNodeComponent("lottie"),
    button5: makeNodeComponent("button5"),
    commissionBabarkat: makeNodeComponent("commissionBabarkat"),
    rate: makeNodeComponent("rate"),
    button6: makeNodeComponent("button6"),
    embedHtml: makeNodeComponent("embedHtml"),
    sideEffect: makeNodeComponent("sideEffect"),
    shopModal: makeNodeComponent("shopModal"),
    exchangeRate: makeNodeComponent("exchangeRate"),

    // Metadata about props expected for PlasmicPubg
    internalVariantProps: PlasmicPubg__VariantProps,
    internalArgProps: PlasmicPubg__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "بابرکت",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPubg;
/* prettier-ignore-end */
