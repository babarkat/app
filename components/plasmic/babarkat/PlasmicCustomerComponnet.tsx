/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: uXx8PLeZeTQA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: eisuy4UCB7xD/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicCustomerComponnet.module.css"; // plasmic-import: uXx8PLeZeTQA/css

import Icon121Icon from "./icons/PlasmicIcon__Icon121"; // plasmic-import: ljBqiClcDFaC/icon
import GroupSvgIcon from "./icons/PlasmicIcon__GroupSvg"; // plasmic-import: 51hz8qmjnijI/icon
import Icon109Icon from "./icons/PlasmicIcon__Icon109"; // plasmic-import: LIgkphYcL9vu/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: ZQs8iNj46bRk/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon110Icon from "./icons/PlasmicIcon__Icon110"; // plasmic-import: aq88MiXmlJWv/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dXgXrJG5lp3Z/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: f1hgArxzFzWU/icon

createPlasmicElementProxy;

export type PlasmicCustomerComponnet__VariantMembers = {};
export type PlasmicCustomerComponnet__VariantsArgs = {};
type VariantPropType = keyof PlasmicCustomerComponnet__VariantsArgs;
export const PlasmicCustomerComponnet__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCustomerComponnet__ArgsType = {
  back?: () => void;
  openNew?: () => void;
  active?: boolean;
};
type ArgPropType = keyof PlasmicCustomerComponnet__ArgsType;
export const PlasmicCustomerComponnet__ArgProps = new Array<ArgPropType>(
  "back",
  "openNew",
  "active"
);

export type PlasmicCustomerComponnet__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  input?: Flex__<typeof Input>;
  main?: Flex__<"div">;
  loading2?: Flex__<"div">;
  popover2?: Flex__<typeof AntdPopover>;
  button4?: Flex__<typeof Button>;
  button3?: Flex__<typeof Button>;
  header?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  no?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  exitModal?: Flex__<typeof AntdModal>;
  button6?: Flex__<typeof Button>;
  button7?: Flex__<typeof Button>;
  backHandler?: Flex__<typeof BackHandler>;
};

export interface DefaultCustomerComponnetProps {
  back?: () => void;
  openNew?: () => void;
  active?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCustomerComponnet__RenderFunc(props: {
  variants: PlasmicCustomerComponnet__VariantsArgs;
  args: PlasmicCustomerComponnet__ArgsType;
  overrides: PlasmicCustomerComponnet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          active: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "popover2[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button3[].loadingviow",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button4[].loadingviow",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "exitModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button6.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button7.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "getCustomer",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(sessionStorage.getItem("userbabarcatToken"))
                .value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "customer",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.getCustomer.list;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hasMore",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "page",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "filter",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.customer;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "customerId",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["customer"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    undefined,
                    "https://n8n.babarkat.com/webhook/saraf/getCustomer/",
                    (() => {
                      try {
                        return {
                          userToken: $state.token,
                          page: 0
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["customer"] != null &&
            typeof $steps["customer"] === "object" &&
            typeof $steps["customer"].then === "function"
          ) {
            $steps["customer"] = await $steps["customer"];
          }

          $steps["updateGetCustomer"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["getCustomer"]
                  },
                  operation: 0,
                  value: $steps.customer.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateGetCustomer"] != null &&
            typeof $steps["updateGetCustomer"] === "object" &&
            typeof $steps["updateGetCustomer"].then === "function"
          ) {
            $steps["updateGetCustomer"] = await $steps["updateGetCustomer"];
          }

          $steps["updateLoading"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["loading"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateLoading"] != null &&
            typeof $steps["updateLoading"] === "object" &&
            typeof $steps["updateLoading"].then === "function"
          ) {
            $steps["updateLoading"] = await $steps["updateLoading"];
          }
        }}
      />

      <div className={classNames(projectcss.all, sty.freeBox__fjdF7)}>
        <div className={classNames(projectcss.all, sty.freeBox__cbf8)}>
          <Input
            data-plasmic-name={"input"}
            data-plasmic-override={overrides.input}
            className={classNames("__wab_instance", sty.input)}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["input", "value"]).apply(
                null,
                eventArgs
              );

              (async value => {
                const $steps = {};

                $steps["updateFilter"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["filter"]
                        },
                        operation: 0,
                        value: $state.customer.filter(
                          item =>
                            item.name.includes($state.input.value) ||
                            item.last_name.includes($state.input.value) ||
                            item.mobile.includes($state.input.value) ||
                            item.id.toString().includes($state.input.value)
                        )
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateFilter"] != null &&
                  typeof $steps["updateFilter"] === "object" &&
                  typeof $steps["updateFilter"].then === "function"
                ) {
                  $steps["updateFilter"] = await $steps["updateFilter"];
                }
              }).apply(null, eventArgs);
            }}
            placeholder={
              "\u062c\u0633\u062a\u062c\u0648 \u0645\u0634\u062a\u0631\u06cc"
            }
            type={"text"}
            value={generateStateValueProp($state, ["input", "value"])}
          />

          <Icon121Icon
            className={classNames(projectcss.all, sty.svg__gVZcM)}
            role={"img"}
          />
        </div>
        <div
          data-plasmic-name={"main"}
          data-plasmic-override={overrides.main}
          className={classNames(projectcss.all, sty.main)}
          onScroll={async event => {
            const $steps = {};

            $steps["runCode"] =
              $state.hasMore && $state.isLoading == false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var scrollTop = event.currentTarget.scrollTop;
                          var list = event.currentTarget;
                          window.list = list;
                          if (
                            scrollTop + list.clientHeight >=
                            list.scrollHeight - 10
                          ) {
                            list.style.overflow = "hidden";
                            $state.page++;
                            return ($state.isLoading = true);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["customer"] = $state.isLoading
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "https://n8n.babarkat.com/webhook/saraf/getCustomer/",
                      (() => {
                        try {
                          return {
                            userToken: $state.token,
                            page: $state.page
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["customer"] != null &&
              typeof $steps["customer"] === "object" &&
              typeof $steps["customer"].then === "function"
            ) {
              $steps["customer"] = await $steps["customer"];
            }

            $steps["runCode2"] = $state.isLoading
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        $state.isLoading = false;
                        var newData = $steps.customer?.data?.list;
                        if (!newData || newData.length == 0) {
                          $state.hasMore = false;
                        } else {
                          $state.customer = $state.customer.concat(newData);
                          $state.filter = $state.customer;
                        }
                        if (window.list) {
                          return (window.list.style.overflow = "auto");
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode2"] != null &&
              typeof $steps["runCode2"] === "object" &&
              typeof $steps["runCode2"].then === "function"
            ) {
              $steps["runCode2"] = await $steps["runCode2"];
            }
          }}
          style={(() => {
            try {
              return {
                "overflow-y": "auto",
                "scroll-behavior": "smooth"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"loading2"}
              data-plasmic-override={overrides.loading2}
              className={classNames(projectcss.all, sty.loading2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___7AbyK,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__oWpL,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__iOua6,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__matu5,
                  "shimmer"
                )}
              />
            </div>
          ) : null}
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.filter;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__qUlQ7)}
                key={currentIndex}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__up6D9)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return window.sessionStorage.setItem(
                                  "customerinfo",
                                  JSON.stringify(currentItem)
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["goToProfile"] = true
                        ? (() => {
                            const actionArgs = { destination: `/profile` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToProfile"] != null &&
                        typeof $steps["goToProfile"] === "object" &&
                        typeof $steps["goToProfile"].then === "function"
                      ) {
                        $steps["goToProfile"] = await $steps["goToProfile"];
                      }
                    }}
                  >
                    <GroupSvgIcon
                      className={classNames(projectcss.all, sty.svg__idyJa)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5E8Pf
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__trWjz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tlJB
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wXPgI
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return `${currentItem.name} ${currentItem.last_name}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0628\u0647\u0646\u0627\u0645 \u062d\u0633\u06cc\u0646\u06cc \u0632\u0627\u062f\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gOxwb
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return `(${currentItem.id})`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0628\u0647\u0646\u0627\u0645 \u062d\u0633\u06cc\u0646\u06cc \u0632\u0627\u062f\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aKvbe
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.mobile;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "09228951264";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kJVoA,
                          "dateshow"
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                (currentItem.toman * 1000).toLocaleString() +
                                " تومان "
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "100 \u062a\u0648\u0645\u0627\u0646";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  const child$Props = {
                    arrow: true,
                    className: classNames("__wab_instance", sty.popover2),
                    color: hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "#101729"
                      : "#101729",
                    content: (
                      <React.Fragment>
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.button4
                            ),
                            color: "clear",
                            loadingviow: generateStateValueProp($state, [
                              "button4",
                              __plasmic_idx_0,
                              "loadingviow"
                            ]),
                            onLoadingviowChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button4",
                                  __plasmic_idx_0,
                                  "loadingviow"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            showStartIcon: true,
                            size: "compact",
                            startIcon: (
                              <Icon111Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___9Elgn
                                )}
                                role={"img"}
                              />
                            )
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "button4[].loadingviow",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return $state.loadingviow;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Button
                              data-plasmic-name={"button4"}
                              data-plasmic-override={overrides.button4}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fXzzv
                                )}
                              >
                                {"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                              </div>
                            </Button>
                          );
                        })()}
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.button3
                            ),
                            color: "clear",
                            loadingviow: generateStateValueProp($state, [
                              "button3",
                              __plasmic_idx_0,
                              "loadingviow"
                            ]),
                            onClick: async event => {
                              const $steps = {};

                              $steps["updateCustomerId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["customerId"]
                                      },
                                      operation: 0,
                                      value: currentItem.id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateCustomerId"] != null &&
                                typeof $steps["updateCustomerId"] ===
                                  "object" &&
                                typeof $steps["updateCustomerId"].then ===
                                  "function"
                              ) {
                                $steps["updateCustomerId"] =
                                  await $steps["updateCustomerId"];
                              }

                              $steps["updateExitModalOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["exitModal", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateExitModalOpen"] != null &&
                                typeof $steps["updateExitModalOpen"] ===
                                  "object" &&
                                typeof $steps["updateExitModalOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateExitModalOpen"] =
                                  await $steps["updateExitModalOpen"];
                              }
                            },
                            onLoadingviowChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button3",
                                  __plasmic_idx_0,
                                  "loadingviow"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            showStartIcon: true,
                            size: "compact",
                            startIcon: (
                              <Icon110Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0Ecwg
                                )}
                                role={"img"}
                              />
                            )
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "button3[].loadingviow",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return $state.loadingviow;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Button
                              data-plasmic-name={"button3"}
                              data-plasmic-override={overrides.button3}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3Ka0Q
                                )}
                              >
                                {"\u062d\u0630\u0641   "}
                              </div>
                            </Button>
                          );
                        })()}
                      </React.Fragment>
                    ),
                    contentText: "Popover contents",
                    defaultOpen: false,
                    defaultStylesClassName: classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      styleTokensClassNames
                    ),
                    mouseEnterDelay: 0,
                    mouseLeaveDelay: 0,
                    onOpenChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "popover2",
                        __plasmic_idx_0,
                        "open"
                      ]).apply(null, eventArgs);
                    },
                    open: generateStateValueProp($state, [
                      "popover2",
                      __plasmic_idx_0,
                      "open"
                    ]),
                    placement: "bottom",
                    popoverScopeClassName: sty["popover2__popover"],
                    title: null,
                    trigger: "click"
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "open",
                        plasmicStateName: "popover2[].open"
                      }
                    ],
                    [__plasmic_idx_0],
                    undefined ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "popover2[].open",
                        initFunc: ({ $props, $state, $queries }) => false
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <AntdPopover
                      data-plasmic-name={"popover2"}
                      data-plasmic-override={overrides.popover2}
                      {...child$Props}
                    >
                      <Icon109Icon
                        className={classNames(projectcss.all, sty.svg___21TtL)}
                        role={"img"}
                      />
                    </AntdPopover>
                  );
                })()}
              </div>
            );
          })}
          {(() => {
            try {
              return $state.isLoading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__skqH)}>
              <div className={classNames(projectcss.all, sty.freeBox__benrK)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kObIq
                  )}
                >
                  {
                    "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__maRdk,
                    "line-container"
                  )}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__wx85Y,
                      "line line-1"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__xZfWv,
                      "line line-2"
                    )}
                  />
                </div>
              </div>
            </section>
          ) : null}
        </div>
      </div>
      <section className={classNames(projectcss.all, sty.section__rOyZh)}>
        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          <PlasmicIcon__
            PlasmicIconType={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? Icon10Icon
                : Icon3Icon
            }
            className={classNames(projectcss.all, sty.svg__yjkss)}
            onClick={async event => {
              const $steps = {};

              $steps["runBack"] = true
                ? (() => {
                    const actionArgs = { eventRef: $props["back"] };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runBack"] != null &&
                typeof $steps["runBack"] === "object" &&
                typeof $steps["runBack"].then === "function"
              ) {
                $steps["runBack"] = await $steps["runBack"];
              }
            }}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__j6NWb
            )}
          >
            {"\u0645\u0634\u062a\u0631\u06cc\u0627\u0646 \u0634\u0645\u0627"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zobp1)}>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={"white"}
              endIcon={
                <Icon12Icon
                  className={classNames(projectcss.all, sty.svg___2Vn2C)}
                  role={"img"}
                />
              }
              loadingviow={generateStateValueProp($state, [
                "button",
                "loadingviow"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["runOpenNew"] = true
                  ? (() => {
                      const actionArgs = { eventRef: $props["openNew"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOpenNew"] != null &&
                  typeof $steps["runOpenNew"] === "object" &&
                  typeof $steps["runOpenNew"].then === "function"
                ) {
                  $steps["runOpenNew"] = await $steps["runOpenNew"];
                }
              }}
              onLoadingviowChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "loadingviow"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              shape={"rounded"}
              showEndIcon={true}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qkVmK
                )}
              >
                {"\u062c\u062f\u06cc\u062f"}
              </div>
            </Button>
          </div>
        </div>
      </section>
      <div className={classNames(projectcss.all, sty.freeBox__ng6Aa)} />

      {(() => {
        try {
          return !$state.loading && $state.customer.length == 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          data-plasmic-name={"no"}
          data-plasmic-override={overrides.no}
          className={classNames(projectcss.all, sty.no)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/babarkat/images/image76.svg",
              fullWidth: 24,
              fullHeight: 24,
              aspectRatio: 1
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vgF3L
            )}
          >
            {
              "\u0645\u0634\u062a\u0631\u06cc \u0646\u062f\u0627\u0631\u06cc\u062f"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__v5Uuh
            )}
          >
            {
              "\u0627\u0648\u0644\u06cc\u0646 \u0645\u0634\u062a\u0631\u06cc \u062e\u0648\u062f \u0631\u0627 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u06cc\u062f."
            }
          </div>
        </div>
      ) : null}
      <AntdModal
        data-plasmic-name={"exitModal"}
        data-plasmic-override={overrides.exitModal}
        className={classNames("__wab_instance", sty.exitModal)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
        hideFooter={true}
        maskClosable={true}
        modalContentClassName={classNames({ [sty["pcls_WPfDqsBfkP3K"]]: true })}
        modalScopeClassName={sty["exitModal__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["exitModal", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["exitModal", "open"])}
        title={null}
        trigger={null}
        width={"520"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__jJnpi)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___9DTxh
            )}
          >
            {
              "\u0627\u0632 \u062d\u0630\u0641 \u06a9\u0627\u0631\u0628\u0631 \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u062f\u061f"
            }
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__c3WFd)}>
          <Button
            data-plasmic-name={"button6"}
            data-plasmic-override={overrides.button6}
            className={classNames("__wab_instance", sty.button6)}
            color={"red"}
            loadingviow={generateStateValueProp($state, [
              "button6",
              "loadingviow"
            ])}
            onClick={async event => {
              const $steps = {};

              $steps["updateModal3Open"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["exitModal", "open"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModal3Open"] != null &&
                typeof $steps["updateModal3Open"] === "object" &&
                typeof $steps["updateModal3Open"].then === "function"
              ) {
                $steps["updateModal3Open"] = await $steps["updateModal3Open"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "PUT",
                        "https://n8n.babarkat.com/webhook/saraf/customer/add",
                        undefined,
                        (() => {
                          try {
                            return {
                              _customer: $state.customerId,
                              userToken: $state.token
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] =
                  await $steps["invokeGlobalAction"];
              }

              $steps["invokeGlobalAction2"] =
                $steps.invokeGlobalAction?.data?.success == true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "success",
                          "\u0645\u0634\u062a\u0631\u06cc \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062d\u0630\u0641 \u0634\u062f."
                        ]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction2"] != null &&
                typeof $steps["invokeGlobalAction2"] === "object" &&
                typeof $steps["invokeGlobalAction2"].then === "function"
              ) {
                $steps["invokeGlobalAction2"] =
                  await $steps["invokeGlobalAction2"];
              }
            }}
            onLoadingviowChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button6", "loadingviow"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            {"\u062d\u0630\u0641"}
          </Button>
          <Button
            data-plasmic-name={"button7"}
            data-plasmic-override={overrides.button7}
            className={classNames("__wab_instance", sty.button7)}
            color={"sand"}
            loadingviow={generateStateValueProp($state, [
              "button7",
              "loadingviow"
            ])}
            onClick={async event => {
              const $steps = {};

              $steps["updateModal3Open"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["exitModal", "open"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModal3Open"] != null &&
                typeof $steps["updateModal3Open"] === "object" &&
                typeof $steps["updateModal3Open"].then === "function"
              ) {
                $steps["updateModal3Open"] = await $steps["updateModal3Open"];
              }
            }}
            onLoadingviowChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button7", "loadingviow"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            {"\u0627\u0646\u0635\u0631\u0627\u0641"}
          </Button>
        </div>
      </AntdModal>
      <BackHandler
        data-plasmic-name={"backHandler"}
        data-plasmic-override={overrides.backHandler}
        active={args.active}
        className={classNames("__wab_instance", sty.backHandler)}
        onBack={async () => {
          const $steps = {};

          $steps["runBack"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["back"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runBack"] != null &&
            typeof $steps["runBack"] === "object" &&
            typeof $steps["runBack"].then === "function"
          ) {
            $steps["runBack"] = await $steps["runBack"];
          }
        }}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox___537YH)}
        id={"click"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "input",
    "main",
    "loading2",
    "popover2",
    "button4",
    "button3",
    "header",
    "button",
    "no",
    "img",
    "exitModal",
    "button6",
    "button7",
    "backHandler"
  ],
  sideEffect: ["sideEffect"],
  input: ["input"],
  main: ["main", "loading2", "popover2", "button4", "button3"],
  loading2: ["loading2"],
  popover2: ["popover2", "button4", "button3"],
  button4: ["button4"],
  button3: ["button3"],
  header: ["header", "button"],
  button: ["button"],
  no: ["no", "img"],
  img: ["img"],
  exitModal: ["exitModal", "button6", "button7"],
  button6: ["button6"],
  button7: ["button7"],
  backHandler: ["backHandler"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  input: typeof Input;
  main: "div";
  loading2: "div";
  popover2: typeof AntdPopover;
  button4: typeof Button;
  button3: typeof Button;
  header: "div";
  button: typeof Button;
  no: "div";
  img: typeof PlasmicImg__;
  exitModal: typeof AntdModal;
  button6: typeof Button;
  button7: typeof Button;
  backHandler: typeof BackHandler;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCustomerComponnet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCustomerComponnet__VariantsArgs;
    args?: PlasmicCustomerComponnet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicCustomerComponnet__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicCustomerComponnet__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCustomerComponnet__ArgProps,
          internalVariantPropNames: PlasmicCustomerComponnet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCustomerComponnet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCustomerComponnet";
  } else {
    func.displayName = `PlasmicCustomerComponnet.${nodeName}`;
  }
  return func;
}

export const PlasmicCustomerComponnet = Object.assign(
  // Top-level PlasmicCustomerComponnet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    input: makeNodeComponent("input"),
    main: makeNodeComponent("main"),
    loading2: makeNodeComponent("loading2"),
    popover2: makeNodeComponent("popover2"),
    button4: makeNodeComponent("button4"),
    button3: makeNodeComponent("button3"),
    header: makeNodeComponent("header"),
    button: makeNodeComponent("button"),
    no: makeNodeComponent("no"),
    img: makeNodeComponent("img"),
    exitModal: makeNodeComponent("exitModal"),
    button6: makeNodeComponent("button6"),
    button7: makeNodeComponent("button7"),
    backHandler: makeNodeComponent("backHandler"),

    // Metadata about props expected for PlasmicCustomerComponnet
    internalVariantProps: PlasmicCustomerComponnet__VariantProps,
    internalArgProps: PlasmicCustomerComponnet__ArgProps
  }
);

export default PlasmicCustomerComponnet;
/* prettier-ignore-end */
