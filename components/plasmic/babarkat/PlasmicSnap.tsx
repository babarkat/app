// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: ZCvnmuylbYRk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import Boxselect from "../../Boxselect"; // plasmic-import: zrEzOXBZcn1e/component
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: OG1SoduAPhRs/codeComponent

import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicSnap.module.css"; // plasmic-import: ZCvnmuylbYRk/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dXgXrJG5lp3Z/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: ABwvUbBMtZqM/icon
import BabarkatlogoCopy2SvgIcon from "./icons/PlasmicIcon__BabarkatlogoCopy2Svg"; // plasmic-import: T8YZBqDbfTTx/icon
import RadioButtonCheckedSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__RadioButtonCheckedSvgrepoCom2Svg"; // plasmic-import: txDOSA20FGud/icon
import CheckCircleSvgrepoComSvgIcon from "./icons/PlasmicIcon__CheckCircleSvgrepoComSvg"; // plasmic-import: 3lQ_sc0p8wap/icon
import LineXlSvgrepoComSvgIcon from "./icons/PlasmicIcon__LineXlSvgrepoComSvg"; // plasmic-import: PKDhRR5tO_9t/icon
import Group4SvgIcon from "./icons/PlasmicIcon__Group4Svg"; // plasmic-import: 8w6sGTNqgCIT/icon
import Group7SvgIcon from "./icons/PlasmicIcon__Group7Svg"; // plasmic-import: o5fEPeaAf9nA/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jg6gpiNRWEQd/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon

import { v4 as __lib_uuid__v4 } from "uuid";

createPlasmicElementProxy;

export type PlasmicSnap__VariantMembers = {
  stepscharg: "step3";
};
export type PlasmicSnap__VariantsArgs = {
  stepscharg?: SingleChoiceArg<"step3">;
};
type VariantPropType = keyof PlasmicSnap__VariantsArgs;
export const PlasmicSnap__VariantProps = new Array<VariantPropType>(
  "stepscharg"
);

export type PlasmicSnap__ArgsType = {};
type ArgPropType = keyof PlasmicSnap__ArgsType;
export const PlasmicSnap__ArgProps = new Array<ArgPropType>();

export type PlasmicSnap__OverridesType = {
  chargeStep1?: Flex__<"div">;
  header?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  wallet?: Flex__<"div">;
  steps?: Flex__<"div">;
  مشخصات?: Flex__<"div">;
  selected?: Flex__<"svg">;
  تاییدخرید?: Flex__<"div">;
  unselected2?: Flex__<"svg">;
  fragmentInput?: Flex__<typeof Input>;
  fragmentInput2?: Flex__<typeof Input>;
  operators?: Flex__<"div">;
  boxselect?: Flex__<typeof Boxselect>;
  operators3?: Flex__<"div">;
  boxselect3?: Flex__<typeof Boxselect>;
  operators4?: Flex__<"div">;
  boxselect4?: Flex__<typeof Boxselect>;
  backstep2?: Flex__<typeof Button>;
  backstep3?: Flex__<typeof Button>;
  step1Next?: Flex__<typeof Button>;
  step2Next?: Flex__<typeof Button>;
  modal?: Flex__<typeof AntdModal>;
  modal2?: Flex__<typeof AntdModal>;
  lottie?: Flex__<typeof LottieWrapper>;
  timer?: Flex__<typeof Timer>;
  embedHtml?: Flex__<typeof Embed>;
  commissionBabarkat?: Flex__<typeof ApiRequest>;
};

export interface DefaultSnapProps {}

const $$ = {
  uuid: {
    v4: __lib_uuid__v4
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSnap__RenderFunc(props: {
  variants: PlasmicSnap__VariantsArgs;
  args: PlasmicSnap__ArgsType;
  overrides: PlasmicSnap__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "operators2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "MTN",
            nameop: "Irancell",
            description:
              "\u0634\u0627\u0631\u0698 \u0627\u06cc\u0631\u0627\u0646\u0633\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image19.svg",
            codes: [
              "0900",
              "0901",
              "0902",
              "0903",
              "0904",
              "0905",
              "0930",
              "0933",
              "0935",
              "0936",
              "0937",
              "0938",
              "0939"
            ],
            chargeRange: { min: 1000, max: 200000, customAmounts: true },
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [1000, 5000, 10000, 20000, 50000]
              },
              {
                type: "amazing",
                text: "\u0634\u06af\u0641\u062a\u200c\u0627\u0646\u06af\u06cc\u0632",
                chargeAmounts: [5000, 10000, 20000, 30000]
              }
            ]
          },
          {
            name: "MCI",
            nameop: "HamrahAval",
            description:
              "\u0634\u0627\u0631\u0698 \u0647\u0645\u0631\u0627\u0647 \u0627\u0648\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image20.svg",
            codes: [
              "0910",
              "0911",
              "0912",
              "0913",
              "0914",
              "0915",
              "0916",
              "0917",
              "0918",
              "0919",
              "0990",
              "0991",
              "0992"
            ],
            chargeRange: {
              min: 1000,
              max: 100000,
              customAmounts: false,
              amountStep: 1000
            },
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [5000, 10000, 20000, 100000]
              }
            ]
          },
          {
            name: "RTL",
            nameop: "RighTel ",
            description:
              "\u0634\u0627\u0631\u0698 \u0631\u0627\u06cc\u062a\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image22.svg",
            codes: ["0920", "0921", "0922"],
            chargeRange: { min: 1000, max: 150000, customAmounts: true },
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [1000, 5000, 10000, 20000, 50000]
              },
              {
                type: "amazing",
                text: "\u0634\u06af\u0641\u062a\u200c\u0627\u0646\u06af\u06cc\u0632",
                chargeAmounts: [2000, 5000, 10000, 20000, 50000]
              }
            ]
          },
          {
            name: "SHT",
            nameop: "Shatel",
            description:
              "\u0634\u0627\u0631\u0698 \u0634\u0627\u062a\u0644 \u0645\u0648\u0628\u0627\u06cc\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image21.svg",
            codes: ["0998", "0999"],
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [1090, 2180, 5450, 10900, 21800, 54500]
              }
            ]
          }
        ]
      },
      {
        path: "operatorselect",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => -1
      },
      {
        path: "boxselect[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "typecharge",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "boxselect[].disable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "chargeType2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "fragmentInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "boxselect3[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "boxselect3[].disable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "amont",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 100000
      },
      {
        path: "stepscharg",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stepscharg
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "stepscharg", "step3") ? false : false
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mojody",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userinfo.toman;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "uuid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "stepscharg", "step3") ? false : false
      },
      {
        path: "infopardakt",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "userinfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userbabarcat");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pardakhtid",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "boxselect4[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "boxselect4[].disable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(sessionStorage.getItem("userbabarcatToken"))
                .value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "commissionBabarkat.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commissionBabarkat.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commissionBabarkat.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsosEvNkdp6Zt6()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSnap.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSnap.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSnap.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"chargeStep1"}
          data-plasmic-override={overrides.chargeStep1}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.chargeStep1,
            hasVariant($state, "stepscharg", "step3") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
              ? "page"
              : hasVariant($state, "stepscharg", "step3")
              ? "page"
              : undefined,
            {
              [sty.chargeStep1stepscharg_step3]: hasVariant(
                $state,
                "stepscharg",
                "step3"
              )
            }
          )}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__utlDe, {
              [sty.freeBoxstepscharg_step3__utlDezZ317]: hasVariant(
                $state,
                "stepscharg",
                "step3"
              )
            })}
          >
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header, {
                [sty.headerstepscharg_step3]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
            >
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? Icon10Icon
                    : Icon3Icon
                }
                className={classNames(projectcss.all, sty.svg___0OtwH, {
                  [sty.svgstepscharg_step3___0OtwHzZ317]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__suHcX,
                  {
                    [sty.textstepscharg_step3__suHcXzZ317]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  }
                )}
              >
                {
                  "\u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647 \u0627\u0633\u0646\u067e"
                }
              </div>
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? Icon9Icon
                    : Icon9Icon
                }
                className={classNames(projectcss.all, sty.svg__pGQzv, {
                  [sty.svgstepscharg_step3__pGQzvzZ317]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                role={"img"}
              />
            </div>
            <Reveal
              data-plasmic-name={"reveal"}
              data-plasmic-override={overrides.reveal}
              cascade={false}
              className={classNames("__wab_instance", sty.reveal, {
                [sty.revealstepscharg_step3]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
              effect={"fade"}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"wallet"}
                data-plasmic-override={overrides.wallet}
                hasGap={true}
                className={classNames(projectcss.all, sty.wallet, {
                  [sty.walletstepscharg_step3]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <BabarkatlogoCopy2SvgIcon
                  className={classNames(projectcss.all, sty.svg__p6Ujp, {
                    [sty.svgstepscharg_step3__p6UjpzZ317]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"steps"}
                  data-plasmic-override={overrides.steps}
                  className={classNames(projectcss.all, sty.steps, {
                    [sty.stepsstepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"\u0645\u0634\u062e\u0635\u0627\u062a"}
                    data-plasmic-override={overrides.مشخصات}
                    className={classNames(projectcss.all, sty.مشخصات)}
                  >
                    <PlasmicIcon__
                      data-plasmic-name={"selected"}
                      data-plasmic-override={overrides.selected}
                      PlasmicIconType={
                        hasVariant($state, "stepscharg", "step3")
                          ? CheckCircleSvgrepoComSvgIcon
                          : RadioButtonCheckedSvgrepoCom2SvgIcon
                      }
                      className={classNames(projectcss.all, sty.selected, {
                        [sty.selectedstepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2CRi,
                        {
                          [sty.textstepscharg_step3___2CRIzZ317]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {"\u0645\u0634\u062e\u0635\u0627\u062a"}
                    </div>
                  </div>
                  <LineXlSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___1SBz2)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={
                      "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f"
                    }
                    data-plasmic-override={overrides.تاییدخرید}
                    className={classNames(projectcss.all, sty.تاییدخرید)}
                  >
                    <RadioButtonCheckedSvgrepoCom2SvgIcon
                      data-plasmic-name={"unselected2"}
                      data-plasmic-override={overrides.unselected2}
                      className={classNames(projectcss.all, sty.unselected2, {
                        [sty.unselected2stepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jIlbO,
                        {
                          [sty.textstepscharg_step3__jIlbOzZ317]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "stepscharg", "step3")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u062e\u0631\u06cc\u062f"
                        : "\u062a\u0627\u0626\u06cc\u062f \u062e\u0631\u06cc\u062f"}
                    </div>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__k1Kvz, {
                    [sty.freeBoxstepscharg_step3__k1KvZzZ317]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vprau,
                      {
                        [sty.textstepscharg_step3__vprauzZ317]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "stepscharg", "step3")
                      ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                      : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__afbuj, {
                      [sty.freeBoxstepscharg_step3__afbujzZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    {(
                      hasVariant($state, "stepscharg", "step3") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___87TVs,
                          {
                            [sty.textstepscharg_step3___87TVszZ317]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u0639\u0646\u0648\u0627\u0646 \u067e\u0631\u062f\u0627\u062e\u062a"
                          : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                      </div>
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5P0MN
                      )}
                    >
                      {
                        "\u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647 \u0627\u0633\u0646\u067e"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9WxZl, {
                      [sty.freeBoxstepscharg_step3___9WxZlzZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    {(
                      hasVariant($state, "stepscharg", "step3") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__thz2P,
                          {
                            [sty.textstepscharg_step3__thz2PzZ317]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                          : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                      </div>
                    ) : null}
                    {(
                      hasVariant($state, "stepscharg", "step3") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__udvOm,
                          {
                            [sty.textstepscharg_step3__udvOmzZ317]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.number;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                        )}
                      </div>
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vWsap, {
                      [sty.freeBoxstepscharg_step3__vWsapzZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    {(
                      hasVariant($state, "stepscharg", "step3") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fUxQ2,
                          {
                            [sty.textstepscharg_step3__fUxQ2ZZ317]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a"
                          : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                      </div>
                    ) : null}
                    {(
                      hasVariant($state, "stepscharg", "step3") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___91CL,
                          {
                            [sty.textstepscharg_step3___91CLzZ317]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  $state.amont.toLocaleString("en") + " تومان "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0628\u0644\u063a \u0646\u0647\u0627\u06cc\u06cc";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                        )}
                      </div>
                    ) : null}
                  </div>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2Jf0J)}
                >
                  <Input
                    data-plasmic-name={"fragmentInput"}
                    data-plasmic-override={overrides.fragmentInput}
                    className={classNames("__wab_instance", sty.fragmentInput, {
                      [sty.fragmentInputstepscharg_step3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput",
                        "value"
                      ]).apply(null, eventArgs);
                      (async value => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    let __plasmic_ret = undefined;
                                    for (
                                      let operatorIndex = 0;
                                      operatorIndex < $state.operators2.length;
                                      operatorIndex++
                                    ) {
                                      const operator =
                                        $state.operators2[operatorIndex];
                                      for (let code of operator.codes) {
                                        if (
                                          $state.fragmentInput.value.startsWith(
                                            code
                                          )
                                        ) {
                                          for (
                                            let i = 0;
                                            i < $state.boxselect.length;
                                            i++
                                          ) {
                                            $state.boxselect[i].select = false;
                                          }
                                          for (
                                            let i = 0;
                                            i < $state.boxselect4.length;
                                            i++
                                          ) {
                                            $state.boxselect4[i].select = false;
                                          }
                                          $state.boxselect[
                                            operatorIndex
                                          ].select = true;
                                          $state.boxselect4[0].select = true;
                                          $state.operatorselect = operatorIndex;
                                          __plasmic_ret = $state.typecharge = 0;
                                        }
                                      }
                                    }
                                    return __plasmic_ret;
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["runCode2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if ($state.fragmentInput.value.length < 4) {
                                      for (
                                        let i = 0;
                                        i < $state.boxselect.length;
                                        i++
                                      ) {
                                        $state.boxselect[i].select = false;
                                      }
                                      return ($state.operatorselect = -1);
                                    }
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u0645\u0642\u0635\u062f"
                    }
                    type={"tel"}
                    value={generateStateValueProp($state, [
                      "fragmentInput",
                      "value"
                    ])}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jiteR, {
                      [sty.imgstepscharg_step3__jiteRzZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    displayHeight={"35px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"35px"}
                    loading={"lazy"}
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return (() => {
                                if ($state.operatorselect == -1)
                                  return "https://www.svgrepo.com/show/474990/sim-card.svg";
                                else
                                  return $state.operators2[
                                    $state.operatorselect
                                  ].logoUrl;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return (() => {
                                if ($state.operatorselect == -1)
                                  return "https://www.svgrepo.com/show/474990/sim-card.svg";
                                else
                                  return $state.operators2[
                                    $state.operatorselect
                                  ].logoUrl;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                    }
                  />
                </div>
                {false ? (
                  <Input
                    data-plasmic-name={"fragmentInput2"}
                    data-plasmic-override={overrides.fragmentInput2}
                    className={classNames("__wab_instance", sty.fragmentInput2)}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput2",
                        "value"
                      ]).apply(null, eventArgs);
                      (async value => {
                        const $steps = {};

                        $steps["updateAmont"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["amont"]
                                },
                                operation: 0,
                                value: $state.fragmentInput2.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAmont"] != null &&
                          typeof $steps["updateAmont"] === "object" &&
                          typeof $steps["updateAmont"].then === "function"
                        ) {
                          $steps["updateAmont"] = await $steps["updateAmont"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"\u062a\u0648\u0645\u0627\u0646"}
                    type={"number"}
                    value={generateStateValueProp($state, [
                      "fragmentInput2",
                      "value"
                    ])}
                  />
                ) : null}
              </Stack__>
              <div
                className={classNames(projectcss.all, sty.freeBox___3KmGp, {
                  [sty.freeBoxstepscharg_step3___3KmGPzZ317]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hOx7T
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0627\u067e\u0631\u0627\u062a\u0648\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                    : "\u0627\u067e\u0631\u0627\u062a\u0648\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"operators"}
                  data-plasmic-override={overrides.operators}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.operators)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.operators2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const operatoritem = __plasmic_item_0;
                    const operatorIndex = __plasmic_idx_0;
                    return (() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.boxselect),
                        disable2: generateStateValueProp($state, [
                          "boxselect",
                          __plasmic_idx_0,
                          "disable2"
                        ]),
                        key: operatorIndex,
                        onClick: async event => {
                          const $steps = {};

                          $steps["runCode"] = !$state.boxselect[0].disable2
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      for (
                                        let i = 0;
                                        i < $state.boxselect.length;
                                        i++
                                      ) {
                                        $state.boxselect[i].select = false;
                                      }
                                      $state.boxselect[operatorIndex].select =
                                        true;
                                      $state.boxselect2[0].select = true;
                                      $state.operatorselect = operatorIndex;
                                      for (
                                        let i = 0;
                                        i < $state.boxselect2.length;
                                        i++
                                      ) {
                                        $state.boxselect2[i].select = false;
                                      }
                                      $state.boxselect2[0].select = true;
                                      return ($state.typecharge = 0);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        },
                        onDisable2Change: generateStateOnChangeProp($state, [
                          "boxselect",
                          __plasmic_idx_0,
                          "disable2"
                        ]),
                        onSelectChange: generateStateOnChangeProp($state, [
                          "boxselect",
                          __plasmic_idx_0,
                          "select"
                        ]),
                        select: generateStateValueProp($state, [
                          "boxselect",
                          __plasmic_idx_0,
                          "select"
                        ])
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "boxselect[].select",
                            initFunc: ({ $props, $state, $queries }) =>
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? false
                                : false
                          },
                          {
                            name: "boxselect[].disable2",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return (
                                    $state.fragmentInput.value.length != 11
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <Boxselect
                          data-plasmic-name={"boxselect"}
                          data-plasmic-override={overrides.boxselect}
                          {...child$Props}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img___50T2F, {
                              [sty.imgstepscharg_step3___50T2FzZ317]:
                                hasVariant($state, "stepscharg", "step3")
                            })}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "50px"
                                : "60px"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return operatoritem.logoUrl;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </Boxselect>
                      );
                    })();
                  })}
                </Stack__>
              </div>
              {false ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___2VgrC, {
                    [sty.freeBoxstepscharg_step3___2VgrCzZ317]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__raLk,
                      {
                        [sty.textstepscharg_step3__raLkzZ317]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "stepscharg", "step3")
                      ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                      : ""}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"operators3"}
                    data-plasmic-override={overrides.operators3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.operators3, {
                      [sty.operators3stepscharg_step3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.operators2[$state.operatorselect]
                            .services[$state.typecharge].chargeAmounts;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const amonttem = __plasmic_item_0;
                      const amontIndex = __plasmic_idx_0;
                      return (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.boxselect3,
                            {
                              [sty.boxselect3stepscharg_step3]: hasVariant(
                                $state,
                                "stepscharg",
                                "step3"
                              )
                            }
                          ),
                          disable2: generateStateValueProp($state, [
                            "boxselect3",
                            __plasmic_idx_0,
                            "disable2"
                          ]),
                          key: amontIndex,
                          onClick: async event => {
                            const $steps = {};

                            $steps["runCode"] = !$state.boxselect3[0].disable2
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        for (
                                          let i = 0;
                                          i < $state.boxselect3.length;
                                          i++
                                        ) {
                                          $state.boxselect3[i].select = false;
                                        }
                                        $state.boxselect3[amontIndex].select =
                                          true;
                                        $state.amont = amonttem;
                                        return ($state.fragmentInput2.value =
                                          amonttem);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          },
                          onDisable2Change: generateStateOnChangeProp($state, [
                            "boxselect3",
                            __plasmic_idx_0,
                            "disable2"
                          ]),
                          onSelectChange: generateStateOnChangeProp($state, [
                            "boxselect3",
                            __plasmic_idx_0,
                            "select"
                          ]),
                          select: generateStateValueProp($state, [
                            "boxselect3",
                            __plasmic_idx_0,
                            "select"
                          ])
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "boxselect3[].select",
                              initFunc: ({ $props, $state, $queries }) =>
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? false
                                  : false
                            },
                            {
                              name: "boxselect3[].disable2",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return (
                                      $state.fragmentInput.value.length != 11
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Boxselect
                            data-plasmic-name={"boxselect3"}
                            data-plasmic-override={overrides.boxselect3}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__f05Yr
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7Un2
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return amonttem.toLocaleString("en-US");
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </Boxselect>
                        );
                      })();
                    })}
                  </Stack__>
                </div>
              ) : null}
              <div
                className={classNames(projectcss.all, sty.freeBox__qrsqM, {
                  [sty.freeBoxstepscharg_step3__qrsqMzZ317]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hRm2E,
                    {
                      [sty.textstepscharg_step3__hRm2EzZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "stepscharg", "step3")
                    ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                    : "\u0645\u0628\u0644\u063a \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u06cc (\u062a\u0648\u0645\u0627\u0646)"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"operators4"}
                  data-plasmic-override={overrides.operators4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.operators4, {
                    [sty.operators4stepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [100000, 200000, 300000, 500000, 1000000];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const amonttem = __plasmic_item_0;
                    const amontIndex = __plasmic_idx_0;
                    return (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.boxselect4,
                          {
                            [sty.boxselect4stepscharg_step3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        ),
                        disable2: generateStateValueProp($state, [
                          "boxselect4",
                          __plasmic_idx_0,
                          "disable2"
                        ]),
                        key: amontIndex,
                        onClick: async event => {
                          const $steps = {};

                          $steps["runCode"] = !$state.boxselect3[0].disable2
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      for (
                                        let i = 0;
                                        i < $state.boxselect4.length;
                                        i++
                                      ) {
                                        $state.boxselect4[i].select = false;
                                      }
                                      $state.boxselect4[amontIndex].select =
                                        true;
                                      $state.amont = amonttem;
                                      return ($state.fragmentInput2.value =
                                        amonttem);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        },
                        onDisable2Change: generateStateOnChangeProp($state, [
                          "boxselect4",
                          __plasmic_idx_0,
                          "disable2"
                        ]),
                        onSelectChange: generateStateOnChangeProp($state, [
                          "boxselect4",
                          __plasmic_idx_0,
                          "select"
                        ]),
                        select: generateStateValueProp($state, [
                          "boxselect4",
                          __plasmic_idx_0,
                          "select"
                        ])
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "boxselect4[].select",
                            initFunc: ({ $props, $state, $queries }) =>
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? false
                                : false
                          },
                          {
                            name: "boxselect4[].disable2",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return (
                                    $state.fragmentInput.value.length != 11
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <Boxselect
                          data-plasmic-name={"boxselect4"}
                          data-plasmic-override={overrides.boxselect4}
                          {...child$Props}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cKa6P
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nRsc
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      amonttem.toLocaleString("en-US") +
                                      " تومان "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </Boxselect>
                      );
                    })();
                  })}
                </Stack__>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3UNf, {
                  [sty.freeBoxstepscharg_step3___3UNfzZ317]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                {(
                  hasVariant($state, "stepscharg", "step3")
                    ? (() => {
                        try {
                          return !$state.disable;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nWuju, {
                      [sty.freeBoxstepscharg_step3__nWujuzZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDisable"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["disable"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDisable"] != null &&
                        typeof $steps["updateDisable"] === "object" &&
                        typeof $steps["updateDisable"].then === "function"
                      ) {
                        $steps["updateDisable"] = await $steps["updateDisable"];
                      }

                      $steps["updateUuid"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["uuid"]
                              },
                              operation: 0,
                              value: $$.uuid.v4().replace(/[^0-9]/g, "")
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUuid"] != null &&
                        typeof $steps["updateUuid"] === "object" &&
                        typeof $steps["updateUuid"].then === "function"
                      ) {
                        $steps["updateUuid"] = await $steps["updateUuid"];
                      }

                      $steps["invokeGlobalAction2"] =
                        $state.mojody < $state.amont
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "warning",
                                  "\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0634\u0645\u0627 \u06a9\u0627\u0641\u06cc \u0646\u0645\u06cc \u0628\u0627\u0634\u062f.",
                                  undefined,
                                  undefined,
                                  "topRight"
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction4"] =
                        $state.amont < $state.mojody
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.babarkat.com/webhook/Babarkat/transaction",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        type: "snap",
                                        mobile: $state.number,
                                        price: $state.amont,
                                        origin: "snap_charge",
                                        originId: $state.uuid + "",
                                        priceType: "toman",
                                        userToken: $state.token
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction4"] != null &&
                        typeof $steps["invokeGlobalAction4"] === "object" &&
                        typeof $steps["invokeGlobalAction4"].then === "function"
                      ) {
                        $steps["invokeGlobalAction4"] = await $steps[
                          "invokeGlobalAction4"
                        ];
                      }

                      $steps["updatePardakhtid"] =
                        $steps.invokeGlobalAction4?.data[0]?.success == true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["pardakhtid"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction4.data[0].id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updatePardakhtid"] != null &&
                        typeof $steps["updatePardakhtid"] === "object" &&
                        typeof $steps["updatePardakhtid"].then === "function"
                      ) {
                        $steps["updatePardakhtid"] = await $steps[
                          "updatePardakhtid"
                        ];
                      }

                      $steps["invokeGlobalAction"] =
                        $state.amont < $state.mojody &&
                        $steps.invokeGlobalAction4?.data[0]?.success == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "GET",
                                  "https://n8n.babarkat.com/webhook/telegram_Bot",
                                  (() => {
                                    try {
                                      return {
                                        text:
                                          "\nخرید شارژ اسنپ با موفقیت انجام شد.\n مبلغ: " +
                                          $state.amont +
                                          " \nنام: " +
                                          $state.userinfo.last_name +
                                          " \nشماره: " +
                                          $state.number +
                                          " \nتوکن: " +
                                          $state.token +
                                          "" +
                                          " \nشناسه تراکنش: " +
                                          $state.uuid +
                                          ""
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  undefined
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction5"] =
                        $steps.invokeGlobalAction4?.data[0]?.success == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.babarkat.com/webhook/Babarkat/transaction",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        id: $state.pardakhtid,
                                        trackingId: $state.uuid,
                                        userToken: $state.token
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction5"] != null &&
                        typeof $steps["invokeGlobalAction5"] === "object" &&
                        typeof $steps["invokeGlobalAction5"].then === "function"
                      ) {
                        $steps["invokeGlobalAction5"] = await $steps[
                          "invokeGlobalAction5"
                        ];
                      }

                      $steps["updateError"] =
                        $steps.invokeGlobalAction4?.data[0]?.success == false &&
                        $steps.invokeGlobalAction4?.data[0]?.message
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["error"]
                                },
                                operation: 0,
                                value:
                                  $steps.invokeGlobalAction4.data[0].message
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateError"] != null &&
                        typeof $steps["updateError"] === "object" &&
                        typeof $steps["updateError"].then === "function"
                      ) {
                        $steps["updateError"] = await $steps["updateError"];
                      }

                      $steps["invokeGlobalAction3"] =
                        $steps.invokeGlobalAction4?.data[0]?.success == false &&
                        $steps.invokeGlobalAction4?.data[0]?.message
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  (() => {
                                    try {
                                      return $state.error;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["updateModal2Open"] =
                        $steps.invokeGlobalAction4?.data[0]?.success == true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["modal2", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateModal2Open"] != null &&
                        typeof $steps["updateModal2Open"] === "object" &&
                        typeof $steps["updateModal2Open"].then === "function"
                      ) {
                        $steps["updateModal2Open"] = await $steps[
                          "updateModal2Open"
                        ];
                      }

                      $steps["updateDisable2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["disable"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDisable2"] != null &&
                        typeof $steps["updateDisable2"] === "object" &&
                        typeof $steps["updateDisable2"].then === "function"
                      ) {
                        $steps["updateDisable2"] = await $steps[
                          "updateDisable2"
                        ];
                      }
                    }}
                  >
                    <Group4SvgIcon
                      className={classNames(projectcss.all, sty.svg__nxrBu, {
                        [sty.svgstepscharg_step3__nxrBuzZ317]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__i1Yqp, {
                        [sty.imgstepscharg_step3__i1YqpzZ317]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/babarkat/images/image6.svg",
                        fullWidth: 58,
                        fullHeight: 62,
                        aspectRatio: 0.935484
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__ohF6B,
                        {
                          [sty.freeBoxstepscharg_step3__ohF6BzZ317]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0UFSe,
                          {
                            [sty.textstepscharg_step3___0UFSezZ317]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                          : "Enter some text"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wz8RY,
                          {
                            [sty.textstepscharg_step3__wz8RYzZ317]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "موجودی:" +
                                  parseInt(
                                    $state.mojody.toFixed(0)
                                  ).toLocaleString() +
                                  " تومان"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0648\u062c\u0648\u062f\u06cc : 150000 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "Enter some text"
                        )}
                      </div>
                    </div>
                    <Group7SvgIcon
                      className={classNames(projectcss.all, sty.svg___5J66G, {
                        [sty.svgstepscharg_step3___5J66GzZ317]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />
                  </div>
                ) : null}
                {(
                  hasVariant($state, "stepscharg", "step3")
                    ? (() => {
                        try {
                          return $state.disable;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : false
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4U, {
                      [sty.freeBoxstepscharg_step3___4UZZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};
                    }}
                  >
                    <Group4SvgIcon
                      className={classNames(projectcss.all, sty.svg___6Cloh, {
                        [sty.svgstepscharg_step3___6ClohzZ317]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__aEs3, {
                        [sty.imgstepscharg_step3__aEs3ZZ317]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/babarkat/images/image6.svg",
                        fullWidth: 58,
                        fullHeight: 62,
                        aspectRatio: 0.935484
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__dk0Cg,
                        {
                          [sty.freeBoxstepscharg_step3__dk0CGzZ317]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kLjmO,
                          {
                            [sty.textstepscharg_step3__kLjmOzZ317]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                          : "Enter some text"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nzckW,
                          {
                            [sty.textstepscharg_step3__nzckWzZ317]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return "موجودی :" + $state.mojody + " تومان ";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0648\u062c\u0648\u062f\u06cc : 150000 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "Enter some text"
                        )}
                      </div>
                    </div>
                    <Group7SvgIcon
                      className={classNames(projectcss.all, sty.svg__yOj9M, {
                        [sty.svgstepscharg_step3__yOj9MzZ317]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__vBxVu,
                        {
                          [sty.freeBoxstepscharg_step3__vBxVUzZ317]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__t9Qt2, {
                          [sty.svgstepscharg_step3__t9Qt2ZZ317]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />
                    </div>
                  </div>
                ) : null}
              </Stack__>
              <div
                className={classNames(projectcss.all, sty.freeBox__hfu8C, {
                  [sty.freeBoxstepscharg_step3__hfu8CzZ317]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__yQ6Gg, {
                    [sty.imgstepscharg_step3__yQ6GgzZ317]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "100%"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return Android.onElementClicked(
                                  "https://www.aparat.com/v/yephw21"
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  src={{
                    src: "/plasmic/babarkat/images/image34.png",
                    fullWidth: 1500,
                    fullHeight: 500,
                    aspectRatio: undefined
                  }}
                />

                <Button
                  className={classNames("__wab_instance", sty.button__jNLsb)}
                  color={"sand"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode2"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return Android.onElementClicked(
                                  "https://www.aparat.com/v/yephw21"
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode2"] != null &&
                      typeof $steps["runCode2"] === "object" &&
                      typeof $steps["runCode2"].then === "function"
                    ) {
                      $steps["runCode2"] = await $steps["runCode2"];
                    }
                  }}
                  size={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "compact"
                      : undefined
                  }
                >
                  {
                    "\u0622\u0645\u0648\u0632\u0634 \u067e\u0631\u062f\u0627\u062e\u062a"
                  }
                </Button>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n7GQp
                  )}
                >
                  {
                    "\u0622\u0645\u0648\u0632\u0634 \u067e\u0631\u062f\u0627\u062e\u062a \u0627\u0632 \u0637\u0631\u06cc\u0642 \u067e\u0646\u0644 \u0633\u0627\u0632\u0645\u0627\u0646\u06cc \u0627\u0633\u0646\u067e\n"
                  }
                </div>
              </div>
            </Reveal>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wmaIu, {
                [sty.freeBoxstepscharg_step3__wmaIuzZ317]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <Button
                  data-plasmic-name={"backstep2"}
                  data-plasmic-override={overrides.backstep2}
                  className={classNames("__wab_instance", sty.backstep2, {
                    [sty.backstep2stepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  color={"green"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateUnnamedVariant"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "stepscharg",
                            operation: 1
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUnnamedVariant"] != null &&
                      typeof $steps["updateUnnamedVariant"] === "object" &&
                      typeof $steps["updateUnnamedVariant"].then === "function"
                    ) {
                      $steps["updateUnnamedVariant"] = await $steps[
                        "updateUnnamedVariant"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yFn4W
                    )}
                  >
                    {"\u0627\u062f\u0627\u0645\u0647"}
                  </div>
                </Button>
              ) : null}
              {(
                hasVariant($state, "stepscharg", "step3")
                  ? true
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <Button
                  data-plasmic-name={"backstep3"}
                  data-plasmic-override={overrides.backstep3}
                  className={classNames("__wab_instance", sty.backstep3, {
                    [sty.backstep3stepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  color={"softGreen"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateUnnamedVariant2"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "stepscharg",
                            operation: 0,
                            value: []
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUnnamedVariant2"] != null &&
                      typeof $steps["updateUnnamedVariant2"] === "object" &&
                      typeof $steps["updateUnnamedVariant2"].then === "function"
                    ) {
                      $steps["updateUnnamedVariant2"] = await $steps[
                        "updateUnnamedVariant2"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yldpQ
                    )}
                  >
                    {"\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"}
                  </div>
                </Button>
              ) : null}
              <Button
                data-plasmic-name={"step1Next"}
                data-plasmic-override={overrides.step1Next}
                className={classNames("__wab_instance", sty.step1Next, {
                  [sty.step1Nextstepscharg_step3]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
                color={"green"}
                isDisabled={(() => {
                  try {
                    return $state.fragmentInput.value.length != 11;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateNumber"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["number"]
                          },
                          operation: 0,
                          value: $state.fragmentInput.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateNumber"] != null &&
                    typeof $steps["updateNumber"] === "object" &&
                    typeof $steps["updateNumber"].then === "function"
                  ) {
                    $steps["updateNumber"] = await $steps["updateNumber"];
                  }

                  $steps["updateUnnamedVariant"] = (() => {
                    const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                    return phoneRegex.test($state.number);
                  })()
                    ? (() => {
                        const actionArgs = {
                          vgroup: "stepscharg",
                          operation: 0,
                          value: "step3"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateUnnamedVariant"] != null &&
                    typeof $steps["updateUnnamedVariant"] === "object" &&
                    typeof $steps["updateUnnamedVariant"].then === "function"
                  ) {
                    $steps["updateUnnamedVariant"] = await $steps[
                      "updateUnnamedVariant"
                    ];
                  }

                  $steps["invokeGlobalAction"] = (() => {
                    const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                    return !phoneRegex.test($state.number);
                  })()
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            "\u0634\u0645\u0627\u0631\u0647\u200c\u06cc \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0645\u0639\u062a\u0628\u0631 \u0646\u06cc\u0633\u062a.",
                            "top-left"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ohBpe
                  )}
                >
                  {"\u0627\u062f\u0627\u0645\u0647"}
                </div>
              </Button>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <Button
                  data-plasmic-name={"step2Next"}
                  data-plasmic-override={overrides.step2Next}
                  className={classNames("__wab_instance", sty.step2Next, {
                    [sty.step2Nextstepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  color={"green"}
                  isDisabled={(() => {
                    try {
                      return $state.fragmentInput2.value.length <= 3;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateUnnamedVariant2"] = (() => {
                      if (
                        $state.operators2[$state.operatorselect].chargeRange
                      ) {
                        if ($state.operatorselect == 1) {
                          return $state.amont % 1000 === 0;
                        }
                        if (
                          $state.amont >=
                            $state.operators2[$state.operatorselect].chargeRange
                              .min &&
                          $state.amont <=
                            $state.operators2[$state.operatorselect].chargeRange
                              .max
                        ) {
                          return true;
                        } else {
                          return false;
                        }
                      } else return true;
                    })()
                      ? (() => {
                          const actionArgs = {
                            vgroup: "stepscharg",
                            operation: 0,
                            value: "step3"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUnnamedVariant2"] != null &&
                      typeof $steps["updateUnnamedVariant2"] === "object" &&
                      typeof $steps["updateUnnamedVariant2"].then === "function"
                    ) {
                      $steps["updateUnnamedVariant2"] = await $steps[
                        "updateUnnamedVariant2"
                      ];
                    }

                    $steps["invokeGlobalAction"] = (() => {
                      if (
                        $state.operators2[$state.operatorselect].chargeRange
                      ) {
                        if ($state.operatorselect == 1) {
                          return $state.amont % 1000 != 0;
                        }
                        if (
                          $state.amont >=
                            $state.operators2[$state.operatorselect].chargeRange
                              .min &&
                          $state.amont <=
                            $state.operators2[$state.operatorselect].chargeRange
                              .max
                        ) {
                          return false;
                        } else {
                          return true;
                        }
                      } else return false;
                    })()
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              (() => {
                                try {
                                  return (() => {
                                    if ($state.operatorselect == 1) {
                                      if ($state.amont % 1000 != 0)
                                        return "مبلغ باید ضریبی از 1000 باشد.";
                                    }
                                    return (
                                      "مبلغ باید بین " +
                                      $state.operators2[
                                        $state.operatorselect
                                      ].chargeRange.min.toLocaleString("en") +
                                      " تومان تا " +
                                      $state.operators2[
                                        $state.operatorselect
                                      ].chargeRange.max.toLocaleString("en") +
                                      " تومان باشد."
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sGK
                    )}
                  >
                    {"\u0627\u062f\u0627\u0645\u0647"}
                  </div>
                </Button>
              ) : null}
              {(hasVariant($state, "stepscharg", "step3") ? true : false) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cf0Qe,
                    {
                      [sty.textstepscharg_step3__cf0QezZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToChargeStep1"] = true
                      ? (() => {
                          const actionArgs = { destination: `/charging` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToChargeStep1"] != null &&
                      typeof $steps["goToChargeStep1"] === "object" &&
                      typeof $steps["goToChargeStep1"].then === "function"
                    ) {
                      $steps["goToChargeStep1"] = await $steps[
                        "goToChargeStep1"
                      ];
                    }
                  }}
                >
                  {"\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"}
                </div>
              ) : null}
            </Stack__>
            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal, {
                [sty.modalstepscharg_step3]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalContentClassName={classNames({
                [sty["pcls_VkCiIFNH4IdA"]]: true,
                [sty["pcls_fjBA1geYvaa7"]]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
              modalScopeClassName={sty["modal__modal"]}
              onOpenChange={generateStateOnChangeProp($state, [
                "modal",
                "open"
              ])}
              open={generateStateValueProp($state, ["modal", "open"])}
              title={null}
              trigger={null}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__wnIlH, {
                  [sty.freeBoxstepscharg_step3__wnIlHzZ317]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iiwjt,
                    {
                      [sty.textstepscharg_step3__iiwjtzZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "stepscharg", "step3")
                    ? "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647 \u0627\u0633\u0646\u067e"
                    : "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647 \u0627\u0633\u0646\u067e"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y3XbZ,
                    {
                      [sty.textstepscharg_step3__y3XbZzZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "stepscharg", "step3") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return "شارژ اسنپ بین ساعات ۱۰ الی ۱۸ همه روزه، طی ۱۰ دقیقه بعد از درخواست شما، انجام میگردد.\n در صورتی که در خارج از این بازه درخواست ثبت کنید، موجودی از حساب شما کسر میگردد و می بایست تا تایم بعدی اجرای درخواست منتظر بمانید.";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u06af\u0627\u0645 \u0647\u0627\u06cc \u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647:";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return "شارژ اسنپ بین ساعات ۱۰ الی ۱۸ همه روزه، طی ۱۰ دقیقه بعد از درخواست شما، انجام میگردد.\n\nدر صورتی که در خارج از این بازه درخواست ثبت کنید، موجودی از حساب شما کسر میگردد و می بایست تا تایم بعدی اجرای درخواست منتظر بمانید.";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u06af\u0627\u0645 \u0647\u0627\u06cc \u062e\u0631\u06cc\u062f \u0628\u0633\u062a\u0647:";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__kYb2A, {
                    [sty.buttonstepscharg_step3__kYb2AzZ317]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  color={"green"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }}
                >
                  {"\u0645\u062a\u0648\u062c\u0647 \u0634\u062f\u0645"}
                </Button>
              </div>
            </AntdModal>
            <AntdModal
              data-plasmic-name={"modal2"}
              data-plasmic-override={overrides.modal2}
              className={classNames("__wab_instance", sty.modal2, {
                [sty.modal2stepscharg_step3]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              maskClosable={
                hasVariant($state, "stepscharg", "step3") ? false : undefined
              }
              modalContentClassName={classNames({
                [sty["pcls_6XgUUtiamjWn"]]:
                  hasVariant($state, "stepscharg", "step3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly"),
                [sty["pcls_lidP-3wqmI1S"]]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                ),
                [sty["pcls_ub7CcKrfNKzo"]]: true
              })}
              modalScopeClassName={sty["modal2__modal"]}
              onOpenChange={generateStateOnChangeProp($state, [
                "modal2",
                "open"
              ])}
              open={generateStateValueProp($state, ["modal2", "open"])}
              title={null}
              trigger={null}
              width={
                hasVariant($state, "stepscharg", "step3") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "100vw"
                  : hasVariant($state, "stepscharg", "step3")
                  ? "55%"
                  : undefined
              }
              wrapClassName={classNames({
                [sty["pcls_HL4RUnqCQ2DN"]]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                ),
                [sty["pcls_vbwe0O5GO9ii"]]:
                  hasVariant($state, "stepscharg", "step3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__gNy0, {
                  [sty.freeBoxstepscharg_step3__gNy0ZZ317]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <LottieWrapper
                  data-plasmic-name={"lottie"}
                  data-plasmic-override={overrides.lottie}
                  animationData={{
                    v: "4.10.1",
                    fr: 30,
                    ip: 0,
                    op: 40,
                    w: 80,
                    h: 80,
                    nm: "Success Checkmark",
                    ddd: 0,
                    assets: [],
                    layers: [
                      {
                        ddd: 0,
                        ind: 1,
                        ty: 4,
                        nm: "Check Mark",
                        sr: 1,
                        ks: {
                          o: { a: 0, k: 100, ix: 11 },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [40, 40, 0], ix: 2 },
                          a: { a: 0, k: [-1.312, 6, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 }
                        },
                        ao: 0,
                        shapes: [
                          {
                            ty: "gr",
                            it: [
                              {
                                ind: 0,
                                ty: "sh",
                                ix: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-15.75, 8],
                                      [-8, 16],
                                      [13.125, -4]
                                    ],
                                    c: false
                                  },
                                  ix: 2
                                },
                                nm: "Path 1",
                                mn: "ADBE Vector Shape - Group",
                                hd: false
                              },
                              {
                                ty: "tm",
                                s: {
                                  a: 1,
                                  k: [
                                    {
                                      i: { x: [0.667], y: [1] },
                                      o: { x: [0.333], y: [0] },
                                      n: ["0p667_1_0p333_0"],
                                      t: 25,
                                      s: [0],
                                      e: [100]
                                    },
                                    { t: 33 }
                                  ],
                                  ix: 1
                                },
                                e: { a: 0, k: 0, ix: 2 },
                                o: { a: 0, k: 0, ix: 3 },
                                m: 1,
                                ix: 2,
                                nm: "Trim Paths 1",
                                mn: "ADBE Vector Filter - Trim",
                                hd: false
                              },
                              {
                                ty: "st",
                                c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                o: { a: 0, k: 100, ix: 4 },
                                w: { a: 0, k: 3, ix: 5 },
                                lc: 2,
                                lj: 2,
                                nm: "Stroke 1",
                                mn: "ADBE Vector Graphic - Stroke",
                                hd: false
                              },
                              {
                                ty: "tr",
                                p: { a: 0, k: [0, 0], ix: 2 },
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                r: { a: 0, k: 0, ix: 6 },
                                o: { a: 0, k: 100, ix: 7 },
                                sk: { a: 0, k: 0, ix: 4 },
                                sa: { a: 0, k: 0, ix: 5 },
                                nm: "Transform"
                              }
                            ],
                            nm: "Shape 1",
                            np: 3,
                            cix: 2,
                            ix: 1,
                            mn: "ADBE Vector Group",
                            hd: false
                          }
                        ],
                        ip: 0,
                        op: 40,
                        st: 0,
                        bm: 0
                      },
                      {
                        ddd: 0,
                        ind: 2,
                        ty: 4,
                        nm: "Circle Flash",
                        sr: 1,
                        ks: {
                          o: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.833], y: [0.833] },
                                o: { x: [0.167], y: [0.167] },
                                n: ["0p833_0p833_0p167_0p167"],
                                t: 25,
                                s: [0],
                                e: [98]
                              },
                              {
                                i: { x: [0.833], y: [0.833] },
                                o: { x: [0.167], y: [0.167] },
                                n: ["0p833_0p833_0p167_0p167"],
                                t: 30,
                                s: [98],
                                e: [0]
                              },
                              { t: 38 }
                            ],
                            ix: 11
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [40, 40, 0], ix: 2 },
                          a: { a: 0, k: [0, 0, 0], ix: 1 },
                          s: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                n: [
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0"
                                ],
                                t: 25,
                                s: [0, 0, 100],
                                e: [100, 100, 100]
                              },
                              { t: 30 }
                            ],
                            ix: 6
                          }
                        },
                        ao: 0,
                        shapes: [
                          {
                            d: 1,
                            ty: "el",
                            s: { a: 0, k: [64, 64], ix: 2 },
                            p: { a: 0, k: [0, 0], ix: 3 },
                            nm: "Ellipse Path 1",
                            mn: "ADBE Vector Shape - Ellipse",
                            hd: false
                          },
                          {
                            ty: "fl",
                            c: {
                              a: 0,
                              k: [
                                0.529866635799, 0.961458325386, 0.448091417551,
                                1
                              ],
                              ix: 4
                            },
                            o: { a: 0, k: 100, ix: 5 },
                            r: 1,
                            nm: "Fill 1",
                            mn: "ADBE Vector Graphic - Fill",
                            hd: false
                          }
                        ],
                        ip: 0,
                        op: 40,
                        st: 0,
                        bm: 0
                      },
                      {
                        ddd: 0,
                        ind: 3,
                        ty: 4,
                        nm: "Circle Stroke",
                        sr: 1,
                        ks: {
                          o: { a: 0, k: 100, ix: 11 },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [39.022, 39.022, 0], ix: 2 },
                          a: { a: 0, k: [0, 0, 0], ix: 1 },
                          s: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                n: [
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0"
                                ],
                                t: 16,
                                s: [100, 100, 100],
                                e: [80, 80, 100]
                              },
                              {
                                i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                n: [
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0"
                                ],
                                t: 22,
                                s: [80, 80, 100],
                                e: [120, 120, 100]
                              },
                              {
                                i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                n: [
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0"
                                ],
                                t: 25,
                                s: [120, 120, 100],
                                e: [100, 100, 100]
                              },
                              { t: 29 }
                            ],
                            ix: 6
                          }
                        },
                        ao: 0,
                        shapes: [
                          {
                            ty: "gr",
                            it: [
                              {
                                d: 1,
                                ty: "el",
                                s: { a: 0, k: [60, 60], ix: 2 },
                                p: { a: 0, k: [0, 0], ix: 3 },
                                nm: "Ellipse Path 1",
                                mn: "ADBE Vector Shape - Ellipse",
                                hd: false
                              },
                              {
                                ty: "tm",
                                s: {
                                  a: 1,
                                  k: [
                                    {
                                      i: { x: [0.667], y: [1] },
                                      o: { x: [0.333], y: [0] },
                                      n: ["0p667_1_0p333_0"],
                                      t: 0,
                                      s: [0],
                                      e: [100]
                                    },
                                    { t: 16 }
                                  ],
                                  ix: 1
                                },
                                e: { a: 0, k: 0, ix: 2 },
                                o: { a: 0, k: 0, ix: 3 },
                                m: 1,
                                ix: 2,
                                nm: "Trim Paths 1",
                                mn: "ADBE Vector Filter - Trim",
                                hd: false
                              },
                              {
                                ty: "st",
                                c: {
                                  a: 0,
                                  k: [
                                    0.427450984716, 0.800000011921,
                                    0.35686275363, 1
                                  ],
                                  ix: 3
                                },
                                o: { a: 0, k: 100, ix: 4 },
                                w: { a: 0, k: 3, ix: 5 },
                                lc: 2,
                                lj: 2,
                                nm: "Stroke 1",
                                mn: "ADBE Vector Graphic - Stroke",
                                hd: false
                              },
                              {
                                ty: "tr",
                                p: { a: 0, k: [0.978, 0.978], ix: 2 },
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                r: { a: 0, k: 0, ix: 6 },
                                o: { a: 0, k: 100, ix: 7 },
                                sk: { a: 0, k: 0, ix: 4 },
                                sa: { a: 0, k: 0, ix: 5 },
                                nm: "Transform"
                              }
                            ],
                            nm: "Ellipse 1",
                            np: 3,
                            cix: 2,
                            ix: 1,
                            mn: "ADBE Vector Group",
                            hd: false
                          }
                        ],
                        ip: 0,
                        op: 40,
                        st: 0,
                        bm: 0
                      },
                      {
                        ddd: 0,
                        ind: 4,
                        ty: 4,
                        nm: "Circle Green Fill",
                        sr: 1,
                        ks: {
                          o: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.833], y: [0.833] },
                                o: { x: [0.167], y: [0.167] },
                                n: ["0p833_0p833_0p167_0p167"],
                                t: 21,
                                s: [0],
                                e: [98]
                              },
                              { t: 28 }
                            ],
                            ix: 11
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [40, 40, 0], ix: 2 },
                          a: { a: 0, k: [0, 0, 0], ix: 1 },
                          s: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                n: [
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0"
                                ],
                                t: 21,
                                s: [0, 0, 100],
                                e: [100, 100, 100]
                              },
                              { t: 28 }
                            ],
                            ix: 6
                          }
                        },
                        ao: 0,
                        shapes: [
                          {
                            d: 1,
                            ty: "el",
                            s: { a: 0, k: [64, 64], ix: 2 },
                            p: { a: 0, k: [0, 0], ix: 3 },
                            nm: "Ellipse Path 1",
                            mn: "ADBE Vector Shape - Ellipse",
                            hd: false
                          },
                          {
                            ty: "fl",
                            c: {
                              a: 0,
                              k: [
                                0.427450984716, 0.800000011921, 0.35686275363, 1
                              ],
                              ix: 4
                            },
                            o: { a: 0, k: 100, ix: 5 },
                            r: 1,
                            nm: "Fill 1",
                            mn: "ADBE Vector Graphic - Fill",
                            hd: false
                          }
                        ],
                        ip: 0,
                        op: 40,
                        st: 0,
                        bm: 0
                      }
                    ]
                  }}
                  className={classNames("__wab_instance", sty.lottie, {
                    [sty.lottiestepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  loop={true}
                  preview={true}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cMlU,
                    {
                      [sty.textstepscharg_step3__cMlUzZ317]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    }
                  )}
                >
                  {
                    "\u062e\u0631\u06cc\u062f \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button___31MXm, {
                    [sty.buttonstepscharg_step3___31MXMzZ317]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  color={"green"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal2", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___28RlR
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
              </div>
            </AntdModal>
          </div>
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer, {
              [sty.timerstepscharg_step3]: hasVariant(
                $state,
                "stepscharg",
                "step3"
              )
            })}
            intervalSeconds={1}
            isRunning={hasVariant($state, "stepscharg", "step3") ? false : true}
            onTick={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const item = JSON.parse(
                            sessionStorage.getItem("userbabarcatToken")
                          );
                          if (item == null) {
                            return (window.location.href =
                              "https://app.babarkat.com/login/");
                          } else {
                            const currentTime = new Date().getTime();
                            if (currentTime > item.expiration) {
                              return sessionStorage.removeItem(
                                "userbabarcatToken"
                              );
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            runWhileEditing={false}
          />

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml, {
              [sty.embedHtmlstepscharg_step3]: hasVariant(
                $state,
                "stepscharg",
                "step3"
              )
            })}
            code={
              "<div></div>\r\n    <script>\r\n        window.addEventListener('popstate', function (event) {\r\n            window.location.href =\"/snapp\"\r\n        });\r\n    </script>"
            }
          />

          <ApiRequest
            data-plasmic-name={"commissionBabarkat"}
            data-plasmic-override={overrides.commissionBabarkat}
            children={null}
            className={classNames("__wab_instance", sty.commissionBabarkat)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jWq3U
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5HcYi
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={generateStateOnChangeProp($state, [
              "commissionBabarkat",
              "error"
            ])}
            onLoading={generateStateOnChangeProp($state, [
              "commissionBabarkat",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "commissionBabarkat",
              "data"
            ])}
            url={"https://n8n.babarkat.com/webhook/CommissionBabarkat"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  chargeStep1: [
    "chargeStep1",
    "header",
    "reveal",
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "fragmentInput",
    "fragmentInput2",
    "operators",
    "boxselect",
    "operators3",
    "boxselect3",
    "operators4",
    "boxselect4",
    "backstep2",
    "backstep3",
    "step1Next",
    "step2Next",
    "modal",
    "modal2",
    "lottie",
    "timer",
    "embedHtml",
    "commissionBabarkat"
  ],
  header: ["header"],
  reveal: [
    "reveal",
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "fragmentInput",
    "fragmentInput2",
    "operators",
    "boxselect",
    "operators3",
    "boxselect3",
    "operators4",
    "boxselect4"
  ],
  wallet: [
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "fragmentInput",
    "fragmentInput2"
  ],
  steps: [
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2"
  ],
  مشخصات: ["\u0645\u0634\u062e\u0635\u0627\u062a", "selected"],
  selected: ["selected"],
  تاییدخرید: [
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2"
  ],
  unselected2: ["unselected2"],
  fragmentInput: ["fragmentInput"],
  fragmentInput2: ["fragmentInput2"],
  operators: ["operators", "boxselect"],
  boxselect: ["boxselect"],
  operators3: ["operators3", "boxselect3"],
  boxselect3: ["boxselect3"],
  operators4: ["operators4", "boxselect4"],
  boxselect4: ["boxselect4"],
  backstep2: ["backstep2"],
  backstep3: ["backstep3"],
  step1Next: ["step1Next"],
  step2Next: ["step2Next"],
  modal: ["modal"],
  modal2: ["modal2", "lottie"],
  lottie: ["lottie"],
  timer: ["timer"],
  embedHtml: ["embedHtml"],
  commissionBabarkat: ["commissionBabarkat"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  chargeStep1: "div";
  header: "div";
  reveal: typeof Reveal;
  wallet: "div";
  steps: "div";
  مشخصات: "div";
  selected: "svg";
  تاییدخرید: "div";
  unselected2: "svg";
  fragmentInput: typeof Input;
  fragmentInput2: typeof Input;
  operators: "div";
  boxselect: typeof Boxselect;
  operators3: "div";
  boxselect3: typeof Boxselect;
  operators4: "div";
  boxselect4: typeof Boxselect;
  backstep2: typeof Button;
  backstep3: typeof Button;
  step1Next: typeof Button;
  step2Next: typeof Button;
  modal: typeof AntdModal;
  modal2: typeof AntdModal;
  lottie: typeof LottieWrapper;
  timer: typeof Timer;
  embedHtml: typeof Embed;
  commissionBabarkat: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSnap__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSnap__VariantsArgs;
    args?: PlasmicSnap__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSnap__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSnap__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSnap__ArgProps,
          internalVariantPropNames: PlasmicSnap__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSnap__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "chargeStep1") {
    func.displayName = "PlasmicSnap";
  } else {
    func.displayName = `PlasmicSnap.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sZQMbqXz9utLNaTnNb3uss"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSnap = Object.assign(
  // Top-level PlasmicSnap renders the root element
  withUsePlasmicAuth(makeNodeComponent("chargeStep1")),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    reveal: makeNodeComponent("reveal"),
    wallet: makeNodeComponent("wallet"),
    steps: makeNodeComponent("steps"),
    مشخصات: makeNodeComponent("\u0645\u0634\u062e\u0635\u0627\u062a"),
    selected: makeNodeComponent("selected"),
    تاییدخرید: makeNodeComponent(
      "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f"
    ),
    unselected2: makeNodeComponent("unselected2"),
    fragmentInput: makeNodeComponent("fragmentInput"),
    fragmentInput2: makeNodeComponent("fragmentInput2"),
    operators: makeNodeComponent("operators"),
    boxselect: makeNodeComponent("boxselect"),
    operators3: makeNodeComponent("operators3"),
    boxselect3: makeNodeComponent("boxselect3"),
    operators4: makeNodeComponent("operators4"),
    boxselect4: makeNodeComponent("boxselect4"),
    backstep2: makeNodeComponent("backstep2"),
    backstep3: makeNodeComponent("backstep3"),
    step1Next: makeNodeComponent("step1Next"),
    step2Next: makeNodeComponent("step2Next"),
    modal: makeNodeComponent("modal"),
    modal2: makeNodeComponent("modal2"),
    lottie: makeNodeComponent("lottie"),
    timer: makeNodeComponent("timer"),
    embedHtml: makeNodeComponent("embedHtml"),
    commissionBabarkat: makeNodeComponent("commissionBabarkat"),

    // Metadata about props expected for PlasmicSnap
    internalVariantProps: PlasmicSnap__VariantProps,
    internalArgProps: PlasmicSnap__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "بابرکت",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSnap;
/* prettier-ignore-end */
