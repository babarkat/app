/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: b-NdD4-urlc5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import RadioButton from "../../RadioButton"; // plasmic-import: L2fWbb7vOro8/component
import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import Boxselect from "../../Boxselect"; // plasmic-import: zrEzOXBZcn1e/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: OG1SoduAPhRs/codeComponent
import Loading from "../../Loading"; // plasmic-import: LqAqGtGaA2Da/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicBill.module.css"; // plasmic-import: b-NdD4-urlc5/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dXgXrJG5lp3Z/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: ABwvUbBMtZqM/icon
import Icon61Icon from "./icons/PlasmicIcon__Icon61"; // plasmic-import: 6aKHa8qmDKOv/icon
import Icon154Icon from "./icons/PlasmicIcon__Icon154"; // plasmic-import: vEkGA7arj2Yg/icon
import RadioButtonCheckedSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__RadioButtonCheckedSvgrepoCom2Svg"; // plasmic-import: txDOSA20FGud/icon
import CheckCircleSvgrepoComSvgIcon from "./icons/PlasmicIcon__CheckCircleSvgrepoComSvg"; // plasmic-import: 3lQ_sc0p8wap/icon
import LineXlSvgrepoComSvgIcon from "./icons/PlasmicIcon__LineXlSvgrepoComSvg"; // plasmic-import: PKDhRR5tO_9t/icon
import Group4SvgIcon from "./icons/PlasmicIcon__Group4Svg"; // plasmic-import: 8w6sGTNqgCIT/icon
import Group7SvgIcon from "./icons/PlasmicIcon__Group7Svg"; // plasmic-import: o5fEPeaAf9nA/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jg6gpiNRWEQd/icon
import Icon109Icon from "./icons/PlasmicIcon__Icon109"; // plasmic-import: LIgkphYcL9vu/icon
import Icon110Icon from "./icons/PlasmicIcon__Icon110"; // plasmic-import: aq88MiXmlJWv/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: ZQs8iNj46bRk/icon
import Icon108Icon from "./icons/PlasmicIcon__Icon108"; // plasmic-import: tptDKswn1-8W/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon95Icon from "./icons/PlasmicIcon__Icon95"; // plasmic-import: IThJ_Rij_EiI/icon
import Icon92Icon from "./icons/PlasmicIcon__Icon92"; // plasmic-import: SowHoWtrM2eF/icon
import Icon78Icon from "./icons/PlasmicIcon__Icon78"; // plasmic-import: Yub8sXrIQi2p/icon
import Icon89Icon from "./icons/PlasmicIcon__Icon89"; // plasmic-import: 1mHusOdupjsZ/icon
import Icon98Icon from "./icons/PlasmicIcon__Icon98"; // plasmic-import: j58jBCJnZFEz/icon
import Icon99Icon from "./icons/PlasmicIcon__Icon99"; // plasmic-import: NVA9h9iSgFVb/icon
import Icon100Icon from "./icons/PlasmicIcon__Icon100"; // plasmic-import: wsvsLF00UI-6/icon
import Icon101Icon from "./icons/PlasmicIcon__Icon101"; // plasmic-import: kaEdqZ6pnhpH/icon
import Icon102Icon from "./icons/PlasmicIcon__Icon102"; // plasmic-import: 98U05Tn3M472/icon
import Icon104Icon from "./icons/PlasmicIcon__Icon104"; // plasmic-import: 3o5IGmXy7oW3/icon

import { v4 as __lib_uuid__v4 } from "uuid";

createPlasmicElementProxy;

export type PlasmicBill__VariantMembers = {
  stepscharg: "step2" | "step3" | "step1";
};
export type PlasmicBill__VariantsArgs = {
  stepscharg?: SingleChoiceArg<"step2" | "step3" | "step1">;
};
type VariantPropType = keyof PlasmicBill__VariantsArgs;
export const PlasmicBill__VariantProps = new Array<VariantPropType>(
  "stepscharg"
);

export type PlasmicBill__ArgsType = {};
type ArgPropType = keyof PlasmicBill__ArgsType;
export const PlasmicBill__ArgProps = new Array<ArgPropType>();

export type PlasmicBill__OverridesType = {
  chargeStep1?: Flex__<"div">;
  header?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  wallet?: Flex__<"div">;
  steps?: Flex__<"div">;
  مشخصات?: Flex__<"div">;
  selected?: Flex__<"svg">;
  مبلغشارژ?: Flex__<"div">;
  unselected?: Flex__<"svg">;
  تاییدخرید?: Flex__<"div">;
  unselected2?: Flex__<"svg">;
  radioButton?: Flex__<typeof RadioButton>;
  fragmentInput3?: Flex__<typeof Input>;
  fragmentInput4?: Flex__<typeof Input>;
  fragmentInput5?: Flex__<typeof Input>;
  billId?: Flex__<"div">;
  idinput?: Flex__<typeof Input>;
  billId3?: Flex__<"div">;
  idinput3?: Flex__<typeof Input>;
  billId2?: Flex__<"div">;
  idinput2?: Flex__<typeof Input>;
  fragmentInput2?: Flex__<typeof Input>;
  operators?: Flex__<"div">;
  boxselect?: Flex__<typeof Boxselect>;
  operators3?: Flex__<"div">;
  boxselect3?: Flex__<typeof Boxselect>;
  nobill?: Flex__<"div">;
  bills?: Flex__<"div">;
  popover?: Flex__<typeof AntdPopover>;
  button3?: Flex__<typeof Button>;
  button4?: Flex__<typeof Button>;
  backstep3?: Flex__<typeof Button>;
  step1Next2?: Flex__<typeof Button>;
  step1Next?: Flex__<typeof Button>;
  backstep2?: Flex__<typeof Button>;
  addBill?: Flex__<typeof Button>;
  step2Next?: Flex__<typeof Button>;
  modal?: Flex__<typeof AntdModal>;
  ul?: Flex__<"ul">;
  اپراتور?: Flex__<"div">;
  اپراتور2?: Flex__<"div">;
  اپراتور3?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  modal2?: Flex__<typeof AntdModal>;
  lottie?: Flex__<typeof LottieWrapper>;
  button2?: Flex__<typeof Button>;
  commissionBabarkat?: Flex__<typeof ApiRequest>;
  type2?: Flex__<typeof AntdModal>;
  comingSoon13?: Flex__<"div">;
  comingSoon14?: Flex__<"div">;
  comingSoon15?: Flex__<"div">;
  comingSoon16?: Flex__<"div">;
  comingSoon17?: Flex__<"div">;
  comingSoon18?: Flex__<"div">;
  edit?: Flex__<typeof AntdModal>;
  comingSoon19?: Flex__<"div">;
  comingSoon20?: Flex__<"div">;
  comingSoon21?: Flex__<"div">;
  comingSoon22?: Flex__<"div">;
  comingSoon23?: Flex__<"div">;
  comingSoon24?: Flex__<"div">;
  info?: Flex__<typeof AntdModal>;
  loading?: Flex__<typeof Loading>;
  exitModal?: Flex__<typeof AntdModal>;
  button5?: Flex__<typeof Button>;
  button6?: Flex__<typeof Button>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultBillProps {}

const $$ = {
  uuid: {
    v4: __lib_uuid__v4
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBill__RenderFunc(props: {
  variants: PlasmicBill__VariantsArgs;
  args: PlasmicBill__ArgsType;
  overrides: PlasmicBill__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "idinput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "stepscharg", "step1")
            ? (() => {
                try {
                  return $state.id == 0 ? "" : $state.id.toString();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.id == "" ? "" : $state.id.toString();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "operators2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "MTN",
            nameop: "Irancell",
            description:
              "\u0642\u0628\u0636 \u0627\u06cc\u0631\u0627\u0646\u0633\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image19.svg",
            icon: '<svg  viewBox="0 0 22 18" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<path d="M10.9599 0.689552C10.8189 0.689552 10.6769 0.691551 10.5349 0.693551C9.18719 0.712861 7.84347 0.845327 6.51792 1.08955C5.50792 1.28355 4.50692 1.54955 3.55292 1.93755C2.82392 2.24055 2.11092 2.61055 1.51892 3.13755C1.14092 3.47955 0.810918 3.90455 0.698918 4.41055C0.596918 4.84155 0.692918 5.30355 0.915918 5.68355C1.22092 6.20055 1.69392 6.59255 2.19092 6.91355C2.63392 7.19755 3.10792 7.42655 3.59292 7.62355C4.52092 7.99855 5.49092 8.25655 6.47292 8.44855C7.5882 8.65829 8.7171 8.78763 9.85092 8.83555C11.0249 8.88555 12.2009 8.86155 13.3709 8.75355C14.4211 8.65902 15.4629 8.48756 16.4879 8.24055C17.3599 8.02455 18.2199 7.74555 19.0279 7.35655C19.5909 7.08255 20.1379 6.75455 20.5919 6.31855C20.8759 6.04155 21.1239 5.71855 21.2579 5.34355C21.3789 5.01055 21.3909 4.63555 21.2879 4.29555C21.1779 3.92555 20.9529 3.60155 20.6879 3.32555C20.3602 2.99627 19.9887 2.71362 19.5839 2.48555C18.8639 2.06955 18.0819 1.76655 17.2869 1.52555C16.1901 1.20418 15.0671 0.979984 13.9309 0.855552C12.945 0.742214 11.9533 0.686785 10.9609 0.689552H10.9599ZM6.43392 2.40755V4.43455C6.43392 4.57455 6.45792 4.73455 6.57692 4.82655C6.70892 4.92455 6.88392 4.90855 7.03892 4.90855C7.18392 4.90855 7.35792 4.87855 7.43492 4.73655C7.53392 4.54655 7.51492 4.32655 7.52192 4.12055H8.14792C8.14592 4.31055 8.15292 4.50055 8.14092 4.69055C8.12392 4.77055 8.19892 4.83055 8.26092 4.86555C8.37892 4.91462 8.51114 4.91712 8.63092 4.87255C8.74492 4.80755 8.77592 4.66455 8.79692 4.54455C8.81592 4.40455 8.81792 4.26155 8.81792 4.11855H9.44392C9.44192 4.32455 9.44892 4.53055 9.43692 4.73655C9.42692 4.76955 9.45492 4.79055 9.47692 4.80955C9.58192 4.90555 9.74392 4.92455 9.87692 4.89155C9.97792 4.85855 9.99892 4.73655 10.0159 4.64555C10.0439 4.44155 10.0459 4.23555 10.0439 4.02955H10.6719C10.6669 4.19555 10.6699 4.36155 10.6699 4.52855C10.6719 4.63355 10.6839 4.75555 10.7679 4.83055C10.8599 4.90355 10.9819 4.90855 11.0939 4.91055C11.2509 4.90855 11.4149 4.91755 11.5629 4.85455C11.5902 4.84412 11.6131 4.8246 11.6276 4.79928C11.6422 4.77396 11.6476 4.74439 11.6429 4.71555C11.6211 4.40919 11.5888 4.10368 11.5459 3.79955C11.7779 3.76255 12.0099 3.72255 12.2429 3.68455C12.2829 4.02655 12.3329 4.36955 12.3319 4.71555C12.3319 5.01155 12.2379 5.32055 12.0199 5.52655C11.8109 5.72655 11.5159 5.80355 11.2349 5.81055C11.0349 5.81255 10.8249 5.81955 10.6369 5.73355C10.5121 5.67837 10.4091 5.58343 10.3439 5.46355C10.2199 5.65555 10.0139 5.80855 9.77892 5.81055C9.52092 5.81755 9.24492 5.70555 9.09692 5.48755C9.02795 5.60321 8.92492 5.69473 8.80192 5.74955C8.60992 5.81955 8.39892 5.82955 8.19992 5.78455C8.01992 5.74455 7.87992 5.61155 7.77492 5.46855C7.70106 5.57035 7.60471 5.65372 7.49335 5.71217C7.382 5.77063 7.25865 5.80258 7.13292 5.80555C6.89392 5.81755 6.61492 5.83855 6.42992 5.65355C6.44591 5.81692 6.4293 5.98183 6.38107 6.13873C6.33283 6.29562 6.25392 6.44138 6.14892 6.56755C5.83692 6.93055 5.35192 7.10455 4.88292 7.12755C4.49892 7.14455 4.07492 7.09255 3.76992 6.83455C3.50992 6.61455 3.40392 6.26455 3.40192 5.93455C3.40892 5.47055 3.53992 5.01655 3.70392 4.58455C3.88892 4.64355 4.07692 4.69255 4.26192 4.75155C4.17992 5.08655 4.09592 5.42355 4.09992 5.77155C4.09995 5.84523 4.12009 5.9175 4.15815 5.98058C4.19621 6.04366 4.25076 6.09517 4.31592 6.12955C4.53192 6.24455 4.78492 6.23955 5.02092 6.22255C5.23892 6.19955 5.46692 6.15255 5.64992 6.02355C5.72192 5.97255 5.79492 5.89255 5.78792 5.79655L5.71792 2.48255C5.95692 2.45855 6.19692 2.43755 6.43392 2.40755ZM13.3979 2.41255V5.79255L12.7479 5.83655C12.7299 4.71855 12.7039 3.60055 12.6799 2.48255L13.3979 2.41255ZM17.5409 2.41455V5.79155C17.3259 5.80855 17.1079 5.82155 16.8919 5.83855C16.8709 4.7205 16.8476 3.6025 16.8219 2.48455C17.0629 2.45655 17.3009 2.43755 17.5409 2.41455ZM11.7809 2.46155L11.8459 2.46355C11.9909 2.59255 12.1229 2.74255 12.2679 2.87555C12.2659 2.90555 12.2749 2.94355 12.2469 2.96555C12.1229 3.08855 11.9979 3.21555 11.8719 3.33955C11.8509 3.36955 11.8129 3.36055 11.7799 3.36355C11.6519 3.22955 11.5179 3.10055 11.3889 2.96955C11.3519 2.94355 11.3519 2.88255 11.3839 2.85455C11.5149 2.72355 11.6489 2.59255 11.7799 2.46055L11.7809 2.46155ZM16.3879 3.68955C16.4299 4.03155 16.4819 4.37355 16.4799 4.72055C16.4779 5.04655 16.3619 5.39055 16.0949 5.59255C15.8209 5.80155 15.4599 5.83155 15.1269 5.81055C14.9955 5.80166 14.872 5.7447 14.7799 5.65055C14.7569 5.99355 14.6499 6.34455 14.4049 6.59555C14.1009 6.91255 13.6439 7.04055 13.2169 7.03355C13.1589 6.78355 13.1119 6.52955 13.0529 6.27955C13.3199 6.21355 13.5929 6.14355 13.8309 6.00255C13.9459 5.93455 14.0609 5.83655 14.0909 5.69755C14.1009 5.55055 14.0709 5.40255 14.0559 5.25455C14.0089 4.91455 13.9509 4.57755 13.8859 4.24055C14.1169 4.17955 14.3489 4.11555 14.5809 4.05455C14.6229 4.24455 14.6609 4.43955 14.7309 4.62255C14.7729 4.73255 14.8409 4.84755 14.9609 4.88255C15.0989 4.91955 15.2419 4.91055 15.3829 4.91055C15.4933 4.91456 15.6033 4.89548 15.7059 4.85455C15.7579 4.83355 15.7959 4.77655 15.7839 4.71855C15.7633 4.41176 15.731 4.10587 15.6869 3.80155C15.9189 3.76155 16.1509 3.72455 16.3879 3.68955ZM15.3899 6.15755C15.4159 6.15755 15.4399 6.15755 15.4579 6.16255C15.5839 6.29555 15.7199 6.42255 15.8469 6.55655C15.9669 6.42955 16.0909 6.31055 16.2119 6.18655C16.2339 6.15555 16.2729 6.16255 16.3059 6.15755L16.7069 6.55855C16.7019 6.58455 16.7119 6.61755 16.6879 6.63855L16.3109 7.01555L16.2429 7.01755C16.1119 6.88655 15.9779 6.75455 15.8489 6.62155C15.7269 6.74755 15.6009 6.87155 15.4759 6.99655C15.4559 7.02455 15.4179 7.01255 15.3869 7.01755C15.2649 6.89355 15.1409 6.77155 15.0189 6.64955C14.9839 6.62355 14.9789 6.56255 15.0119 6.53455L15.3899 6.15755ZM5.39592 13.5126H4.02692L3.00292 17.6946H4.29692C4.51992 16.8086 4.73992 15.9226 4.95992 15.0366C4.97392 14.9786 4.97692 14.9146 5.00692 14.8616C5.07292 15.8076 5.14292 16.7546 5.20892 17.7036H6.33392L7.87792 14.9576C7.92292 14.8796 7.95992 14.7976 8.01392 14.7276C7.73292 15.7186 7.47492 16.7146 7.19792 17.7066H8.56292C8.90892 16.3066 9.25192 14.9106 9.60092 13.5136C8.96092 13.5136 8.32292 13.5116 7.68392 13.5136C7.16992 14.4396 6.65192 15.3606 6.13892 16.2856C6.11592 16.3286 6.09492 16.3756 6.05892 16.4126C5.99592 15.4466 5.91892 14.4816 5.85292 13.5126H5.39592ZM10.0929 13.5126C10.0029 13.8976 9.91692 14.2826 9.82092 14.6666C10.2569 14.6666 10.6949 14.6646 11.1309 14.6666C10.9439 15.3956 10.7659 16.1266 10.5849 16.8576C11.0089 16.8526 11.4339 16.8576 11.8579 16.8556L12.4109 14.6666H13.6949C13.7419 14.6786 13.7379 14.6196 13.7489 14.5916C13.8389 14.2316 13.9289 13.8716 14.0229 13.5136L10.0929 13.5126ZM15.7739 13.5126C15.3449 13.5156 14.9139 13.5116 14.4829 13.5156C14.1453 14.9116 13.8046 16.307 13.4609 17.7016C13.8729 17.7016 14.2879 17.6996 14.7029 17.7016C14.9259 16.8176 15.1579 15.9366 15.3729 15.0526C15.4599 15.1916 15.5189 15.3486 15.5959 15.4936C15.9569 16.2276 16.3129 16.9656 16.6739 17.6986H17.9869C18.3359 16.3046 18.6869 14.9086 19.0389 13.5136H17.7269C17.5042 14.3952 17.2829 15.2772 17.0629 16.1596C16.8949 15.8456 16.7519 15.5196 16.5929 15.2006C16.3199 14.6386 16.0479 14.0746 15.7739 13.5126ZM10.5379 17.0506L10.3779 17.7156L11.6489 17.7136L11.8179 17.0506H10.5379Z" fill="white"/>\r\n</svg>\r\n',
            codes: [
              "0900",
              "0901",
              "0902",
              "0903",
              "0904",
              "0905",
              "0930",
              "0933",
              "0935",
              "0936",
              "0937",
              "0938",
              "0939",
              "0941"
            ],
            chargeRange: { min: 1000, max: 100000, customAmounts: true },
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [5000, 10000, 20000, 50000, 100000]
              },
              {
                type: "amazing",
                text: "\u0634\u06af\u0641\u062a\u200c\u0627\u0646\u06af\u06cc\u0632",
                chargeAmounts: [5000, 10000, 20000, 30000]
              }
            ]
          },
          {
            name: "MCI",
            nameop: "hamrah_Aval",
            description:
              "\u0642\u0628\u0636 \u0647\u0645\u0631\u0627\u0647 \u0627\u0648\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image20.svg",
            icon: '<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<g clip-path="url(#clip0_873_981)">\r\n<path d="M22.271 5.58656e-05C20.693 -0.00694413 19.173 0.645056 17.756 1.29606C14.675 2.72706 11.821 4.61806 9.186 6.75806C8.392 7.38606 7.684 8.11106 6.94 8.79306C6.169 9.53206 5.504 10.3701 4.809 11.1781C4.242 11.3201 3.729 11.6091 3.229 11.9011C2.089 12.5691 0.890996 13.3211 0.270996 14.5361V15.1551C0.506996 15.4131 0.747996 15.6821 1.072 15.8301C1.886 16.2031 2.798 16.2571 3.68 16.2801C6.546 16.3371 9.384 15.7901 12.15 15.0851C14.007 14.5841 15.84 13.9831 17.61 13.2291C19.256 12.4951 20.926 11.7171 22.28 10.5021C22.734 10.0811 23.224 9.52506 23.126 8.85606C23.03 8.30206 22.446 8.04506 21.969 7.88706C20.904 7.58306 19.777 7.53506 18.677 7.58306C18.774 7.28306 19.057 7.11906 19.285 6.92606C20.4119 5.98621 21.4424 4.93635 22.361 3.79206C22.949 3.07406 23.437 2.26506 23.729 1.38006V0.683056C23.56 0.383056 23.309 0.100056 22.951 0.0450559C22.7252 0.0157462 22.4987 0.00071631 22.271 5.58656e-05ZM21.519 1.21006C21.723 1.21406 21.925 1.23606 22.123 1.28506C22.373 1.46206 22.553 1.79806 22.473 2.10806C22.313 2.83206 21.927 3.47806 21.521 4.08806C21.063 4.75706 20.566 5.40406 19.985 5.97306C19.329 6.61006 18.757 7.33706 18.027 7.89706C18.169 7.91406 18.311 7.93306 18.454 7.95206C19.349 8.04406 20.308 8.05206 21.093 8.55406C21.37 8.71706 21.514 9.08406 21.369 9.38306C21.157 9.88606 20.703 10.2281 20.287 10.5571C18.83 11.6041 17.168 12.3231 15.5 12.9641C12.67 14.0365 9.71884 14.7569 6.713 15.1091C5.648 15.2531 4.568 15.2791 3.496 15.2101C2.953 15.1491 2.355 15.0581 1.944 14.6661C1.673 14.3931 1.822 13.9641 2.006 13.6861C2.671 12.7501 3.661 12.1321 4.614 11.5261C4.351 12.0421 4.065 12.5611 3.961 13.1381C3.911 13.4131 3.952 13.7121 4.128 13.9381C4.405 14.3001 4.895 14.4121 5.33 14.4281C6.272 14.4081 7.18 14.1251 8.069 13.8361C9.709 13.2731 11.259 12.4731 12.747 11.5881C11.05 12.3561 9.334 13.1521 7.492 13.4981C6.876 13.5401 6.114 13.6931 5.615 13.2361C5.501 12.8751 5.557 12.4681 5.713 12.1261C6.11 11.2551 6.735 10.5161 7.383 9.82006C8.894 8.23706 10.553 6.78406 12.364 5.55206C14.876 3.79706 17.559 2.21306 20.511 1.33206C20.838 1.25606 21.181 1.20506 21.519 1.21006ZM8.077 16.9981C7.83 17.0971 7.587 17.2031 7.343 17.3081C7.333 18.6081 7.349 19.9061 7.335 21.2051C7.34 21.4951 7.269 21.8341 6.986 21.9781C6.313 22.3261 5.613 22.6181 4.941 22.9691C4.676 23.0871 4.388 23.2841 4.088 23.1711C4.02252 23.1219 3.96743 23.0603 3.92589 22.9898C3.88436 22.9192 3.8572 22.8411 3.846 22.7601C3.86829 22.6258 3.92315 22.4991 4.00579 22.391C4.08843 22.2829 4.19632 22.1968 4.32 22.1401C5.06 21.7701 5.829 21.4621 6.56 21.0741C6.57402 20.7886 6.55894 20.5025 6.515 20.2201C5.721 20.5401 4.949 20.9251 4.202 21.3461C3.418 21.7461 3.21 22.8561 3.637 23.5831C3.869 23.8981 4.291 23.9361 4.65 23.8961C5.008 23.9091 5.283 23.6491 5.59 23.5081C6.168 23.2441 6.753 22.9881 7.314 22.6911C7.914 22.3241 8.1 21.5711 8.098 20.9111C8.094 19.6071 8.098 18.3031 8.078 16.9981H8.077ZM16.585 17.0031C16.3368 17.0968 16.0932 17.2023 15.855 17.3191C15.809 18.9161 15.835 20.5151 15.841 22.1141C16.1032 22.0256 16.356 21.9118 16.596 21.7741C16.581 20.1841 16.603 18.5941 16.586 17.0041L16.585 17.0031ZM12.215 17.0091C11.963 17.0961 11.723 17.2091 11.484 17.3291C11.487 18.9281 11.47 20.5281 11.489 22.1271C11.74 22.0241 11.986 21.9091 12.226 21.7811C12.22 20.1911 12.24 18.6001 12.215 17.0091ZM18.6 17.0121C18.522 17.2921 18.473 17.5801 18.448 17.8701C17.882 18.3921 17.361 19.0171 17.158 19.7751C17.091 20.0751 17.078 20.4581 17.35 20.6651C17.6 20.8641 17.937 20.8521 18.231 20.7701C18.309 20.9031 18.391 21.0341 18.479 21.1631C17.056 21.8351 15.632 22.5071 14.215 23.1911C14.205 23.4611 14.204 23.7311 14.209 24.0011C16.337 23.0341 18.439 22.0091 20.566 21.0391C20.5923 20.6733 20.595 20.3062 20.574 19.9401C20.101 20.1561 19.648 20.4131 19.172 20.6221C19.1041 20.6579 19.0292 20.6785 18.9525 20.6825C18.8759 20.6864 18.7992 20.6737 18.728 20.6451C19.185 20.1871 19.961 20.1301 20.308 19.5481C20.435 19.1681 20.482 18.6551 20.138 18.3721C19.638 17.9071 19.195 17.3571 18.6 17.0121ZM19.063 18.4221C19.322 18.6501 19.577 18.8841 19.804 19.1441C19.501 19.3361 19.189 19.5141 18.872 19.6811C18.915 19.2591 18.989 18.8411 19.062 18.4231L19.063 18.4221ZM18.514 18.8591C18.48 19.2131 18.411 19.5621 18.347 19.9111C18.1 20.0071 17.845 20.0871 17.577 20.0801C17.742 19.5801 18.137 19.2061 18.514 18.8591ZM9.415 19.1671C9.308 19.1681 9.2 19.1871 9.092 19.2241C8.403 19.5421 8.219 20.4521 8.438 21.1201C8.47177 21.2401 8.55075 21.3424 8.65835 21.4054C8.76594 21.4684 8.89378 21.4873 9.015 21.4581C9.592 21.3241 10.088 20.9701 10.663 20.8241C10.711 20.9131 10.759 21.0041 10.803 21.0961C10.6678 21.2028 10.5212 21.2943 10.366 21.3691C9.571 21.7331 8.772 22.0941 7.99 22.4861C7.989 22.7631 7.988 23.0411 8.002 23.3181C8.799 22.9851 9.567 22.5931 10.357 22.2471C10.648 22.1071 11.003 21.9891 11.134 21.6621C11.374 21.0111 11.151 20.2481 10.646 19.7841C10.322 19.4661 9.879 19.1621 9.416 19.1671H9.415ZM13.75 19.4711C13.666 19.7461 13.643 20.0311 13.603 20.3131C13 20.9401 12.325 21.6481 12.268 22.5651C12.214 23.0471 12.742 23.4071 13.184 23.2851C13.744 23.1161 14.262 22.8401 14.78 22.5751C15.08 22.4141 15.434 22.2301 15.514 21.8651C15.552 21.5231 15.61 21.1071 15.308 20.8631C14.808 20.3831 14.346 19.8371 13.75 19.4711ZM9.544 20.0001C9.698 20.0051 9.851 20.0901 9.994 20.1431C9.6402 20.3328 9.27326 20.4968 8.896 20.6341C8.96 20.3861 9.083 20.1251 9.351 20.0461C9.40983 20.0131 9.47664 19.9972 9.544 20.0001ZM14.172 20.8251C14.441 21.0781 14.709 21.3331 14.961 21.6031C14.389 21.9671 13.793 22.3061 13.141 22.5041C13.004 22.5601 12.858 22.5311 12.721 22.4951C13.037 21.8101 13.668 21.3601 14.172 20.8251Z" fill="white"/>\r\n</g>\r\n<defs>\r\n<clipPath id="clip0_873_981">\r\n<rect width="24" height="24" fill="white"/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n',
            codes: [
              "0910",
              "0911",
              "0912",
              "0913",
              "0914",
              "0915",
              "0916",
              "0917",
              "0918",
              "0919",
              "0990",
              "0991",
              "0992",
              "0993",
              "0994",
              "0996"
            ],
            chargeRange: {
              min: 1000,
              max: 100000,
              customAmounts: false,
              amountStep: 1000
            },
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [5000, 10000, 20000, 50000, 100000]
              }
            ]
          },
          {
            name: "RTL",
            nameop: "RighTel ",
            description: "\u0642\u0628\u0636 \u0631\u0627\u06cc\u062a\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image22.svg",
            icon: '<svg viewBox="0 0 24 14" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<path d="M16.976 13.5901C16.0861 13.5399 15.2167 13.3035 14.424 12.8961C13.8004 12.5911 13.2325 12.1834 12.744 11.6901C11.6917 10.655 11.0176 9.2963 10.83 7.83215C10.743 7.18315 10.78 6.29715 10.924 5.60015C11.381 3.38115 13.047 1.49215 15.214 0.736147C15.545 0.620147 16.064 0.493147 16.444 0.434147C16.865 0.369147 17.915 0.368147 18.327 0.432147C19.561 0.625147 20.626 1.08815 21.557 1.83815C21.887 2.10515 22.43 2.66715 22.684 3.00615C23.3579 3.90774 23.7949 4.96397 23.955 6.07815C24.015 6.46815 24.015 7.48715 23.955 7.89315C23.525 10.7981 21.334 13.0471 18.475 13.5171C18.229 13.5571 17.385 13.6281 17.329 13.6131C17.2115 13.6037 17.0938 13.596 16.976 13.5901ZM16.918 11.8961C17.6381 11.8165 18.332 11.5802 18.951 11.2038C19.57 10.8273 20.0991 10.3199 20.501 9.71715C20.9152 9.09601 21.1828 8.38887 21.2836 7.64915C21.3844 6.90943 21.3158 6.15647 21.083 5.44715C20.9352 5.03344 20.7428 4.6371 20.509 4.26515C19.112 2.18315 16.427 1.46415 14.199 2.57515C13.8908 2.73142 13.5987 2.91765 13.327 3.13115C13.0218 3.38767 12.7406 3.67152 12.487 3.97915C12.0549 4.54373 11.7492 5.19462 11.5906 5.88769C11.432 6.58077 11.4243 7.29983 11.568 7.99615C11.7263 8.74175 12.0544 9.44083 12.5266 10.0391C12.9988 10.6375 13.6026 11.1189 14.291 11.4461C15.1095 11.832 16.0177 11.9876 16.918 11.8961ZM16.083 11.7811C15.0838 11.7069 14.131 11.3294 13.352 10.6991C13.0549 10.4441 12.7836 10.1604 12.542 9.85215C12.0448 9.18161 11.731 8.39308 11.6314 7.56429C11.5319 6.73551 11.6501 5.89508 11.9743 5.12588C12.2985 4.35668 12.8176 3.68526 13.4804 3.17782C14.1432 2.67038 14.9268 2.34445 15.754 2.23215C16.1878 2.1852 16.6254 2.1862 17.059 2.23515C18.1225 2.38355 19.1056 2.88412 19.8511 3.65689C20.5967 4.42965 21.0618 5.43002 21.172 6.49815C21.2043 6.92227 21.1919 7.34861 21.135 7.77015C20.9664 8.77115 20.4871 9.69372 19.765 10.4071C19.0463 11.114 18.124 11.5778 17.128 11.7331C16.7814 11.7754 16.4321 11.7908 16.083 11.7811ZM17.783 10.5511C20.099 10.0611 21.348 7.54915 20.333 5.42215C19.9998 4.74713 19.473 4.18664 18.82 3.81215C18.2049 3.47116 17.5041 3.31584 16.8025 3.36501C16.1009 3.41417 15.4286 3.6657 14.867 4.08915C14.4042 4.45145 14.0284 4.91272 13.767 5.43915C13.6335 5.73625 13.5341 6.04759 13.471 6.36715C13.407 6.71315 13.414 7.34015 13.487 7.68215C13.819 9.25215 15.024 10.3791 16.607 10.5991C16.867 10.6361 17.507 10.6091 17.783 10.5511ZM3.155 11.7551C2.992 11.7201 2.644 11.5851 2.644 11.5571C2.65777 11.4985 2.67789 11.4415 2.704 11.3871L2.764 11.2501L2.984 11.3241C3.426 11.4741 3.566 11.3971 3.566 11.0041V10.8701L3.49 10.9461C3.321 11.1161 2.996 11.1031 2.826 10.9201C2.615 10.6941 2.564 9.96515 2.736 9.64415C2.898 9.34615 3.249 9.26415 3.491 9.46915L3.564 9.53015L3.634 9.45315C3.689 9.39215 3.73 9.37315 3.836 9.36115L3.968 9.34615L3.961 10.3531C3.954 11.3191 3.951 11.3651 3.901 11.4751C3.84 11.6061 3.738 11.6881 3.573 11.7381C3.43622 11.7718 3.29406 11.7776 3.155 11.7551ZM3.404 10.7001C3.513 10.6581 3.565 10.5031 3.566 10.2191C3.566 9.86315 3.49 9.70215 3.318 9.70215C3.135 9.70215 3.057 9.85815 3.056 10.2261C3.056 10.4921 3.106 10.6371 3.217 10.6931C3.293 10.7311 3.32 10.7321 3.404 10.7001ZM7.537 11.0201C7.37791 10.9306 7.25541 10.788 7.191 10.6171C7.123 10.4171 7.131 9.98515 7.205 9.79415C7.23299 9.71099 7.27743 9.63431 7.33567 9.56869C7.39391 9.50306 7.46476 9.44982 7.544 9.41215C7.65328 9.35939 7.77576 9.34026 7.89592 9.35717C8.01608 9.37408 8.12853 9.42628 8.219 9.50715C8.349 9.62715 8.419 9.79315 8.443 10.0431C8.471 10.3321 8.482 10.3251 7.979 10.3251H7.554L7.571 10.4191C7.624 10.7131 7.806 10.7891 8.146 10.6621C8.20083 10.6383 8.25773 10.6196 8.316 10.6061C8.319 10.6091 8.351 10.6831 8.387 10.7691L8.454 10.9251L8.385 10.9521C8.13 11.0521 8.036 11.0741 7.845 11.0721C7.695 11.0721 7.617 11.0581 7.537 11.0191V11.0201ZM8.035 10.0381C8.06 10.0131 8.011 9.82115 7.962 9.75515C7.93003 9.71618 7.88482 9.69035 7.83502 9.6826C7.78521 9.67486 7.7343 9.68573 7.692 9.71315C7.642 9.74615 7.557 9.94615 7.557 10.0311C7.557 10.0531 8.013 10.0601 8.035 10.0381ZM0 9.98815C0 8.85615 0.00300001 8.81915 0.123 8.75515C0.15 8.74115 0.343 8.72915 0.568 8.72915C0.959 8.72915 0.967 8.73015 1.115 8.80515C1.327 8.91015 1.401 9.02315 1.415 9.26315C1.429 9.47015 1.399 9.59115 1.305 9.70315C1.235 9.78515 1.077 9.87715 1.005 9.87715C0.973 9.87715 0.982 9.89015 1.037 9.92315C1.195 10.0201 1.284 10.1631 1.455 10.5971C1.546 10.8291 1.621 11.0261 1.621 11.0351C1.54163 11.0476 1.46103 11.0503 1.381 11.0431L1.139 11.0361L1.024 10.6861C0.858 10.1831 0.754 10.0511 0.525 10.0511H0.424V11.0491H0V9.98815ZM0.797 9.69415C0.917 9.65415 0.997 9.52615 0.997 9.38015C0.997 9.16815 0.879 9.07915 0.6 9.07915H0.424V9.72715L0.567 9.72615C0.644678 9.72571 0.721977 9.71429 0.797 9.69415ZM1.895 10.3121C1.895 9.69215 1.902 9.56215 1.935 9.49915C1.977 9.41615 2.101 9.35315 2.219 9.35315H2.294V11.0491H1.895V10.3121ZM4.389 9.92515C4.389 8.97215 4.395 8.79115 4.427 8.72915C4.476 8.63415 4.535 8.60515 4.674 8.60515H4.788V9.53415L4.844 9.49415C4.89641 9.44824 4.95747 9.41327 5.02358 9.39129C5.0897 9.36931 5.15954 9.36076 5.229 9.36615C5.431 9.36615 5.511 9.40615 5.599 9.55615C5.645 9.63315 5.649 9.69215 5.656 10.3441L5.664 11.0491H5.262V10.4441C5.262 9.74515 5.255 9.71915 5.096 9.70715C4.969 9.69715 4.851 9.78715 4.814 9.92215C4.8 9.97215 4.788 10.2471 4.788 10.5321V11.0491H4.39L4.389 9.92515ZM6.259 10.0761V9.10415H5.686V8.72915H7.103L7.168 8.80615C7.19067 8.83143 7.20802 8.86101 7.21902 8.89314C7.23001 8.92527 7.23443 8.95928 7.232 8.99315V9.10315H6.66V11.0491H6.26L6.259 10.0761ZM8.779 9.92615C8.779 8.97215 8.784 8.79115 8.816 8.72915C8.866 8.63415 8.924 8.60515 9.064 8.60515H9.178V11.0491H8.778L8.779 9.92615ZM1.895 9.04015C1.895 8.92515 1.953 8.79015 2.016 8.75615C2.06883 8.73692 2.1248 8.72776 2.181 8.72915H2.294V9.12915H1.895V9.04015ZM0.868 7.65515C0.706313 7.6262 0.553783 7.55936 0.422899 7.46011C0.292016 7.36086 0.186503 7.23203 0.115 7.08415C0.039 6.92315 0.038 6.91615 0.018 6.34815C0.0060365 6.13035 0.00403441 5.91212 0.012 5.69415C0.0286176 5.63498 0.0577534 5.58007 0.0974349 5.53315C0.137116 5.48622 0.186417 5.44837 0.242 5.42215C0.312747 5.39932 0.386663 5.38785 0.461 5.38815H0.599V6.00515C0.599 6.38015 0.61 6.66115 0.627 6.72215C0.663 6.85215 0.831 7.01915 0.961 7.05615C1.09 7.09115 1.779 7.09115 1.908 7.05615C1.98386 7.0268 2.05276 6.98194 2.11027 6.92442C2.16779 6.86691 2.21266 6.79801 2.242 6.72215C2.261 6.65315 2.27 6.11115 2.27 4.99915V3.37515L2.327 3.29015C2.404 3.17415 2.526 3.11815 2.7 3.11815H2.844V4.29815C2.844 5.62815 2.847 5.65715 3.011 5.81715C3.063 5.86715 3.137 5.92015 3.176 5.93515C3.216 5.95015 3.458 5.96115 3.756 5.96115C4.311 5.96115 4.371 5.95015 4.498 5.82115C4.632 5.68715 4.648 5.62715 4.663 5.23715C4.678 4.83515 4.698 4.77415 4.844 4.69915C4.91972 4.66897 4.99968 4.65075 5.081 4.64515L5.238 4.63315V5.06615C5.238 5.30515 5.25 5.54315 5.264 5.59615C5.31853 5.73753 5.42123 5.85511 5.554 5.92815C5.7257 5.98259 5.91139 5.97228 6.076 5.89915C6.306 5.78415 6.36 5.65515 6.36 5.21615C6.36 4.94815 6.367 4.88915 6.409 4.82115C6.474 4.71415 6.587 4.66115 6.779 4.64515L6.937 4.63215L6.929 5.22815C6.922 5.82315 6.921 5.82415 6.852 5.96615C6.75061 6.17939 6.57903 6.35132 6.366 6.45315L6.176 6.54715H5.826C5.424 6.54715 5.304 6.51715 5.084 6.36415L4.95 6.27015L4.838 6.35215C4.598 6.53015 4.523 6.54415 3.825 6.55415C3.313 6.56215 3.168 6.55615 3.043 6.52415C2.98565 6.50812 2.92759 6.49477 2.869 6.48415C2.859 6.48415 2.845 6.58315 2.84 6.70315C2.84364 6.83502 2.81406 6.96569 2.754 7.08315C2.607 7.39315 2.318 7.60715 1.978 7.65615C1.778 7.68615 1.071 7.68515 0.869 7.65615L0.868 7.65515ZM5.387 7.35815V7.05815H5.96V7.23915C5.96 7.53715 5.844 7.65715 5.555 7.65715H5.387V7.35815ZM6.135 7.35815V7.05815H6.734V7.21415C6.734 7.51615 6.597 7.65715 6.306 7.65715H6.135V7.35815ZM8.18 7.37315C8.18 7.10315 8.183 7.08015 8.236 7.04015C8.266 7.01615 8.339 6.94915 8.396 6.89115C8.573 6.71515 8.584 6.64715 8.602 5.69815C8.615 4.96915 8.622 4.86615 8.66 4.80815C8.723 4.71215 8.84 4.66015 9.02 4.64515L9.178 4.63315V5.64115C9.178 6.73915 9.17 6.81715 9.033 7.06715C8.889 7.33215 8.53 7.60715 8.273 7.64915L8.18 7.66415V7.37315ZM7.438 4.96615C7.444 3.39215 7.445 3.37015 7.496 3.30115C7.595 3.16815 7.698 3.11815 7.872 3.11815H8.03V6.55915H7.43L7.438 4.96615ZM3.89 3.93515C3.89 3.62515 4.019 3.49315 4.32 3.49215H4.488V4.11615H3.89V3.93515ZM4.638 3.96015C4.639 3.64115 4.777 3.49215 5.071 3.49215H5.236V4.11615H4.64L4.638 3.96015Z" fill="white"/>\r\n</svg>',
            codes: ["0920", "0921", "0922", "0923"],
            chargeRange: { min: 1000, max: 100000, customAmounts: true },
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [5000, 10000, 20000, 50000, 100000]
              },
              {
                type: "amazing",
                text: "\u0634\u06af\u0641\u062a\u200c\u0627\u0646\u06af\u06cc\u0632",
                chargeAmounts: [2000, 5000, 10000, 20000, 50000]
              }
            ]
          },
          {
            name: "SHT",
            nameop: "Shatel",
            description:
              "\u0642\u0628\u0636 \u0634\u0627\u062a\u0644 \u0645\u0648\u0628\u0627\u06cc\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image21.svg",
            codes: ["0998", "0999"],
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [1090, 2180, 5450, 10900, 21800, 54500]
              }
            ]
          }
        ]
      },
      {
        path: "operatorselect",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => -1
      },
      {
        path: "boxselect[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "typecharge",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "boxselect[].disable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "chargeType2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "fragmentInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "stepscharg", "step2") ? `` : ""
      },
      {
        path: "boxselect3[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "boxselect3[].disable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "amont",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "stepscharg",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stepscharg
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mojody",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userinfo.toman;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "uuid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "stepscharg", "step3") ? false : false
      },
      {
        path: "infopardakt",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "userinfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userbabarcat");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pardakhtid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(sessionStorage.getItem("userbabarcatToken"))
                .value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "commissionBabarkat.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commissionBabarkat.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commissionBabarkat.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "type2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "fragmentInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.phone;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "loading.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "stepscharg", "step1") ? false : false
      },
      {
        path: "id",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "info.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "stepscharg", "step3")
            ? false
            : hasVariant(globalVariants, "screen", "mobileOnly")
            ? false
            : false
      },
      {
        path: "idORcode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "bill_id"
      },
      {
        path: "idinput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.code;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fragmentInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.mobile;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "idinput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.pardakhtid == ""
                ? ""
                : $state.pardakhtid.toString();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonHasError",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "mobile",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userinfo.mobile;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "phone",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "code",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "types",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            type: "water",
            name: "\u0642\u0628\u0636 \u0622\u0628",
            icon: '<svg  viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<path d="M12.444 24.9956C9.10676 24.9892 5.97736 23.6846 3.63151 21.3215C1.28567 18.9585 -0.00478391 15.8105 1.33272e-05 12.4562C0.00800872 5.58779 5.62397 0 12.5208 0C19.4112 0.00639518 25.0032 5.61977 25 12.5154C24.9984 15.8729 23.6999 19.0145 21.3461 21.3599C18.9922 23.7054 15.8389 24.9972 12.4696 24.9972H12.4456L12.444 24.9956ZM12.4616 2.61403C6.98638 2.61403 2.51855 7.0459 2.50096 12.4946C2.48337 17.9817 6.91762 22.4631 12.3833 22.4839H12.4232C17.9065 22.4839 22.3743 18.0312 22.3823 12.5569C22.3903 6.98994 18.0392 2.62203 12.4776 2.61403H12.46H12.4616Z" fill="white"/>\r\n<path d="M20.1479 16.1219C20.4518 16.1763 20.7444 15.9652 20.8627 15.5112C20.9987 14.9916 21.141 14.4736 21.2417 13.946C21.424 12.9867 21.3936 12.9595 20.4246 12.8332C18.8383 12.6253 17.9524 11.7156 17.8997 10.2399C17.8741 9.52688 17.6998 9.3686 16.985 9.45173C16.6908 9.48531 16.3949 9.54926 16.1103 9.63559C14.6935 10.0721 13.4942 10.8907 12.3828 11.8355C10.1169 13.7605 7.70232 15.4136 4.76961 16.1571C4.42421 16.245 4.34586 16.4417 4.51377 16.7263C4.77761 17.1707 5.04306 17.6168 5.35008 18.0309C5.92415 18.8031 6.09206 18.8543 7.02432 18.5905C9.95383 17.7623 12.5155 16.2834 14.7239 14.1922C15.4594 13.4951 15.4451 13.4935 16.163 14.1858C17.2344 15.217 18.4481 15.9748 20.1495 16.1219H20.1479Z" fill="white"/>\r\n<path d="M17.9065 19.4269C17.9913 19.4029 18.1256 19.3997 18.2136 19.3342C19.0243 18.7282 19.632 17.9448 20.1245 17.0719C20.27 16.8129 20.0669 16.7073 19.8414 16.6914C18.2615 16.5683 17.0334 15.7609 15.9493 14.6833C15.6646 14.4003 15.4168 14.3971 15.1273 14.6673C14.7644 15.0062 14.395 15.342 14.0112 15.6569C12.0491 17.2653 9.88237 18.4916 7.43098 19.1967C7.24869 19.2494 6.97524 19.2414 6.93047 19.4589C6.8777 19.7179 7.16393 19.801 7.33024 19.9193C7.9171 20.335 8.55673 20.6532 9.22195 20.9298C9.74005 21.1456 10.2102 21.1072 10.7123 20.8658C12.0811 20.2071 13.3891 19.4477 14.5565 18.4756C14.9962 18.1095 15.3192 18.0407 15.791 18.4277C16.3922 18.9217 17.0862 19.2798 17.9065 19.4269Z" fill="white"/>\r\n<path d="M12.5526 21.4924C14.2013 21.4844 15.642 21.0335 16.9885 20.2501C17.3483 20.0407 17.3579 19.8632 16.9549 19.7049C16.4912 19.5227 16.0578 19.2828 15.65 18.9951C15.4406 18.8464 15.2103 18.7888 14.9864 18.9567C13.9214 19.7577 12.8053 20.4787 11.6172 21.0815C11.5308 21.1247 11.4253 21.1806 11.4493 21.2989C11.4716 21.4108 11.5804 21.4444 11.6795 21.4508C11.9961 21.47 12.3128 21.4812 12.551 21.4924H12.5526Z" fill="white"/>\r\n</svg>\r\n'
          },
          {
            type: "elec",
            name: "\u0642\u0628\u0636 \u0628\u0631\u0642",
            icon: '<svg viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<g clip-path="url(#clip0_867_1021)">\r\n<path d="M6.92306 17.2731C6.45665 17.7951 6.00866 18.296 5.56066 18.7973C4.99057 19.4356 4.41822 20.0719 3.85297 20.7146C3.75898 20.8215 3.70827 20.8151 3.62364 20.7111C3.4405 20.4856 3.24864 20.2673 3.05743 20.0483C3.00026 19.983 2.99574 19.9291 3.0374 19.8477C3.68534 18.5854 4.32778 17.3199 4.97636 16.058C5.02513 15.9627 5.02416 15.9026 4.9573 15.8164C4.02933 14.6222 3.10491 13.4255 2.18275 12.2272C2.11395 12.1378 2.04225 12.0977 1.92726 12.0993C1.49121 12.1055 1.05517 12.0971 0.61912 12.1045C0.482169 12.1067 0.438565 12.0628 0.4531 11.9288C0.472802 11.7472 0.482492 11.5641 0.489275 11.3813C0.492505 11.2954 0.531588 11.2631 0.60943 11.2737C0.714728 11.2883 0.793539 11.2385 0.875257 11.1833C1.65045 10.6587 2.42661 10.1355 3.2031 9.61256C3.44858 9.44718 3.72539 9.49208 3.90142 9.72044C4.04871 9.91165 4.16369 10.1717 4.35878 10.2702C4.54838 10.3658 4.82196 10.2954 5.05872 10.2957C6.70052 10.2976 8.34231 10.298 9.98411 10.3031C10.1078 10.3034 10.1931 10.2715 10.2719 10.1726C10.4227 9.98336 10.5875 9.80506 10.7474 9.62322C10.882 9.47012 11.1521 9.48207 11.2725 9.64776C11.6366 10.1481 12.0016 10.6478 12.3607 11.1516C12.4208 11.2359 12.4841 11.2702 12.5868 11.267C12.8236 11.2602 13.0607 11.2586 13.2971 11.267C13.4298 11.2718 13.5342 11.2418 13.6253 11.1387C13.7167 11.035 14.1078 10.9772 14.2309 11.0341C14.2897 11.0612 14.2916 11.1197 14.3061 11.1691C14.4479 11.6487 14.5878 12.129 14.7289 12.609C14.7435 12.6587 14.747 12.7137 14.8013 12.7692C14.8207 12.7053 14.8394 12.6526 14.8526 12.5987C15.1152 11.5334 15.3804 10.4688 15.6349 9.40132C15.6727 9.24305 15.7386 9.19815 15.8956 9.20397C16.2935 9.2185 16.6921 9.21979 17.0904 9.21527C17.2231 9.21365 17.2629 9.26598 17.2813 9.38904C17.4182 10.3148 17.5613 11.2398 17.7031 12.1649C17.7086 12.2001 17.7031 12.2414 17.7564 12.2702C18.7851 9.49046 19.8129 6.71366 20.841 3.93652C20.8543 3.93749 20.8675 3.93814 20.8804 3.93911C20.9072 4.19201 20.9353 4.44492 20.9605 4.69815C21.0868 5.95623 21.2131 7.21398 21.3384 8.47205C21.4512 9.60158 21.562 10.7314 21.675 11.8609C21.7987 13.0974 21.9244 14.3338 22.0481 15.5706C22.1611 16.7001 22.257 17.8315 22.3946 18.9582C22.4366 19.3022 22.3494 19.5522 22.1414 19.8083C21.7981 20.2305 21.4528 20.6494 21.0684 21.0347C21.0313 21.0722 20.9909 21.1064 20.9221 21.1697C20.5242 18.0825 20.1304 15.0263 19.7367 11.9701C19.727 11.9691 19.7173 11.9685 19.7076 11.9675C19.5671 12.3842 19.4266 12.8005 19.2864 13.2172C18.9079 14.3441 18.528 15.4704 18.1537 16.5987C18.1136 16.7191 18.0613 16.7686 17.9279 16.7676C17.5674 16.7647 17.2067 16.7753 16.8465 16.7892C16.7244 16.7941 16.6802 16.7544 16.6618 16.6313C16.4722 15.3706 16.2764 14.1113 16.0817 12.8513C16.0784 12.8312 16.0707 12.8118 16.0594 12.7728C16.0064 12.828 16.0035 12.8861 15.9912 12.9385C15.7751 13.849 15.5574 14.7592 15.3468 15.671C15.3191 15.7905 15.2767 15.8435 15.1463 15.8383C14.9043 15.8283 14.6618 15.8283 14.4198 15.8383C14.2919 15.8435 14.2419 15.7989 14.2189 15.6749C14.0148 14.5751 13.8055 13.4759 13.5978 12.3768C13.5939 12.3558 13.5884 12.3345 13.5878 12.3131C13.5817 12.1471 13.5048 12.0932 13.3326 12.0964C12.7083 12.108 12.0839 12.1042 11.4596 12.0983C11.3333 12.0971 11.2535 12.1384 11.1763 12.2372C10.3155 13.3403 9.45375 14.4427 8.58295 15.5379C8.47087 15.6791 8.46957 15.7799 8.54612 15.9352C9.92565 18.7424 11.2987 21.5528 12.6731 24.3622C12.7527 24.525 12.702 24.6065 12.5209 24.6067C12.1007 24.6064 11.6824 24.5732 11.2635 24.5447C11.1437 24.5367 11.0994 24.4627 11.05 24.3774C9.87817 22.359 8.70568 20.3412 7.53353 18.3232C7.33391 17.9795 7.13398 17.6355 6.92306 17.2721V17.2731ZM8.6947 12.1197H4.48023C4.498 12.1529 4.50349 12.1681 4.51285 12.1804C5.13689 12.9827 5.76285 13.7837 6.38366 14.5887C6.47313 14.7046 6.50962 14.6222 6.5613 14.5644C7.24703 13.7918 7.93275 13.0195 8.61751 12.246C8.64787 12.2117 8.69341 12.1846 8.6947 12.1197Z" fill="white"/>\r\n<path d="M12.5 25C10.8127 25 9.17571 24.6696 7.63437 24.0174C6.14599 23.3879 4.80911 22.4864 3.66118 21.3388C2.51324 20.1909 1.61208 18.8543 0.982558 17.3656C0.330426 15.8243 0 14.1873 0 12.5C0 10.8127 0.330426 9.17571 0.982558 7.63437C1.61208 6.14599 2.51324 4.80911 3.66118 3.66118C4.80911 2.51324 6.14567 1.61208 7.63437 0.982558C9.17571 0.330426 10.8127 0 12.5 0C14.1873 0 15.8243 0.330426 17.3656 0.982558C18.854 1.61208 20.1909 2.51324 21.3388 3.66118C22.4868 4.80911 23.3879 6.14567 24.0174 7.63437C24.6693 9.17571 25 10.8127 25 12.5C25 14.1873 24.6696 15.8243 24.0174 17.3656C23.3879 18.854 22.4868 20.1909 21.3388 21.3388C20.1909 22.4868 18.8543 23.3879 17.3656 24.0174C15.8243 24.6693 14.1873 25 12.5 25ZM12.5 0.775194C6.03488 0.775194 0.775194 6.03488 0.775194 12.5C0.775194 18.9651 6.03488 24.2248 12.5 24.2248C18.9651 24.2248 24.2248 18.9651 24.2248 12.5C24.2248 6.03488 18.9651 0.775194 12.5 0.775194Z" fill="white"/>\r\n</g>\r\n<defs>\r\n<clipPath id="clip0_867_1021">\r\n<rect width="25" height="25" fill="white"/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n'
          },
          {
            type: "gas",
            name: "\u0642\u0628\u0636 \u06af\u0627\u0632",
            icon: '<svg  viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<path d="M12.4426 24.9668C11.698 24.9473 10.9925 24.9546 10.3015 24.7649C10.0971 24.7089 9.88052 24.6846 9.6737 24.6384C8.50582 24.3684 7.39879 23.9426 6.35256 23.3539C5.76862 23.0255 5.21142 22.6582 4.6883 22.2519C4.27468 21.9308 3.89757 21.5538 3.52531 21.1791C3.15791 20.8094 2.83186 20.4056 2.50096 20.0066C2.25522 19.7098 2.02652 19.3887 1.84891 19.0506C1.65426 18.6832 1.43527 18.3305 1.25522 17.9534C0.895119 17.1993 0.58611 16.4355 0.396329 15.6205C0.255209 15.0148 0.250352 15.0196 0.861057 15.0148C2.7978 14.9977 4.73454 14.9759 6.67128 14.971C6.94865 14.971 7.08492 14.8688 7.19927 14.6255C7.45718 14.0733 7.74915 13.5381 8.02653 12.9957C8.36473 12.3315 8.71507 11.6723 9.0338 11.0009C9.11409 10.8306 9.19439 10.7649 9.37444 10.7698C10.299 10.7892 11.2236 10.8038 12.1482 10.8087C12.3574 10.8087 12.389 10.8671 12.3307 11.0666C12.0581 12.0056 11.7005 12.9154 11.3915 13.8422C11.1871 14.4553 11.192 14.4577 11.8319 14.4577C13.1165 14.4577 14.4012 14.448 15.6859 14.465C15.9949 14.4699 16.1384 14.3409 16.2431 14.0709C16.4547 13.5333 16.737 13.0273 17.0022 12.5116C17.2041 12.1175 17.3988 11.7161 17.574 11.3098C17.6567 11.1177 17.7564 11.0301 17.9827 11.0325C20.192 11.0422 22.4012 11.0422 24.6105 11.0325C24.8416 11.0325 24.9487 11.0885 24.9438 11.3342C24.9389 11.5653 25.0703 11.8523 24.9462 12.0153C24.8124 12.1929 24.5107 12.064 24.2869 12.0591C23.1701 12.0372 22.1019 12.2975 21.0655 12.6648C20.1044 13.003 19.2309 13.5163 18.4815 14.2315C17.7321 14.9467 17.2455 15.7835 16.9827 16.7906C16.7467 17.698 16.7735 18.603 16.8854 19.503C16.9657 20.1404 17.0703 20.7923 17.3501 21.3859C17.647 22.0135 17.9973 22.6144 18.4645 23.135C18.6469 23.3393 18.5423 23.4464 18.3696 23.5291C17.9681 23.7188 17.5569 23.8867 17.1555 24.0764C16.9778 24.1616 16.8854 24.1202 16.7832 23.9524C16.372 23.2785 15.9414 22.6144 15.518 21.9454C15.2747 21.5611 15.0314 21.1767 14.8002 20.7875C14.6859 20.5953 14.5496 20.5004 14.3136 20.5029C12.6007 20.5199 10.8878 20.5248 9.17494 20.5369C9.09221 20.5369 8.98273 20.4931 8.93406 20.5807C8.88784 20.6683 8.9803 20.7461 9.02896 20.8069C9.39879 21.2667 9.77592 21.7168 10.153 22.1692C10.5472 22.6436 10.9365 23.118 11.3331 23.5899C11.7029 24.0302 12.1141 24.4389 12.4474 24.9644L12.4426 24.9668Z" fill="white"/>\r\n<path d="M12.6594 0C13.4234 0.0194613 14.1485 0.0243287 14.8589 0.192182C15.1801 0.267595 15.5037 0.335706 15.82 0.428147C16.6107 0.65925 17.3796 0.943871 18.1168 1.31364C19.6545 2.08236 20.9709 3.13327 22.0755 4.43961C22.4964 4.93587 22.8589 5.47836 23.202 6.0403C23.8176 7.04986 24.2823 8.1105 24.5621 9.25628C24.601 9.4144 24.6594 9.57009 24.7129 9.72335C24.7957 9.95932 24.73 10.0445 24.4648 10.0469C22.7227 10.0542 20.9806 10.0737 19.2385 10.0907C18.7227 10.0955 18.2069 10.1053 17.691 10.0955C17.4404 10.0907 17.2945 10.1807 17.2093 10.4167C17.0292 10.9081 16.7227 11.3386 16.4988 11.8081C16.2701 12.2874 15.9733 12.7326 15.7689 13.2264C15.5475 13.7567 15.5134 13.7762 14.9343 13.7762C14.1363 13.7762 13.3382 13.7762 12.5402 13.7786C12.1703 13.7786 12.1655 13.7786 12.2725 13.4356C12.5937 12.4114 12.9149 11.3873 13.2507 10.368C13.3139 10.1734 13.2725 10.1369 13.0852 10.1369C11.6253 10.1345 10.1655 10.1247 8.70563 10.1126C8.54991 10.1126 8.46476 10.171 8.3796 10.2975C8.15576 10.6186 8.03166 10.9883 7.85892 11.3313C7.52801 11.9857 7.21902 12.6523 6.89299 13.3091C6.88082 13.3359 6.86621 13.3602 6.85405 13.3869C6.47692 14.2603 6.67644 14.09 5.70807 14.1046C3.94651 14.1289 2.18496 14.1362 0.423406 14.1654C0.148466 14.1703 0.0389679 14.0948 0.0487003 13.8151C0.0559995 13.584 0.0243539 13.3505 0.00245609 13.1193C-0.0121425 12.9685 0.0365312 12.9077 0.197115 12.9272C0.936775 13.022 1.67642 12.9807 2.40635 12.842C3.40148 12.6498 4.37718 12.3652 5.25796 11.8665C5.94409 11.4773 6.59372 11.0151 7.10953 10.3923C8.01951 9.2952 8.39419 8.02779 8.33823 6.62171C8.3066 5.83596 8.28471 5.04291 8.0414 4.28878C7.79565 3.52736 7.45016 2.80243 6.91975 2.18453C6.80052 2.04587 6.71295 1.88045 6.59859 1.73692C6.5183 1.63475 6.59859 1.58853 6.65455 1.55204C7.08764 1.26499 7.5037 0.946307 8.02438 0.814943C8.14847 0.783319 8.20442 0.836835 8.26038 0.926844C8.54992 1.38175 8.83215 1.84396 9.13385 2.29157C9.52315 2.86811 9.91246 3.44708 10.2458 4.05038C10.494 4.50042 10.7859 4.54908 11.2215 4.53935C12.8176 4.50772 14.4137 4.51015 16.0098 4.49556C16.0949 4.49556 16.2093 4.53448 16.2555 4.45664C16.3163 4.3569 16.202 4.27176 16.146 4.21337C15.6302 3.66602 15.2044 3.0457 14.6837 2.50321C14.4112 2.21859 14.1922 1.88045 13.9392 1.57636C13.5961 1.16281 13.2458 0.754125 12.8881 0.352735C12.803 0.255429 12.747 0.153259 12.6643 0.00486636L12.6594 0Z" fill="white"/>\r\n<path d="M17.6696 18.8915C17.6501 17.8966 17.9348 16.9965 18.4433 16.1597C19.1076 15.0625 20.0394 14.2792 21.2122 13.7586C22.3095 13.2721 23.4482 13.0678 24.6428 13.1432C24.8861 13.1578 24.9981 13.2186 24.9494 13.4886C24.8959 13.783 24.874 14.0846 24.8569 14.3838C24.8448 14.6028 24.7499 14.6587 24.5407 14.6344C23.8959 14.5614 23.2511 14.6003 22.6355 14.7925C21.8886 15.0261 21.2073 15.3739 20.621 15.9334C19.5674 16.9381 19.1684 18.1301 19.3582 19.5508C19.4749 20.4266 19.9445 21.1126 20.5041 21.7548C20.5942 21.8594 20.6015 21.8764 20.5114 21.9932C20.273 22.3119 19.9372 22.4992 19.6331 22.7352C19.5114 22.83 19.4117 22.83 19.2852 22.706C19.0248 22.4554 18.7986 22.1756 18.6015 21.8789C18.0029 20.9739 17.6428 19.9838 17.6672 18.8891L17.6696 18.8915Z" fill="white"/>\r\n<path d="M1.08538 11.9096C0.773946 11.8999 0.481964 11.9072 0.192426 11.8634C0.048874 11.8415 -0.00952251 11.7831 0.00750912 11.6347C0.0488717 11.2795 0.0853835 10.9219 0.114581 10.5643C0.129179 10.3795 0.211901 10.3478 0.38465 10.3746C1.06592 10.4768 1.74716 10.4524 2.4041 10.2359C3.30191 9.93915 4.05618 9.43072 4.69851 8.72525C5.14377 8.23628 5.45033 7.68407 5.7204 7.0978C5.82259 6.87643 5.84938 6.63073 5.86885 6.38989C5.93211 5.59198 5.83963 4.81839 5.42844 4.11292C5.27272 3.84533 5.06348 3.60936 4.8226 3.41231C4.50874 3.15445 4.5063 3.09607 4.8153 2.83334C5.02211 2.65819 5.263 2.52682 5.43575 2.31518C5.56957 2.15219 5.69609 2.19841 5.82747 2.32978C6.2411 2.74333 6.68878 3.12526 7.00508 3.62882C7.09997 3.77964 7.16566 3.9402 7.21676 4.10319C7.36761 4.58485 7.44062 5.08599 7.50631 5.58468C7.6085 6.37773 7.42115 7.13915 7.10728 7.84705C6.84937 8.42846 6.50143 8.97095 6.0586 9.45748C5.71311 9.83697 5.34814 10.1873 4.96371 10.5157C4.68877 10.7517 4.36033 10.9317 4.04159 11.1141C3.37979 11.4936 2.6523 11.6931 1.91264 11.8585C1.63527 11.9218 1.35059 11.8974 1.09025 11.9096H1.08538Z" fill="white"/>\r\n<path d="M1.13423 9.42115C0.355638 9.42115 0.360526 9.42116 0.547874 8.66703C0.606268 8.43836 0.688983 8.34106 0.963923 8.35565C2.08314 8.42133 3.08801 7.78641 3.45541 6.70144C3.70358 5.97164 3.50164 5.30509 3.00772 4.73342C2.86904 4.57043 2.79602 4.48042 3.01257 4.32716C3.14882 4.22986 3.23156 4.06687 3.39701 3.98416C3.67682 3.84306 3.82767 3.86739 4.00772 4.12282C4.71818 5.12507 4.87146 6.21491 4.42377 7.35096C4.14397 8.0613 3.616 8.57702 2.94446 8.96625C2.37512 9.29709 1.7717 9.40413 1.13423 9.42115Z" fill="white"/>\r\n<path d="M23.9127 15.6128C24.362 15.5998 24.5339 15.7977 24.4285 16.2064C24.3142 16.654 24.3093 16.6248 23.8714 16.6832C23.1074 16.7805 22.4431 17.0651 22.0125 17.7584C21.4967 18.5855 21.4966 19.3712 22.0562 20.1643C22.1682 20.3224 22.1779 20.427 22.0392 20.5608C21.9005 20.6946 21.7692 20.8406 21.6499 20.9938C21.4894 21.1982 21.3628 21.1641 21.2217 20.9695C20.5599 20.0597 20.2558 19.0939 20.6402 17.9725C20.9614 17.0408 21.5648 16.4058 22.4431 15.9631C22.9346 15.7174 23.4334 15.6517 23.9103 15.6104L23.9127 15.6128Z" fill="white"/>\r\n</svg>\r\n'
          },
          {
            type: "phone",
            name: "\u0642\u0628\u0636 \u062a\u0644\u0641\u0646",
            icon: '<svg viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<path d="M12.4426 24.9668C11.698 24.9473 10.9925 24.9546 10.3015 24.7649C10.0971 24.7089 9.88052 24.6846 9.6737 24.6384C8.50582 24.3684 7.39879 23.9426 6.35256 23.3539C5.76862 23.0255 5.21142 22.6582 4.6883 22.2519C4.27468 21.9308 3.89757 21.5538 3.52531 21.1791C3.15791 20.8094 2.83186 20.4056 2.50096 20.0066C2.25522 19.7098 2.02652 19.3887 1.84891 19.0506C1.65426 18.6832 1.43527 18.3305 1.25522 17.9534C0.895119 17.1993 0.58611 16.4355 0.396329 15.6205C0.255209 15.0148 0.250352 15.0196 0.861057 15.0148C2.7978 14.9977 4.73454 14.9759 6.67128 14.971C6.94865 14.971 7.08492 14.8688 7.19927 14.6255C7.45718 14.0733 7.74915 13.5381 8.02653 12.9957C8.36473 12.3315 8.71507 11.6723 9.0338 11.0009C9.11409 10.8306 9.19439 10.7649 9.37444 10.7698C10.299 10.7892 11.2236 10.8038 12.1482 10.8087C12.3574 10.8087 12.389 10.8671 12.3307 11.0666C12.0581 12.0056 11.7005 12.9154 11.3915 13.8422C11.1871 14.4553 11.192 14.4577 11.8319 14.4577C13.1165 14.4577 14.4012 14.448 15.6859 14.465C15.9949 14.4699 16.1384 14.3409 16.2431 14.0709C16.4547 13.5333 16.737 13.0273 17.0022 12.5116C17.2041 12.1175 17.3988 11.7161 17.574 11.3098C17.6567 11.1177 17.7564 11.0301 17.9827 11.0325C20.192 11.0422 22.4012 11.0422 24.6105 11.0325C24.8416 11.0325 24.9487 11.0885 24.9438 11.3342C24.9389 11.5653 25.0703 11.8523 24.9462 12.0153C24.8124 12.1929 24.5107 12.064 24.2869 12.0591C23.1701 12.0372 22.1019 12.2975 21.0655 12.6648C20.1044 13.003 19.2309 13.5163 18.4815 14.2315C17.7321 14.9467 17.2455 15.7835 16.9827 16.7906C16.7467 17.698 16.7735 18.603 16.8854 19.503C16.9657 20.1404 17.0703 20.7923 17.3501 21.3859C17.647 22.0135 17.9973 22.6144 18.4645 23.135C18.6469 23.3393 18.5423 23.4464 18.3696 23.5291C17.9681 23.7188 17.5569 23.8867 17.1555 24.0764C16.9778 24.1616 16.8854 24.1202 16.7832 23.9524C16.372 23.2785 15.9414 22.6144 15.518 21.9454C15.2747 21.5611 15.0314 21.1767 14.8002 20.7875C14.6859 20.5953 14.5496 20.5004 14.3136 20.5029C12.6007 20.5199 10.8878 20.5248 9.17494 20.5369C9.09221 20.5369 8.98273 20.4931 8.93406 20.5807C8.88784 20.6683 8.9803 20.7461 9.02896 20.8069C9.39879 21.2667 9.77592 21.7168 10.153 22.1692C10.5472 22.6436 10.9365 23.118 11.3331 23.5899C11.7029 24.0302 12.1141 24.4389 12.4474 24.9644L12.4426 24.9668Z" fill="white"/>\r\n<path d="M12.6594 0C13.4234 0.0194613 14.1485 0.0243287 14.8589 0.192182C15.1801 0.267595 15.5037 0.335706 15.82 0.428147C16.6107 0.65925 17.3796 0.943871 18.1168 1.31364C19.6545 2.08236 20.9709 3.13327 22.0755 4.43961C22.4964 4.93587 22.8589 5.47836 23.202 6.0403C23.8176 7.04986 24.2823 8.1105 24.5621 9.25628C24.601 9.4144 24.6594 9.57009 24.7129 9.72335C24.7957 9.95932 24.73 10.0445 24.4648 10.0469C22.7227 10.0542 20.9806 10.0737 19.2385 10.0907C18.7227 10.0955 18.2069 10.1053 17.691 10.0955C17.4404 10.0907 17.2945 10.1807 17.2093 10.4167C17.0292 10.9081 16.7227 11.3386 16.4988 11.8081C16.2701 12.2874 15.9733 12.7326 15.7689 13.2264C15.5475 13.7567 15.5134 13.7762 14.9343 13.7762C14.1363 13.7762 13.3382 13.7762 12.5402 13.7786C12.1703 13.7786 12.1655 13.7786 12.2725 13.4356C12.5937 12.4114 12.9149 11.3873 13.2507 10.368C13.3139 10.1734 13.2725 10.1369 13.0852 10.1369C11.6253 10.1345 10.1655 10.1247 8.70563 10.1126C8.54991 10.1126 8.46476 10.171 8.3796 10.2975C8.15576 10.6186 8.03166 10.9883 7.85892 11.3313C7.52801 11.9857 7.21902 12.6523 6.89299 13.3091C6.88082 13.3359 6.86621 13.3602 6.85405 13.3869C6.47692 14.2603 6.67644 14.09 5.70807 14.1046C3.94651 14.1289 2.18496 14.1362 0.423406 14.1654C0.148466 14.1703 0.0389679 14.0948 0.0487003 13.8151C0.0559995 13.584 0.0243539 13.3505 0.00245609 13.1193C-0.0121425 12.9685 0.0365312 12.9077 0.197115 12.9272C0.936775 13.022 1.67642 12.9807 2.40635 12.842C3.40148 12.6498 4.37718 12.3652 5.25796 11.8665C5.94409 11.4773 6.59372 11.0151 7.10953 10.3923C8.01951 9.2952 8.39419 8.02779 8.33823 6.62171C8.3066 5.83596 8.28471 5.04291 8.0414 4.28878C7.79565 3.52736 7.45016 2.80243 6.91975 2.18453C6.80052 2.04587 6.71295 1.88045 6.59859 1.73692C6.5183 1.63475 6.59859 1.58853 6.65455 1.55204C7.08764 1.26499 7.5037 0.946307 8.02438 0.814943C8.14847 0.783319 8.20442 0.836835 8.26038 0.926844C8.54992 1.38175 8.83215 1.84396 9.13385 2.29157C9.52315 2.86811 9.91246 3.44708 10.2458 4.05038C10.494 4.50042 10.7859 4.54908 11.2215 4.53935C12.8176 4.50772 14.4137 4.51015 16.0098 4.49556C16.0949 4.49556 16.2093 4.53448 16.2555 4.45664C16.3163 4.3569 16.202 4.27176 16.146 4.21337C15.6302 3.66602 15.2044 3.0457 14.6837 2.50321C14.4112 2.21859 14.1922 1.88045 13.9392 1.57636C13.5961 1.16281 13.2458 0.754125 12.8881 0.352735C12.803 0.255429 12.747 0.153259 12.6643 0.00486636L12.6594 0Z" fill="white"/>\r\n<path d="M17.6696 18.8915C17.6501 17.8966 17.9348 16.9965 18.4433 16.1597C19.1076 15.0625 20.0394 14.2792 21.2122 13.7586C22.3095 13.2721 23.4482 13.0678 24.6428 13.1432C24.8861 13.1578 24.9981 13.2186 24.9494 13.4886C24.8959 13.783 24.874 14.0846 24.8569 14.3838C24.8448 14.6028 24.7499 14.6587 24.5407 14.6344C23.8959 14.5614 23.2511 14.6003 22.6355 14.7925C21.8886 15.0261 21.2073 15.3739 20.621 15.9334C19.5674 16.9381 19.1684 18.1301 19.3582 19.5508C19.4749 20.4266 19.9445 21.1126 20.5041 21.7548C20.5942 21.8594 20.6015 21.8764 20.5114 21.9932C20.273 22.3119 19.9372 22.4992 19.6331 22.7352C19.5114 22.83 19.4117 22.83 19.2852 22.706C19.0248 22.4554 18.7986 22.1756 18.6015 21.8789C18.0029 20.9739 17.6428 19.9838 17.6672 18.8891L17.6696 18.8915Z" fill="white"/>\r\n<path d="M1.08538 11.9096C0.773946 11.8999 0.481964 11.9072 0.192426 11.8634C0.048874 11.8415 -0.00952251 11.7831 0.00750912 11.6347C0.0488717 11.2795 0.0853835 10.9219 0.114581 10.5643C0.129179 10.3795 0.211901 10.3478 0.38465 10.3746C1.06592 10.4768 1.74716 10.4524 2.4041 10.2359C3.30191 9.93915 4.05618 9.43072 4.69851 8.72525C5.14377 8.23628 5.45033 7.68407 5.7204 7.0978C5.82259 6.87643 5.84938 6.63073 5.86885 6.38989C5.93211 5.59198 5.83963 4.81839 5.42844 4.11292C5.27272 3.84533 5.06348 3.60936 4.8226 3.41231C4.50874 3.15445 4.5063 3.09607 4.8153 2.83334C5.02211 2.65819 5.263 2.52682 5.43575 2.31518C5.56957 2.15219 5.69609 2.19841 5.82747 2.32978C6.2411 2.74333 6.68878 3.12526 7.00508 3.62882C7.09997 3.77964 7.16566 3.9402 7.21676 4.10319C7.36761 4.58485 7.44062 5.08599 7.50631 5.58468C7.6085 6.37773 7.42115 7.13915 7.10728 7.84705C6.84937 8.42846 6.50143 8.97095 6.0586 9.45748C5.71311 9.83697 5.34814 10.1873 4.96371 10.5157C4.68877 10.7517 4.36033 10.9317 4.04159 11.1141C3.37979 11.4936 2.6523 11.6931 1.91264 11.8585C1.63527 11.9218 1.35059 11.8974 1.09025 11.9096H1.08538Z" fill="white"/>\r\n<path d="M1.13423 9.42115C0.355638 9.42115 0.360526 9.42116 0.547874 8.66703C0.606268 8.43836 0.688983 8.34106 0.963923 8.35565C2.08314 8.42133 3.08801 7.78641 3.45541 6.70144C3.70358 5.97164 3.50164 5.30509 3.00772 4.73342C2.86904 4.57043 2.79602 4.48042 3.01257 4.32716C3.14882 4.22986 3.23156 4.06687 3.39701 3.98416C3.67682 3.84306 3.82767 3.86739 4.00772 4.12282C4.71818 5.12507 4.87146 6.21491 4.42377 7.35096C4.14397 8.0613 3.616 8.57702 2.94446 8.96625C2.37512 9.29709 1.7717 9.40413 1.13423 9.42115Z" fill="white"/>\r\n<path d="M23.9127 15.6128C24.362 15.5998 24.5339 15.7977 24.4285 16.2064C24.3142 16.654 24.3093 16.6248 23.8714 16.6832C23.1074 16.7805 22.4431 17.0651 22.0125 17.7584C21.4967 18.5855 21.4966 19.3712 22.0562 20.1643C22.1682 20.3224 22.1779 20.427 22.0392 20.5608C21.9005 20.6946 21.7692 20.8406 21.6499 20.9938C21.4894 21.1982 21.3628 21.1641 21.2217 20.9695C20.5599 20.0597 20.2558 19.0939 20.6402 17.9725C20.9614 17.0408 21.5648 16.4058 22.4431 15.9631C22.9346 15.7174 23.4334 15.6517 23.9103 15.6104L23.9127 15.6128Z" fill="white"/>\r\n</svg>'
          },
          {
            type: "mobile",
            name: "\u0642\u0628\u0636 \u0645\u0648\u0628\u0627\u06cc\u0644",
            icon: "\ud83d\udcf1"
          },
          {
            type: "city",
            name: "\u0642\u0628\u0636 \u0639\u0648\u0627\u0631\u0636 \u0634\u0647\u0631\u062f\u0627\u0631\u06cc",
            icon: '<svg viewBox="0 0 69 69" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<g clip-path="url(#clip0_878_980)">\r\n<path d="M54.2298 54.2454C54.3056 54.6226 54.4241 54.9895 54.4729 55.374C54.6911 57.0865 54.101 58.5165 52.957 59.7562C52.636 60.1043 52.2827 60.4182 51.9046 60.7029C51.7861 60.7923 51.7196 60.8785 51.7705 61.0417C52.1768 62.3448 51.8983 63.5555 51.2583 64.7121C50.8074 65.5289 50.2276 66.2501 49.5741 66.91C48.9944 67.4961 48.6931 68.1643 48.8344 68.9967C48.8032 68.9967 48.7772 69.0039 48.771 68.9967C48.2588 68.3129 47.5585 68.0718 46.7263 68.0656C45.4348 68.0562 44.1672 67.8868 42.988 67.3111C42.1682 66.911 41.5178 66.3249 41.0918 65.5102C41.0056 65.345 40.909 65.3065 40.7272 65.3315C39.6549 65.4728 38.592 65.4489 37.5551 65.0987C36.2678 64.6653 35.3327 63.8194 34.674 62.6452C34.6304 62.5672 34.6158 62.4342 34.5036 62.4415C34.4164 62.4477 34.3977 62.5683 34.3561 62.641C33.3337 64.4617 31.7503 65.3346 29.6921 65.4084C29.209 65.426 28.729 65.3948 28.25 65.3325C28.1378 65.3179 28.0453 65.3138 27.9819 65.4354C27.1715 66.9838 25.7668 67.6145 24.147 67.9076C23.5392 68.0178 22.9242 68.0791 22.306 68.0718C21.5215 68.0624 20.842 68.2817 20.3298 68.9063C20.3142 68.925 20.2831 68.9302 20.2581 68.9416C20.1854 68.873 20.2155 68.7919 20.2197 68.7202C20.255 68.0531 20.0108 67.5002 19.5527 67.0243C18.7807 66.2231 18.0711 65.3741 17.5838 64.3609C17.0716 63.2957 16.9022 62.1973 17.2575 61.05C17.3064 60.891 17.2555 60.8048 17.1329 60.7123C16.5915 60.3049 16.1001 59.8435 15.6824 59.3083C14.552 57.8597 14.2331 56.2542 14.7442 54.4865C14.766 54.4127 14.7837 54.3379 14.8035 54.2631C14.8097 54.2319 14.8097 54.209 14.7681 54.2298C14.3899 54.3015 14.0232 54.4221 13.6398 54.4719C11.9629 54.6871 10.5509 54.1228 9.32177 53.015C8.94774 52.6783 8.61422 52.3042 8.31084 51.9041C8.22148 51.7856 8.13525 51.7181 7.97213 51.769C6.67028 52.1743 5.45986 51.8989 4.30244 51.2577C3.48579 50.8057 2.76474 50.2258 2.10498 49.5732C1.519 48.9933 0.850928 48.692 0 48.8364C0.0176627 48.7928 0.0197407 48.7616 0.0374034 48.7491C0.684691 48.2638 0.94132 47.6039 0.944437 46.8121C0.949632 45.7272 1.07223 44.6568 1.4338 43.6249C1.82134 42.5202 2.47278 41.6276 3.52943 41.0747C3.69359 40.9885 3.70294 40.8846 3.68216 40.7245C3.54086 39.6219 3.56787 38.5308 3.94399 37.4687C4.38659 36.2196 5.22401 35.3114 6.36898 34.6692C6.4469 34.6255 6.57989 34.612 6.57366 34.4998C6.56846 34.4115 6.44794 34.3938 6.37417 34.3522C4.55491 33.3297 3.67801 31.748 3.60632 29.6884C3.58969 29.2051 3.61878 28.724 3.68112 28.246C3.69567 28.1348 3.7019 28.0402 3.58034 27.9768C2.0229 27.159 1.39224 25.7457 1.1034 24.1131C0.99223 23.4854 0.938203 22.8515 0.940281 22.2135C0.942359 21.4704 0.71586 20.8303 0.130912 20.344C0.110132 20.3263 0.0955866 20.2993 0.0810408 20.2754C0.0768849 20.2691 0.0810408 20.2577 0.0820798 20.2432C0.142341 20.1777 0.224421 20.2078 0.295072 20.212C0.963139 20.2473 1.51484 20.0031 1.99069 19.5448C2.79175 18.7727 3.6406 18.064 4.65361 17.5756C5.71857 17.0622 6.81678 16.8939 7.96382 17.2493C8.12382 17.2992 8.20902 17.2462 8.30149 17.1235C8.75033 16.527 9.26255 15.9919 9.86724 15.5502C11.2761 14.5193 12.8221 14.2491 14.5001 14.7261C14.5832 14.75 14.6673 14.7729 14.7505 14.7957C14.7827 14.8009 14.8076 14.8009 14.7848 14.7573C14.712 14.3894 14.5946 14.0319 14.5447 13.6568C14.3193 11.9577 14.8886 10.5288 16.017 9.28805C16.3484 8.9233 16.7162 8.59595 17.11 8.29978C17.2284 8.21041 17.297 8.1252 17.2451 7.96205C16.8388 6.67034 17.111 5.468 17.7396 4.31658C18.1968 3.48003 18.7921 2.7474 19.4581 2.07297C20.0306 1.4931 20.3153 0.826983 20.1812 0.0101812C20.2519 -0.0230728 20.2727 0.0330433 20.2976 0.0652582C20.7579 0.656556 21.3709 0.919471 22.1096 0.927784C23.2525 0.940254 24.3808 1.05353 25.4645 1.44946C26.5346 1.84123 27.397 2.48657 27.9341 3.51328C28.0183 3.67436 28.1191 3.69202 28.2822 3.67124C29.5051 3.51432 30.7072 3.56316 31.8605 4.05678C32.9587 4.52753 33.7587 5.32043 34.3384 6.35338C34.3821 6.43236 34.3987 6.5633 34.5078 6.56122C34.5982 6.55914 34.6148 6.43756 34.6564 6.36378C35.6777 4.54312 37.2601 3.66708 39.3193 3.59434C39.8025 3.57771 40.2835 3.60577 40.7614 3.6702C40.8892 3.68683 40.9786 3.67436 41.0461 3.5455C41.8451 2.03244 43.2207 1.40373 44.8073 1.10652C45.4628 0.9839 46.1257 0.925706 46.7917 0.927784C47.5346 0.930902 48.1746 0.704359 48.6619 0.119296C48.6837 0.0922771 48.719 0.0766892 48.7429 0.059023C48.8125 0.0953946 48.8011 0.149432 48.797 0.193078C48.7357 0.939215 49.0224 1.53675 49.5377 2.06258C50.29 2.8295 50.958 3.66293 51.4287 4.63976C51.942 5.70493 52.1103 6.80335 51.756 7.95165C51.7061 8.11169 51.7581 8.1969 51.8807 8.28939C52.4053 8.68636 52.8854 9.13113 53.2958 9.64865C54.4573 11.1149 54.7909 12.7444 54.2599 14.5443C54.2412 14.6087 54.2256 14.6752 54.209 14.7396C54.2017 14.7739 54.2028 14.7989 54.2485 14.775C54.635 14.697 55.0111 14.5775 55.4059 14.5287C57.0974 14.3188 58.5104 14.9028 59.7375 16.0261C60.0938 16.3525 60.4149 16.713 60.7048 17.0986C60.7931 17.2171 60.8793 17.2856 61.0435 17.2337C62.3464 16.8242 63.5557 17.1048 64.7132 17.7439C65.5391 18.1991 66.2654 18.7883 66.9314 19.4472C67.5111 20.0208 68.1761 20.3055 68.9938 20.1683C69.0249 20.2577 68.9512 20.2754 68.9127 20.3055C68.3444 20.7576 68.0857 21.3551 68.0763 22.0711C68.0608 23.2142 67.9537 24.3428 67.5621 25.4277C67.1714 26.5095 66.5251 27.3824 65.4893 27.9248C65.3272 28.0101 65.3106 28.1109 65.3324 28.274C65.4571 29.2082 65.454 30.1404 65.216 31.0601C64.8378 32.5233 63.9599 33.5978 62.6497 34.3314C62.5708 34.3751 62.4399 34.3917 62.443 34.5008C62.4461 34.5892 62.5676 34.6079 62.6414 34.6484C64.4628 35.6699 65.3355 37.2536 65.4093 39.3123C65.4269 39.7955 65.3978 40.2766 65.3334 40.7547C65.3168 40.8825 65.3303 40.9719 65.4591 41.0394C66.9729 41.8375 67.5995 43.2155 67.8976 44.8023C68.0202 45.458 68.0784 46.121 68.0753 46.7871C68.0722 47.5302 68.2997 48.1703 68.8847 48.6577C68.9107 48.6795 68.9273 48.7148 68.9439 48.7387C68.9075 48.8084 68.8535 48.7959 68.8099 48.7928C68.0639 48.7315 67.4675 49.0183 66.9418 49.5337C66.175 50.2851 65.3417 50.9553 64.3651 51.425C63.3001 51.9374 62.2019 52.1088 61.0549 51.7513C60.872 51.6942 60.7931 51.7773 60.6996 51.9C60.1323 52.6409 59.4777 53.2914 58.6704 53.7715C57.3623 54.5488 55.9732 54.6891 54.5186 54.2755C54.4355 54.2516 54.3514 54.2288 54.2682 54.2049C54.234 54.1986 54.2069 54.1997 54.2319 54.2454H54.2298ZM48.7034 40.3743C48.7315 40.3702 48.7595 40.3577 48.7834 40.3629C49.8172 40.5686 50.7721 40.3296 51.6832 39.8464C52.7576 39.2769 53.5597 38.4144 54.2786 37.4563C55.0922 36.3734 55.9514 35.3332 57.1223 34.6068C57.2543 34.5247 57.247 34.4613 57.1182 34.3813C56.0501 33.7183 55.2418 32.7872 54.4844 31.8073C54.0366 31.2274 53.6033 30.634 53.0557 30.1394C52.1269 29.2987 51.0869 28.6928 49.8068 28.5764C49.4359 28.5432 49.0733 28.6034 48.6744 28.6388C48.719 28.5847 48.7325 28.5577 48.7544 28.5432C49.6479 27.9425 50.1528 27.0738 50.451 26.0657C50.7991 24.8915 50.7378 23.7047 50.5653 22.5107C50.3793 21.2179 50.2723 19.921 50.5632 18.6272C50.611 18.4142 50.5248 18.3955 50.3513 18.435C49.224 18.6896 48.0894 18.6314 46.9559 18.4953C45.9418 18.3726 44.9309 18.2022 43.9044 18.3498C42.509 18.5514 41.283 19.0554 40.4456 20.265C40.4331 20.2837 40.4009 20.2889 40.3614 20.3076C40.6596 18.6168 40.004 17.2565 38.9411 16.0376C38.4435 15.4671 37.8388 15.0171 37.2414 14.5588C36.2429 13.7929 35.2922 12.9782 34.6179 11.8933C34.5016 11.7052 34.4403 11.7946 34.3613 11.9203C33.8854 12.681 33.2693 13.318 32.5846 13.8875C32.0433 14.3375 31.4812 14.7615 30.9347 15.2052C30.2615 15.7508 29.69 16.3878 29.2557 17.1391C28.6905 18.1191 28.4173 19.1614 28.6531 20.2972C28.6199 20.2972 28.6064 20.3014 28.6012 20.2972C28.5742 20.2712 28.544 20.2452 28.5232 20.2141C28.0027 19.4492 27.2692 18.9702 26.4162 18.6615C25.1549 18.2064 23.8634 18.2396 22.5595 18.4298C21.2483 18.621 19.9329 18.7312 18.6196 18.436C18.3848 18.383 18.4118 18.515 18.4451 18.6646C18.6591 19.6176 18.6352 20.5799 18.5542 21.5442C18.4742 22.5044 18.2591 23.4511 18.2996 24.4228C18.3495 25.5929 18.6228 26.6903 19.322 27.6557C19.5952 28.0329 19.9412 28.3332 20.3527 28.619C20.2779 28.6325 20.2508 28.645 20.228 28.6398C19.0726 28.4112 18.0326 28.7281 17.0508 29.3122C16.0253 29.9222 15.2793 30.8148 14.5728 31.7511C13.8154 32.756 12.9946 33.7027 11.913 34.3803C11.753 34.48 11.7634 34.5424 11.9161 34.637C12.8128 35.195 13.5224 35.9547 14.1853 36.7642C14.6549 37.3389 15.0674 37.9603 15.5848 38.4955C16.5967 39.544 17.7635 40.3016 19.2607 40.4325C19.6108 40.4626 19.9537 40.393 20.334 40.3639C20.2872 40.418 20.2727 40.445 20.2508 40.4595C19.3688 41.056 18.8628 41.9123 18.5635 42.9099C18.2072 44.0936 18.2695 45.2897 18.442 46.4931C18.6269 47.7858 18.7329 49.0827 18.442 50.3765C18.3931 50.5937 18.4887 50.603 18.6581 50.5656C19.7854 50.311 20.92 50.3703 22.0535 50.5064C23.0582 50.628 24.0587 50.7963 25.0769 50.654C26.4837 50.4565 27.7201 49.9536 28.5627 48.7335C28.5752 48.7159 28.6074 48.7117 28.6448 48.6951C28.3456 50.3859 29.0053 51.7451 30.0661 52.9651C30.5825 53.5585 31.2163 54.0189 31.8355 54.4958C32.8091 55.2472 33.7306 56.0505 34.3893 57.1094C34.5099 57.3027 34.5701 57.1998 34.6449 57.0793C35.0262 56.4693 35.5073 55.9445 36.0309 55.4561C36.6814 54.8492 37.4149 54.3462 38.0954 53.7767C39.1458 52.8986 39.9573 51.8542 40.3105 50.5012C40.4653 49.9068 40.4736 49.3082 40.3427 48.6473C40.4165 48.718 40.4477 48.7387 40.4674 48.7678C41.0607 49.6387 41.9095 50.1385 42.8955 50.4389C44.0779 50.7984 45.2738 50.7402 46.4779 50.5677C47.7704 50.3817 49.0671 50.2726 50.3606 50.5625C50.5965 50.6155 50.6006 50.5178 50.5601 50.336C50.344 49.3841 50.3679 48.4218 50.45 47.4574C50.53 46.5076 50.7502 45.5692 50.7035 44.608C50.6224 42.9432 50.1663 41.453 48.7221 40.4336C48.7097 40.4252 48.7086 40.4003 48.6993 40.3754L48.7034 40.3743ZM22.2457 3.47483C22.0286 3.52679 21.7491 3.35429 21.5309 3.58291C21.0602 4.07964 20.5937 4.57949 20.2103 5.15104C19.6753 5.95018 19.589 6.79296 19.9402 7.68354C20.0856 8.05142 20.2238 8.42241 20.3942 8.77781C20.5054 9.01267 20.4898 9.15192 20.2446 9.28285C19.9142 9.46056 19.6067 9.67879 19.2867 9.87623C18.709 10.2327 18.1698 10.6338 17.7386 11.1648C17.1214 11.9245 16.897 12.7756 17.1547 13.7347C17.5796 15.3133 18.5604 16.076 20.1916 16.0916C20.9168 16.0978 21.6348 16.0074 22.3475 15.889C23.7699 15.652 25.185 15.6209 26.5939 15.9659C26.8016 16.0168 26.9087 15.942 27.0136 15.7726C27.6879 14.6866 28.5523 13.7784 29.5799 13.0187C30.2999 12.4856 31.0303 11.9629 31.6558 11.3145C32.0683 10.8863 32.4142 10.4166 32.5441 9.81804C32.9067 8.1491 31.662 6.36793 29.9737 6.15386C29.5518 6.10086 29.1269 6.11125 28.704 6.16633C28.0339 6.25258 27.3856 6.44691 26.7279 6.5924C26.5128 6.6402 26.3954 6.60279 26.3144 6.3804C26.1689 5.98239 25.9964 5.59478 25.826 5.20612C25.4499 4.34879 24.8026 3.83024 23.8821 3.64526C23.3512 3.53926 22.814 3.49458 22.2457 3.47379V3.47483ZM39.7308 6.1258C37.4408 6.07384 36.6336 7.59833 36.4299 9.00747C36.2969 9.92611 36.7188 10.6525 37.3318 11.2895C37.9915 11.9744 38.7666 12.5178 39.5219 13.0852C40.5048 13.8231 41.3339 14.7022 41.9791 15.7476C42.1173 15.9711 42.2576 16.0033 42.4997 15.9482C43.6384 15.6905 44.7875 15.6354 45.9481 15.7913C46.9507 15.9264 47.9481 16.1093 48.9663 16.0906C50.2588 16.0677 51.1554 15.4733 51.6656 14.2762C52.1705 13.0915 52.0272 12.0211 51.1762 11.0495C50.7523 10.5652 50.2391 10.1921 49.6946 9.85649C49.358 9.64865 49.0297 9.42834 48.6899 9.22674C48.5341 9.13425 48.506 9.04176 48.5788 8.87549C48.7606 8.46086 48.931 8.03999 49.092 7.61704C49.4172 6.76386 49.3248 5.95538 48.824 5.18845C48.4416 4.60339 47.9637 4.10042 47.492 3.59018C47.4058 3.49666 47.3081 3.4634 47.1844 3.46548C46.6733 3.47379 46.1631 3.50185 45.654 3.54966C44.3553 3.67228 43.4576 4.31034 43.0244 5.5636C42.9392 5.80885 42.8082 6.03955 42.7334 6.28792C42.6472 6.57473 42.5142 6.64332 42.2087 6.57473C41.3651 6.38456 40.5329 6.1071 39.7297 6.1258H39.7308ZM16.0991 20.3128C16.0991 20.2068 16.1011 20.1008 16.0991 19.9948C16.0689 18.7124 15.458 17.8354 14.2756 17.3334C13.1026 16.8367 12.0398 16.978 11.0756 17.8167C10.6569 18.1804 10.3161 18.6096 10.0189 19.0741C9.76438 19.4721 9.50879 19.8691 9.26774 20.2754C9.16073 20.4552 9.05891 20.5092 8.85319 20.4136C8.47811 20.239 8.09057 20.0914 7.70511 19.9376C6.79288 19.5739 5.93468 19.6737 5.12323 20.2286C4.57153 20.6058 4.0884 21.062 3.60112 21.5151C3.50761 21.6014 3.47644 21.7011 3.47852 21.8238C3.48787 22.4411 3.51592 23.0563 3.61255 23.6673C3.77567 24.6992 4.30451 25.4485 5.28635 25.8517C5.55337 25.9618 5.81935 26.0761 6.08533 26.1873C6.66197 26.4274 6.66405 26.4274 6.52275 27.0488C6.31287 27.9685 6.05624 28.8819 6.15287 29.8432C6.24014 30.714 6.58197 31.4581 7.33107 31.9351C8.93631 32.9587 10.2184 32.7747 11.3592 31.6171C11.5348 31.4383 11.7125 31.2596 11.8683 31.0642C12.3005 30.5218 12.7255 29.9731 13.1452 29.4202C13.8715 28.4673 14.7328 27.6609 15.752 27.0301C15.9692 26.8961 16.0201 26.763 15.9619 26.5136C15.6991 25.3664 15.643 24.2077 15.805 23.0386C15.9297 22.1324 16.0845 21.2283 16.1001 20.3107L16.0991 20.3128ZM3.49514 46.5232C3.47852 47.3556 3.47229 47.3618 3.59904 47.4824C4.0884 47.9469 4.58088 48.4062 5.14297 48.7876C5.94819 49.3332 6.79912 49.4256 7.69991 49.0692C8.10304 48.9092 8.50513 48.7481 8.90306 48.5746C9.05579 48.508 9.14514 48.5299 9.23242 48.6764C9.43917 49.0235 9.66463 49.3612 9.87659 49.7052C10.2433 50.2996 10.6548 50.8545 11.2054 51.2941C11.9629 51.8989 12.8065 52.1099 13.7541 51.8542C15.3302 51.4292 16.0918 50.443 16.1043 48.8125C16.1084 48.2327 16.0554 47.6559 15.9598 47.0854C15.6959 45.5141 15.5889 43.946 15.9837 42.38C16.0253 42.2147 15.9765 42.1129 15.8289 42.0235C14.6528 41.3034 13.6928 40.3556 12.8876 39.2406C12.4076 38.5765 11.9161 37.9198 11.3229 37.3482C10.9021 36.9429 10.4397 36.599 9.85477 36.467C8.18096 36.0877 6.37521 37.343 6.16637 39.039C6.11442 39.4609 6.12481 39.8859 6.17988 40.3089C6.26923 40.9885 6.46664 41.6463 6.61002 42.3145C6.65158 42.5088 6.61314 42.6107 6.41573 42.6844C6.00949 42.8362 5.61259 43.0107 5.2157 43.1853C4.36893 43.5563 3.85152 44.1954 3.6645 45.1037C3.55333 45.644 3.50761 46.1896 3.49722 46.5222L3.49514 46.5232ZM29.3596 62.8623C29.4853 62.8623 29.61 62.8675 29.7357 62.8623C31.5654 62.7834 32.9826 60.8796 32.5316 59.1015C32.3613 58.4292 31.9259 57.9262 31.4386 57.4638C30.8142 56.8714 30.1108 56.3768 29.4272 55.8593C28.4796 55.1422 27.6775 54.288 27.05 53.2779C26.9097 53.0514 26.7736 52.9932 26.5128 53.0535C25.3751 53.3132 24.225 53.3662 23.0655 53.2104C22.0535 53.0742 21.0467 52.8872 20.0192 52.9111C18.737 52.9412 17.856 53.5419 17.35 54.7245C16.844 55.9091 16.9884 56.9795 17.8394 57.9501C18.257 58.4271 18.7599 58.797 19.296 59.1275C19.641 59.3395 19.9786 59.564 20.3257 59.7718C20.4784 59.8632 20.5127 59.9557 20.4379 60.1241C20.2592 60.5294 20.0919 60.9409 19.9319 61.3545C19.5994 62.2149 19.6815 63.0328 20.1895 63.8101C20.5771 64.4035 21.0644 64.9106 21.5433 65.4271C21.6244 65.5144 21.72 65.531 21.8301 65.5299C22.4379 65.5247 23.0436 65.4894 23.6462 65.4C24.7164 65.241 25.479 64.6882 25.8863 63.6698C26.012 63.357 26.146 63.0473 26.2759 62.7356C26.438 62.3459 26.4359 62.3521 26.8598 62.4384C27.6889 62.6067 28.4993 62.8852 29.3607 62.8613L29.3596 62.8623ZM62.8679 39.5897C62.8679 39.5606 62.87 39.4827 62.8679 39.4058C62.8253 38.1079 62.2123 37.2058 61.0092 36.6966C59.7832 36.177 58.6995 36.3589 57.7395 37.2921C57.0652 37.9478 56.5166 38.7054 55.9576 39.4557C55.2064 40.4647 54.314 41.321 53.2428 41.983C53.0287 42.115 52.9986 42.2521 53.0506 42.4828C53.2646 43.4285 53.3446 44.3856 53.2698 45.3551C53.2126 46.0867 53.0713 46.8069 52.9944 47.5354C52.9321 48.1298 52.8833 48.7232 52.9383 49.3238C53.0537 50.5719 53.7882 51.3014 54.8989 51.7326C55.9878 52.1556 56.979 51.9852 57.8735 51.2421C58.3992 50.8057 58.7961 50.2612 59.1515 49.6823C59.353 49.3539 59.5691 49.0339 59.7645 48.7013C59.8611 48.5361 59.9598 48.5028 60.1375 48.5808C60.552 48.7626 60.9718 48.9341 61.3957 49.0941C62.2383 49.4132 63.0393 49.3228 63.7978 48.8312C64.3931 48.4457 64.9002 47.9583 65.4165 47.4803C65.5121 47.392 65.5319 47.2891 65.5308 47.1685C65.5236 46.57 65.4893 45.9745 65.403 45.3811C65.2462 44.2983 64.6893 43.5283 63.6586 43.1199C63.3365 42.992 63.0248 42.831 62.6954 42.726C62.3962 42.6314 62.3588 42.4839 62.4243 42.1929C62.6123 41.348 62.8897 40.5177 62.869 39.5887L62.8679 39.5897ZM46.7689 65.5268C46.9881 65.4728 47.2676 65.6474 47.4847 65.4156C47.9606 64.9106 48.4354 64.4045 48.8198 63.8205C49.3289 63.0452 49.4203 62.2295 49.0889 61.3659C48.9403 60.9793 48.7959 60.5886 48.6151 60.2166C48.4946 59.9672 48.5611 59.8539 48.7793 59.7146C49.4536 59.2855 50.1632 58.9082 50.7648 58.371C52.1705 57.1167 52.3524 55.5246 51.2604 54.0053C50.877 53.4722 50.3669 53.1387 49.7237 53.0046C48.8572 52.8228 47.9917 52.9132 47.1356 53.0514C45.5429 53.3081 43.9574 53.4307 42.3719 53.0254C42.1994 52.9817 42.1069 53.0566 42.0217 53.1958C41.3069 54.3514 40.377 55.3033 39.2788 56.0993C38.6004 56.5919 37.924 57.0907 37.3421 57.7007C36.9317 58.1309 36.5889 58.6027 36.4632 59.2034C36.1141 60.8744 37.3785 62.6524 39.0669 62.8478C39.4793 62.8956 39.8949 62.8862 40.3074 62.8322C40.9786 62.7449 41.6269 62.5547 42.2856 62.4093C42.5059 62.3604 42.6171 62.4009 42.6991 62.6192C42.8508 63.0255 43.0233 63.4245 43.201 63.8194C43.5501 64.5978 44.1288 65.107 44.9662 65.3128C45.5501 65.4572 46.1455 65.4988 46.7699 65.5258L46.7689 65.5268ZM65.5267 22.2519C65.4799 22.0337 65.6451 21.751 65.4404 21.5515C64.8399 20.9664 64.2342 20.3814 63.4788 19.9906C62.8835 19.683 62.2632 19.6446 61.6253 19.8317C61.1619 19.9678 60.7183 20.1611 60.2829 20.3648C60.0055 20.4947 59.859 20.4656 59.6886 20.1881C59.2813 19.523 58.9063 18.8351 58.3816 18.2469C57.1171 16.8284 55.5213 16.6465 53.995 17.7533C53.4724 18.1326 53.1441 18.6355 53.01 19.2684C52.8241 20.1455 52.9176 21.0194 53.0568 21.8861C53.3113 23.4688 53.4319 25.0463 53.0298 26.6227C52.982 26.8088 53.0641 26.9023 53.2126 26.9948C54.315 27.6806 55.2366 28.5598 56.0065 29.6052C56.5322 30.3191 57.0517 31.0414 57.6948 31.6586C58.1166 32.0639 58.579 32.4058 59.166 32.5368C60.845 32.9109 62.6404 31.6555 62.8471 29.9533C62.8981 29.5314 62.8877 29.1064 62.8305 28.6835C62.7401 28.0132 62.549 27.3647 62.4066 26.7048C62.363 26.5012 62.4025 26.3941 62.6102 26.3131C63.0768 26.1312 63.5401 25.9369 63.99 25.7176C64.6695 25.3871 65.0976 24.8395 65.295 24.1079C65.4571 23.5073 65.4955 22.8921 65.5267 22.253V22.2519Z" fill="white"/>\r\n<path d="M14.7838 14.7568C14.8067 14.8005 14.7807 14.8005 14.7495 14.7953C14.7609 14.7828 14.7724 14.7693 14.7838 14.7568Z" fill="white"/>\r\n<path d="M54.2475 14.7736C54.2018 14.7975 54.2018 14.7726 54.208 14.7383C54.2215 14.7497 54.234 14.7622 54.2475 14.7736Z" fill="white"/>\r\n<path d="M14.7681 54.2297C14.8096 54.2089 14.8096 54.2317 14.8034 54.2629C14.792 54.2525 14.7795 54.2411 14.7681 54.2297Z" fill="white"/>\r\n<path d="M54.2299 54.2456C54.205 54.1988 54.232 54.1988 54.2663 54.205C54.2538 54.2185 54.2424 54.2321 54.2299 54.2456Z" fill="white"/>\r\n<path d="M21.5924 31.9593C21.4168 32.3344 21.2402 32.7147 21.0625 33.1003C20.8848 33.4858 20.7383 33.8537 20.622 34.2049C20.3622 34.9874 20.2542 35.6047 20.2988 36.0557C20.3352 36.5306 20.5233 36.9079 20.8651 37.1874C21.2069 37.467 21.6942 37.6072 22.329 37.6072C22.8558 37.6072 23.3649 37.495 23.8563 37.2716C24.2241 37.1074 24.5493 36.9058 24.833 36.6668C25.1166 36.4267 25.3348 36.1794 25.4886 35.9238C25.6423 35.6681 25.7192 35.453 25.7192 35.2763C25.7234 35.1963 25.6839 35.1288 25.6029 35.0727C25.5208 35.0165 25.4221 34.9687 25.3067 34.9293C25.1914 34.8898 25.0709 34.8534 24.9473 34.8212C24.8236 34.789 24.7239 34.7578 24.648 34.7256C24.4641 34.658 24.3156 34.5572 24.2023 34.4232C24.0891 34.2891 24.034 34.0886 24.0381 33.8215C24.0381 33.4785 24.1504 33.0681 24.3737 32.5911C24.5971 32.1141 24.9088 31.6194 25.3078 31.1082C25.659 30.705 25.9582 30.3963 26.2065 30.1822C26.4538 29.9692 26.6928 29.779 26.9224 29.6128C27.152 29.4475 27.3764 29.3083 27.5956 29.1961C27.6829 29.1483 27.7671 29.1098 27.8471 29.0828C27.951 29.0547 28.0278 29.0475 28.0777 29.062C28.1276 29.0765 28.1567 29.1171 28.165 29.1846C28.1453 29.2563 28.1172 29.3447 28.0808 29.4486C28.0445 29.5525 28.005 29.6606 27.9614 29.7718C27.9177 29.884 27.872 29.9942 27.8232 30.1043C27.7754 30.2145 27.7297 30.3121 27.685 30.3974C27.6413 30.4836 27.6008 30.5532 27.5655 30.6073C27.5302 30.6613 27.5032 30.6863 27.4876 30.6821C27.472 30.6904 27.4512 30.6842 27.4273 30.6644C27.4034 30.6447 27.3619 30.6343 27.3016 30.6343C27.1499 30.6343 26.9307 30.6811 26.6429 30.7746C26.3551 30.8681 26.0527 31.0458 25.7358 31.3077C25.4179 31.5696 25.1758 31.8148 25.0086 32.0445C24.8413 32.2741 24.7571 32.4331 24.7571 32.5204C24.7374 32.6482 24.7789 32.7584 24.8828 32.8498C24.9743 32.9215 25.1436 33.0016 25.3888 33.0899C25.634 33.1782 25.7868 33.2458 25.847 33.2936C26.0423 33.4256 26.14 33.6687 26.14 34.0241C26.14 34.5593 26.0351 35.1735 25.8252 35.8656C25.6153 36.5587 25.3254 37.1604 24.9535 37.6717C24.7976 37.9076 24.6065 38.1403 24.3789 38.3721C24.1514 38.6038 23.9041 38.7971 23.6361 38.953C23.1207 39.3084 22.5285 39.4861 21.8573 39.4861C21.0947 39.4736 20.516 39.2242 20.1212 38.7379C19.9414 38.4906 19.8178 38.2276 19.7503 37.9502C19.6827 37.6727 19.6484 37.4077 19.6484 37.1562C19.6609 36.7011 19.7201 36.2438 19.8282 35.7845C19.9362 35.3252 20.0734 34.8721 20.2417 34.4252C20.409 33.9784 20.6001 33.5409 20.8131 33.1138C21.0261 32.6867 21.2454 32.2772 21.4687 31.8855C21.5051 31.8252 21.5248 31.7919 21.529 31.7836C21.5726 31.7234 21.6152 31.6932 21.6547 31.6932H21.6609C21.6734 31.7057 21.6734 31.7296 21.6641 31.7649C21.6537 31.8013 21.6308 31.8647 21.5955 31.9561L21.5924 31.9593Z" fill="white"/>\r\n<path d="M31.9596 31.6421C31.7882 32.6958 31.6334 33.4825 31.4952 34.0021C31.357 34.5217 31.2323 34.9176 31.1211 35.1909C31.0089 35.4642 30.8863 35.6731 30.7533 35.8165C30.6193 35.9599 30.3741 36.0971 30.0167 36.227C29.6593 36.3569 29.3611 36.4473 29.1211 36.4992C28.8811 36.5512 28.7315 36.5793 28.6722 36.5834C28.612 36.5793 28.5746 36.5689 28.558 36.5502C28.5413 36.5315 28.5559 36.4899 28.5995 36.4213C28.6754 36.3132 28.8343 36.1657 29.0754 35.9786C29.3164 35.7905 29.6021 35.5577 29.9315 35.2782C30.2609 34.9987 30.5071 34.7524 30.6713 34.5383C30.8354 34.3253 30.9798 34.0333 31.1056 33.6633C31.2313 33.2944 31.3539 32.9078 31.4734 32.5046C31.5928 32.1014 31.6801 31.8281 31.7341 31.6837C31.7882 31.5402 31.8432 31.4706 31.8993 31.4737C31.9627 31.4862 31.9835 31.5413 31.9596 31.641V31.6421Z" fill="white"/>\r\n<path d="M33.4619 30.5758L34.0853 29.1085C34.1372 28.989 34.1788 28.9287 34.211 28.9287C34.2629 28.9287 34.2785 28.9672 34.2588 29.043C34.2349 29.1272 34.2068 29.2716 34.1746 29.4774C34.1424 29.6832 34.1185 29.8442 34.1029 29.9596C34.079 30.1633 34.0551 30.3929 34.0312 30.6486C34.0073 30.9042 33.9855 31.1671 33.9658 31.4363C33.946 31.7054 33.9263 31.9683 33.9055 32.224C33.8858 32.4796 33.864 32.7093 33.8401 32.913C33.7757 33.5323 33.678 34.0415 33.5471 34.4437C33.4151 34.8448 33.2614 35.2168 33.0858 35.5577C32.9102 35.8996 32.7689 36.0773 32.6608 36.0939C32.6328 36.0939 32.6411 36.0222 32.6847 35.8778C32.7367 35.7416 32.7855 35.5722 32.8312 35.3686C32.8769 35.1649 32.9175 34.9466 32.9538 34.7128C32.9902 34.479 33.0213 34.24 33.0494 33.9937C33.0775 33.7485 33.1014 33.5157 33.1211 33.2964C33.1491 33.0886 33.173 32.7779 33.1928 32.3653C33.2125 31.9517 33.2427 31.6015 33.2832 31.3136C33.3227 31.0258 33.3829 30.7805 33.4629 30.5769L33.4619 30.5758Z" fill="white"/>\r\n<path d="M34.9538 36.4037C35.0577 36.3237 35.1813 36.2281 35.3247 36.1159C35.7081 35.8322 36.0281 35.5526 36.2858 35.2772C36.5434 35.0018 36.6796 34.7919 36.6962 34.6485C36.7284 34.4771 36.6318 34.2568 36.4084 33.9897C36.185 33.7257 35.919 33.4826 35.6115 33.2591C35.5876 33.2394 35.5741 33.2207 35.572 33.2051C35.5699 33.1895 35.572 33.1729 35.5813 33.1573L35.8629 32.5099L36.2577 31.6234C36.2899 31.5517 36.319 31.4925 36.345 31.4468C36.371 31.4011 36.4021 31.3896 36.4375 31.4135C36.6047 31.5538 36.772 31.7045 36.9372 31.8656C37.1024 32.0277 37.2458 32.2127 37.3653 32.4226C37.4848 32.6325 37.545 32.9048 37.545 33.2404C37.545 33.6322 37.4816 34.0084 37.3559 34.369C37.2302 34.7306 37.0598 35.1047 36.8437 35.4923C36.7637 35.6326 36.6754 35.7594 36.5777 35.8727C36.4801 35.986 36.3419 36.0857 36.1642 36.1689C35.9865 36.253 35.6042 36.3871 35.0172 36.57C34.9455 36.5897 34.8956 36.5897 34.8676 36.57C34.8593 36.5617 34.8593 36.543 34.8676 36.5128C34.8759 36.4827 34.9039 36.4463 34.9517 36.4016L34.9538 36.4037Z" fill="white"/>\r\n<path d="M41.81 33.3557C41.8817 33.3234 41.9492 33.2954 42.0136 33.2715C42.0936 33.4669 42.13 33.6529 42.1248 33.8285C42.1186 34.0041 42.0822 34.186 42.0136 34.3741C41.8661 34.4863 41.625 34.6037 41.2915 34.7274C40.958 34.8511 40.7533 34.9269 40.6775 34.955C40.3502 35.1223 39.9938 35.4195 39.6084 35.8445C39.2229 36.2695 38.8832 36.6624 38.587 37.0219C37.9283 37.7441 37.3818 38.245 36.9465 38.5225C36.5112 38.8 36.2067 38.9829 36.0332 39.0702C35.8597 39.1574 35.6945 39.2458 35.5397 39.3341C35.4078 39.4058 35.3101 39.4235 35.2467 39.3881C35.2145 39.3559 35.229 39.3185 35.2883 39.2749C35.3246 39.251 35.5802 39.0629 36.055 38.7116C36.5465 38.324 36.8395 38.0788 36.9351 37.9749C37.2104 37.7192 37.4068 37.5197 37.5221 37.3763C37.6457 37.2682 37.813 37.0832 38.025 36.8193C38.1725 36.6395 38.427 36.3121 38.7886 35.8372C39.1502 35.3623 39.4349 35.008 39.6416 34.7741C39.8484 34.5403 40.0738 34.3283 40.3149 34.1361C40.5559 33.9449 40.7876 33.7942 41.01 33.6872C41.2313 33.5791 41.4983 33.47 41.81 33.3577V33.3557Z" fill="white"/>\r\n<path d="M43.4746 34.4326L43.032 35.3908C42.9001 35.6745 42.7899 35.7877 42.7027 35.7327C42.6549 35.7088 42.6549 35.6132 42.7027 35.4448L42.7743 35.0977C42.7982 34.9782 42.7151 34.867 42.526 34.7652C42.3359 34.6633 42.0969 34.6135 41.8071 34.6155C41.5172 34.6176 41.2772 34.6519 41.085 34.7205L39.8091 34.601C40.7109 33.4953 41.6273 32.9414 42.5582 32.9414C42.8336 32.9414 43.0518 32.9736 43.2107 33.037C43.3541 33.0931 43.484 33.1763 43.6003 33.2885C43.6159 33.3082 43.6305 33.3259 43.6419 33.3394C43.6544 33.3529 43.6658 33.3644 43.6783 33.3727C43.7261 33.4444 43.7624 33.5046 43.7863 33.5524C43.8061 33.6283 43.8102 33.7 43.7988 33.7686C43.7749 33.8528 43.7468 33.9266 43.7146 33.9899L43.4746 34.4337V34.4326Z" fill="white"/>\r\n<path d="M43.7205 33.9902C43.6166 34.0339 43.5179 34.0588 43.4244 34.0651C43.3309 34.0713 43.2436 34.0463 43.1636 33.9902C43.4555 33.4228 43.8046 32.9001 44.2119 32.4211C44.6192 31.942 44.9309 31.7383 45.146 31.81C45.4099 31.9462 45.5979 31.9378 45.7122 31.7861C45.8255 31.6344 45.919 31.4266 45.9907 31.1636C46.0062 31.12 46.0322 31.0951 46.0686 31.0888C46.1049 31.0826 46.1382 31.0982 46.1704 31.1335C46.374 31.3569 46.5538 31.2312 46.7096 30.7563C46.7657 30.6087 46.8229 30.5349 46.8831 30.5349C46.9112 30.5349 46.9278 30.562 46.934 30.616C46.9403 30.67 46.9413 30.7168 46.9372 30.7563C46.9008 31.0639 46.8011 31.3611 46.6379 31.6489C46.4665 31.9524 46.2961 32.1342 46.1288 32.1945C45.9532 32.2423 45.8161 32.3171 45.7184 32.419C45.6208 32.5208 45.5397 32.6071 45.4764 32.6767C45.4119 32.7463 45.3382 32.7879 45.2551 32.7993C45.1709 32.8118 45.0649 32.8097 44.9371 32.7931C44.8093 32.7765 44.694 32.8087 44.5901 32.8887C44.4945 32.949 44.3387 33.1132 44.1226 33.3823C43.9075 33.6515 43.7735 33.8541 43.7215 33.9902H43.7205ZM46.9455 26.6702C46.9517 26.6858 46.9579 26.7045 46.9663 26.7242L46.9839 26.7783C46.9839 26.7939 46.986 26.8063 46.9902 26.8146C46.9902 26.823 46.9902 26.8302 46.9933 26.8385C46.9953 26.8469 46.9964 26.8541 46.9964 26.8624C46.9964 26.8708 46.9964 26.877 46.9995 26.8801C47.0016 26.8843 47.0026 26.8905 47.0026 26.8978C47.0026 26.9736 46.9943 27.0433 46.9787 27.1077C46.9787 27.116 46.9787 27.1212 46.9756 27.1254C46.9735 27.1295 46.9725 27.1358 46.9725 27.143L46.9486 27.2147L46.9309 27.2511C46.9268 27.2594 46.9237 27.2688 46.9216 27.2812C46.9195 27.2937 46.9143 27.3031 46.907 27.3114L46.8707 27.3831L46.799 27.4974L46.6972 27.647C46.6774 27.6792 46.6556 27.7104 46.6317 27.7395C46.6078 27.7697 46.5839 27.8008 46.56 27.832C46.5278 27.8684 46.4956 27.9037 46.4644 27.9401C46.4322 27.9765 46.399 28.0097 46.3626 28.0419L46.3023 28.1022L46.2722 28.1261C46.2244 28.1656 46.1829 28.1916 46.1496 28.204C46.1164 28.2165 46.0873 28.2175 46.0623 28.2103C46.0468 28.2061 46.0332 28.2009 46.0239 28.1957C46.0135 28.1895 46.0052 28.1833 45.9969 28.1749L45.8535 28.0617L45.7932 28.0076L45.44 27.7198L45.3984 27.6896C45.3143 27.6262 45.2332 27.5681 45.1532 27.5161C45.1293 27.4963 45.1169 27.4766 45.1169 27.4589C45.1169 27.4413 45.1273 27.4163 45.147 27.3841L46.0634 25.9885C46.0914 25.9448 46.1236 25.9261 46.159 25.9344L46.1714 25.9407C46.1714 25.9407 46.1849 25.9448 46.2016 25.9532C46.2099 25.9615 46.2171 25.9656 46.2255 25.9656C46.2774 25.9978 46.3294 26.0301 46.3813 26.0643C46.4333 26.0986 46.4852 26.1329 46.5372 26.1693L46.6026 26.2233C46.6463 26.2597 46.6868 26.295 46.7221 26.3314C46.7574 26.3678 46.7917 26.4073 46.8239 26.4509L46.8603 26.4987L46.9143 26.5943L46.9268 26.6182C46.9351 26.638 46.9413 26.6567 46.9476 26.6723L46.9455 26.6702ZM47.9897 24.5024C48.0219 24.6147 48.0208 24.73 47.9865 24.8495C47.9523 24.969 47.8941 25.0927 47.8099 25.2205C47.7424 25.3244 47.6728 25.4211 47.6032 25.5115C47.5335 25.6009 47.4567 25.6861 47.3725 25.7661C47.3206 25.8222 47.2748 25.8617 47.2343 25.8856C47.1948 25.9095 47.1605 25.9241 47.1325 25.9303C47.1044 25.9365 47.0805 25.9355 47.0608 25.9272C47.0411 25.9189 47.0224 25.9095 47.0068 25.897C46.8665 25.7848 46.7304 25.6726 46.5964 25.5583C46.4624 25.445 46.3159 25.338 46.1558 25.2382C46.1361 25.2101 46.1257 25.1894 46.1257 25.1758C46.1257 25.1623 46.1351 25.1384 46.1558 25.1073L47.066 23.7054C47.0941 23.669 47.1211 23.6524 47.147 23.6545C47.173 23.6565 47.2021 23.6669 47.2343 23.6877C47.3143 23.7355 47.3954 23.7864 47.4764 23.8405C47.5585 23.8945 47.6333 23.9548 47.7008 24.0234C47.7684 24.092 47.8286 24.1637 47.8806 24.2416C47.9325 24.3196 47.9678 24.4058 47.9886 24.5024H47.9897ZM48.8167 26.664C48.8489 26.7762 48.8479 26.8915 48.8136 27.011C48.7793 27.1306 48.7211 27.2542 48.6369 27.382C48.5694 27.486 48.4998 27.5826 48.4302 27.673C48.3606 27.7624 48.2837 27.8476 48.1995 27.9276C48.1476 27.9837 48.1019 28.0232 48.0613 28.0471C48.0219 28.071 47.9876 28.0856 47.9595 28.0918C47.9315 28.098 47.9076 28.097 47.8878 28.0887C47.8681 28.0804 47.8494 28.071 47.8338 28.0585C47.6935 27.9463 47.5574 27.8341 47.4234 27.7198C47.2894 27.6055 47.1429 27.4995 46.9829 27.3997C46.9631 27.3716 46.9528 27.3509 46.9528 27.3363C46.9528 27.3218 46.9621 27.2999 46.9829 27.2677L47.893 25.8659C47.9211 25.8295 47.9481 25.8129 47.9741 25.8149C48 25.817 48.0291 25.8274 48.0613 25.8482C48.1413 25.896 48.2224 25.9469 48.3034 26.001C48.3855 26.055 48.4603 26.1153 48.5279 26.1839C48.5954 26.2524 48.6556 26.3241 48.7076 26.4021C48.7595 26.48 48.7949 26.5663 48.8156 26.6629L48.8167 26.664Z" fill="white"/>\r\n</g>\r\n<defs>\r\n<clipPath id="clip0_878_980">\r\n<rect width="69" height="69" fill="white"/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n'
          },
          {
            type: "tax",
            name: "\u0642\u0628\u0636 \u0645\u0627\u0644\u06cc\u0627\u062a",
            icon: '<svg viewBox="0 0 45 45" fill="none" xmlns="http://www.w3.org/2000/svg">\r\n<g clip-path="url(#clip0_878_996)">\r\n<path d="M23.4129 41.2198C23.3242 41.1572 23.3115 41.1394 23.2956 41.1373C21.7128 40.9203 21.679 40.9463 21.6663 42.4889C21.66 43.2873 21.6653 44.0868 21.6653 44.9447C21.4413 44.9582 21.2563 44.9791 21.0704 44.9791C16.809 44.9801 12.5475 44.9707 8.28614 44.9906C7.76099 44.9927 7.65004 44.8267 7.65321 44.3393C7.66695 42.1654 7.6268 39.9903 7.63736 37.8153C7.63948 37.3707 7.54332 37.2225 7.05833 37.2277C4.85735 37.2507 2.65638 37.2298 0.45541 37.2225C0.318047 37.2225 0.181741 37.2016 0.00633981 37.187V23.707C0.92667 23.707 1.83643 23.707 2.74514 23.707C3.53057 23.707 3.91378 23.3128 3.89476 22.5245C3.88948 22.3022 3.86729 22.0799 3.84932 21.7991H0V8.02372C0.22295 8.02372 0.426881 8.02372 0.630812 8.02372C2.77895 8.02059 4.92709 7.99972 7.07523 8.02894C7.61834 8.03624 7.69865 7.84003 7.69442 7.36829C7.67329 5.07222 7.68808 2.77614 7.69231 0.481104C7.69231 0.347514 7.71555 0.212881 7.73246 0.0281507C7.93005 0.0281507 8.10123 0.0281507 8.2724 0.0281507C12.463 0.0229323 16.6547 0.0281507 20.8453 0.00101522C21.3779 -0.0021158 21.5078 0.184701 21.4983 0.655397C21.4751 1.69907 21.4983 2.74274 21.4751 3.78641C21.4666 4.15065 21.586 4.28529 21.9558 4.26546C22.4081 4.24145 22.8624 4.2592 23.3907 4.2592C23.3907 3.95236 23.3897 3.7144 23.3907 3.47644C23.3981 2.5194 23.4277 1.56235 23.4034 0.606345C23.3929 0.179483 23.5218 0.017714 23.9592 0.0187576C28.2735 0.0291944 32.5877 0.0281507 36.9019 0.0323254C36.9854 0.0323254 37.0689 0.0636355 37.2063 0.0918147C37.2063 0.568773 37.2063 1.03425 37.2063 1.49973C37.2063 3.4827 37.2221 5.46464 37.1946 7.44657C37.1883 7.92144 37.3436 8.02476 37.7959 8.02372C39.9968 8.01641 42.1978 8.04355 44.3988 8.05816C44.5879 8.0592 44.776 8.05816 45.0011 8.05816V21.7407H41.1412V23.5629H44.9884V37.2726C44.5552 37.2726 44.1378 37.2726 43.7194 37.2726C41.7466 37.2768 39.7749 37.2966 37.8022 37.2768C37.351 37.2726 37.2464 37.4166 37.2475 37.8393C37.2496 39.9611 37.2211 42.0839 37.2031 44.2057C37.201 44.4301 37.2031 44.6545 37.2031 44.9269C37.0171 44.9457 36.866 44.9739 36.716 44.9749C32.4725 44.9822 28.228 44.9833 23.9846 45C23.5588 45.0021 23.3929 44.882 23.4034 44.4385C23.4309 43.3489 23.4129 42.2572 23.4129 41.2208V41.2198ZM36.6906 44.403C36.6906 44.1932 36.6906 44.0565 36.6906 43.9198C36.6948 41.6926 36.7107 39.4654 36.6927 37.2392C36.6896 36.8061 36.8132 36.6673 37.2527 36.6725C38.8546 36.6913 40.4575 36.6756 42.0604 36.6746C42.8318 36.6746 43.6031 36.6746 44.4093 36.6746V24.113H40.5537C40.5537 23.2665 40.579 22.4838 40.5431 21.7042C40.5252 21.293 40.635 21.1521 41.0651 21.1688C41.9801 21.2043 42.8973 21.1688 43.8113 21.2032C44.31 21.2209 44.4791 21.054 44.477 20.5509C44.4622 16.7749 44.4664 12.9999 44.4833 9.22394C44.4854 8.74072 44.3121 8.59356 43.8335 8.59774C41.6674 8.61757 39.5013 8.60713 37.3352 8.604C37.1323 8.604 36.9294 8.58208 36.6748 8.56643C36.6748 8.32534 36.6748 8.13748 36.6748 7.94962C36.6653 5.72347 36.6336 3.49627 36.6621 1.27012C36.6695 0.711756 36.4751 0.609476 35.9711 0.612607C32.0795 0.640786 28.1868 0.646004 24.2952 0.659572C24.2128 0.659572 24.1304 0.68462 23.9529 0.713843V4.78416H20.9964C20.9964 3.57246 20.9721 2.40772 21.007 1.24507C21.0228 0.734717 20.8474 0.591733 20.3445 0.593821C16.5226 0.61052 12.7008 0.603214 8.87997 0.605301C8.67604 0.605301 8.47211 0.627218 8.22274 0.64183C8.22274 0.916315 8.22274 1.13966 8.22274 1.36196C8.22274 3.57142 8.20583 5.78191 8.23331 7.99137C8.23965 8.5059 8.0727 8.62383 7.57713 8.61966C5.48183 8.604 3.38546 8.63009 1.29015 8.64053C1.06932 8.64157 0.848479 8.64053 0.629755 8.64053C0.607566 8.79499 0.589603 8.86179 0.589603 8.92963C0.587489 12.9133 0.589603 16.897 0.582206 20.8807C0.582206 21.2043 0.716399 21.3013 1.02282 21.2982C2.00866 21.2888 2.99556 21.3044 3.9814 21.2909C4.30156 21.2867 4.42308 21.4036 4.41779 21.7157C4.40617 22.4118 4.39877 23.1079 4.41991 23.803C4.43047 24.1474 4.30579 24.2507 3.96238 24.2497C3.02937 24.2497 2.09637 24.3081 1.16336 24.2946C0.689983 24.2873 0.519865 24.4177 0.523035 24.9082C0.542054 28.6488 0.535714 32.3903 0.538884 36.1308C0.538884 36.2978 0.560017 36.4648 0.57164 36.6464C0.767118 36.6558 0.906593 36.6673 1.04607 36.6673C3.23014 36.6736 5.4142 36.6944 7.59721 36.6715C8.08855 36.6662 8.22485 36.8071 8.21957 37.2831C8.19738 39.4748 8.20795 41.6675 8.21006 43.8603C8.21006 44.0419 8.23119 44.2224 8.24387 44.4249C12.4313 44.4249 16.5511 44.4218 20.671 44.4301C21.0186 44.4301 21.0693 44.2694 21.0661 43.9793C21.0556 42.9888 21.0788 41.9984 21.0588 41.0079C21.0524 40.6781 21.1148 40.5257 21.4899 40.556C21.8914 40.5884 22.2982 40.5571 22.7029 40.5571C23.5595 40.5571 23.9884 40.9742 23.9899 41.8084C23.9899 42.6715 23.9899 43.5346 23.9899 44.4019H36.6917L36.6906 44.403Z" fill="white"/>\r\n<path d="M39.5021 32.8154V35.6969H35.7542V43.4003H28.8174V32.8529H31.7696C31.7802 33.0345 31.8003 33.2172 31.8013 33.4009C31.8087 35.4872 31.8129 37.5745 31.8182 39.6608C31.8196 40.2369 32.1349 40.4791 32.7639 40.3872C32.7777 40.1117 32.803 39.8236 32.8051 39.5356C32.8178 37.4837 32.84 35.4319 32.8231 33.38C32.8189 32.9103 32.9668 32.7987 33.4233 32.8049C35.2713 32.83 37.1194 32.8154 38.9674 32.8143C39.1227 32.8143 39.2791 32.8143 39.5021 32.8143V32.8154Z" fill="white"/>\r\n<path d="M4.5489 32.7783H12.1789C12.1968 32.986 12.2211 33.1352 12.2211 33.2855C12.2232 35.1464 12.2116 37.0083 12.2306 38.8692C12.2349 39.2939 12.1134 39.4557 11.6675 39.4307C11.0535 39.3962 10.4344 39.3962 9.8194 39.4296C9.38406 39.4526 9.28791 39.2835 9.29742 38.8859C9.32278 37.8474 9.30587 36.8079 9.30587 35.7079H1.51318V28.8604H12.2222C12.2222 29.4615 12.2222 30.0762 12.2222 30.691C12.2211 31.7805 12.2201 31.7879 11.1191 31.7952C9.13153 31.8087 7.14294 31.8108 5.15541 31.8202C4.96521 31.8202 4.77607 31.8369 4.5489 31.8484V32.7793V32.7783Z" fill="white"/>\r\n<path d="M43.564 16.4336H32.8317C32.8317 15.5193 32.8275 14.6364 32.8338 13.7524C32.8359 13.384 33.1318 13.479 33.3389 13.479C35.468 13.4706 37.5982 13.4685 39.7273 13.4643C40.3064 13.463 40.5568 13.1426 40.4786 12.5031C40.2356 12.5031 39.9799 12.5031 39.7241 12.5031C37.6119 12.4937 35.5008 12.4729 33.3886 12.4843C32.9522 12.4864 32.8201 12.3654 32.8243 11.9302C32.8465 10.0703 32.8328 8.20946 32.8338 6.3486C32.8338 6.21187 32.8507 6.07411 32.8624 5.89355H35.7153V9.59233C36.681 9.59233 37.5728 9.59024 38.4646 9.59233C40.0137 9.5965 41.5616 9.60485 43.1107 9.60694C43.3537 9.60694 43.5682 9.60068 43.5671 9.94196C43.5608 12.0951 43.564 14.2471 43.564 16.4336Z" fill="white"/>\r\n<path d="M13.1718 4.87922H12.186V12.4479H5.46259C5.46259 11.5848 5.4478 10.7394 5.48267 9.8951C5.48689 9.79178 5.75845 9.62062 5.9106 9.6154C6.80769 9.58931 7.70688 9.5747 8.60291 9.6154C9.10798 9.63732 9.26753 9.49538 9.26331 8.98189C9.24429 6.79122 9.28021 4.59951 9.26753 2.4078C9.26542 1.96842 9.40278 1.84944 9.836 1.85465C11.7897 1.87553 13.7434 1.8724 15.6972 1.85465C16.0849 1.85152 16.2181 1.96007 16.217 2.3504C16.2065 5.567 16.2096 8.78359 16.2213 12.0002C16.2223 12.354 16.1198 12.4959 15.7426 12.4824C15.0568 12.4573 14.369 12.45 13.6843 12.4845C13.2658 12.5053 13.1887 12.3394 13.1898 11.971C13.1961 9.797 13.1813 7.62407 13.1739 5.4501C13.1739 5.26537 13.1739 5.08064 13.1739 4.87817L13.1718 4.87922Z" fill="white"/>\r\n<path d="M4.49472 13.3155H12.1839V20.1996H9.27283V16.314C9.02241 16.314 8.83538 16.314 8.64941 16.314C6.41463 16.3182 4.1809 16.3223 1.94612 16.3307C1.68196 16.3307 1.46323 16.3422 1.46535 15.9685C1.47591 13.8666 1.47063 11.7657 1.47063 9.6084H4.49578V13.3155H4.49472Z" fill="white"/>\r\n<path d="M13.1036 32.8438H20.0541V35.7149H16.1583V43.4485C15.6384 43.4485 15.1682 43.4485 14.6991 43.4485C13.0793 43.4485 11.4584 43.4381 9.83855 43.4548C9.44759 43.4589 9.26268 43.389 9.2891 42.9434C9.33031 42.2671 9.31763 41.5866 9.29332 40.9082C9.28065 40.5471 9.39371 40.4219 9.76881 40.4292C10.8571 40.45 11.9465 40.4365 13.1036 40.4365V32.8438Z" fill="white"/>\r\n<path d="M28.826 1.86232C29.2012 1.86232 29.496 1.86232 29.7908 1.86232C31.568 1.86232 33.3453 1.87798 35.1225 1.85084C35.598 1.84353 35.7312 1.99278 35.7069 2.44365C35.6709 3.1022 35.6804 3.76493 35.7026 4.42453C35.7143 4.77625 35.5727 4.86914 35.2388 4.86392C34.1346 4.84827 33.0304 4.8587 31.8744 4.8587V12.4378H24.9102V9.58236H28.8271V1.86232H28.826Z" fill="white"/>\r\n<path d="M40.541 35.6905V31.9688H32.874V25.0471C33.7468 25.0471 34.6027 25.0325 35.4575 25.0659C35.5621 25.0701 35.7365 25.3352 35.7417 25.4834C35.7755 26.4561 35.7703 27.4298 35.7798 28.4025C35.7808 28.557 35.7946 28.7115 35.8072 28.9452C36.0101 28.9452 36.1961 28.9452 36.3821 28.9452C38.6179 28.9432 40.8537 28.9452 43.0896 28.9348C43.4034 28.9338 43.5735 28.9818 43.5714 29.3533C43.5566 31.3885 43.563 33.4236 43.5608 35.4588C43.5608 35.5256 43.5408 35.5924 43.5249 35.6894H40.542L40.541 35.6905Z" fill="white"/>\r\n<path d="M13.4077 22.5294C13.3738 17.7285 17.4704 13.6948 22.4134 13.6614C27.5655 13.6269 31.6822 17.6002 31.7107 22.6338C31.7382 27.6643 27.6765 31.7325 22.6268 31.7847C17.8561 31.8348 13.2735 28.0254 13.4077 22.5284V22.5294ZM27.9628 28.1548C30.1363 27.6194 30.5843 26.8628 29.963 24.7598C30.1226 24.6324 30.2938 24.5103 30.447 24.3694C31.4751 23.4249 31.5247 22.1725 30.4966 21.2843C30.0962 20.9378 30.0476 20.679 30.2156 20.202C30.7006 18.8275 29.9651 17.6294 28.5926 17.4624C28.4013 17.4394 28.209 17.4311 27.9776 17.4123C27.9512 17.2025 27.9269 16.999 27.8984 16.7955C27.7103 15.4492 26.4138 14.6257 25.1416 15.1319C24.6175 15.3406 24.3998 15.2175 24.0807 14.8282C23.3031 13.8795 22.0055 13.82 21.0915 14.6435C20.8865 14.8282 20.7164 15.0494 20.5273 15.255C20.4692 15.2383 20.4184 15.2279 20.3698 15.2102C18.6053 14.56 17.5972 15.0818 17.182 16.8936C17.1133 17.1942 16.9484 17.2151 16.7086 17.2547C15.2346 17.501 14.5118 18.552 14.8922 19.9724C15.0085 20.4066 14.8859 20.6185 14.5689 20.8815C13.6708 21.6277 13.5123 22.6776 14.1505 23.5742C14.3787 23.8946 14.6904 24.1565 14.9673 24.4477C14.1917 26.4495 14.6048 27.2166 16.866 27.9148C16.8798 28.7727 17.0689 29.568 17.9184 30.0293C18.7532 30.4833 19.5742 30.3257 20.3804 29.9155C20.8495 30.6993 21.4233 31.2806 22.3838 31.2911C23.34 31.3015 23.9148 30.7139 24.3787 29.9948C26.3536 31.0385 27.7473 29.8612 27.9618 28.1538L27.9628 28.1548Z" fill="white"/>\r\n<path d="M17.1948 36.701C18.2842 36.701 19.3218 36.6811 20.3584 36.7104C20.8096 36.7229 20.9797 36.6081 20.9586 36.1322C20.9195 35.2294 20.9438 34.3235 20.9459 33.4186C20.9459 33.2328 20.9628 33.0471 20.9734 32.8467H23.9372V39.5982C23.169 39.5982 22.403 39.5982 21.638 39.5982C21.4615 39.5982 21.2861 39.5951 21.1097 39.5961C20.4158 39.6003 20.0685 39.9534 20.0678 40.6554C20.0678 41.5572 20.0678 42.4579 20.0678 43.4107H17.1948V36.702V36.701Z" fill="white"/>\r\n<path d="M32.8678 24.172V21.2508C33.0369 21.2383 33.1732 21.2195 33.3095 21.2195C35.2643 21.2174 37.218 21.2247 39.1728 21.2091C39.5342 21.2059 39.6683 21.303 39.6631 21.6766C39.6493 22.5982 39.7201 23.5229 39.6705 24.4413C39.6398 25.008 39.848 25.1072 40.3562 25.0873C41.2174 25.0529 42.0817 25.0842 42.9439 25.0915C43.1331 25.0936 43.3211 25.1145 43.542 25.1291V27.9157H36.77C36.77 27.0411 36.7658 26.179 36.77 25.3169C36.7763 24.2096 36.7795 24.2096 35.6605 24.2096C34.9209 24.2096 34.1812 24.2107 33.4416 24.2065C33.2535 24.2054 33.0654 24.1846 32.8657 24.172H32.8678Z" fill="white"/>\r\n<path d="M21.0557 12.4427V5.72043H24.922V1.89746H27.7981C27.8087 2.01226 27.833 2.16151 27.833 2.31075C27.8362 4.20606 27.8246 6.10137 27.8467 7.99668C27.852 8.45172 27.7178 8.59575 27.2497 8.58009C26.2153 8.54461 25.1787 8.56965 24.065 8.56965V12.4427H21.0547H21.0557Z" fill="white"/>\r\n<path d="M8.25668 21.0825H12.1895V24.0152H5.37629C5.37629 23.3577 5.37735 22.7044 5.37629 22.0511C5.37524 21.5814 5.3541 21.1107 5.36995 20.6421C5.38158 20.3008 5.24527 20.1912 4.90503 20.1954C3.91919 20.2058 2.9323 20.1745 1.94646 20.185C1.58509 20.1891 1.44455 20.0712 1.45406 19.707C1.47308 18.944 1.45935 18.1801 1.45935 17.3691H8.25774V21.0836L8.25668 21.0825Z" fill="white"/>\r\n<path d="M12.1958 25.0254V27.9091H1.49951V25.0254H12.1958Z" fill="white"/>\r\n<path d="M27.8531 43.431H24.9653V32.8555H27.8531V43.431Z" fill="white"/>\r\n<path d="M43.5555 17.3682V20.2508H32.875V17.3682H43.5555Z" fill="white"/>\r\n<path d="M20.0202 12.4778C19.1316 12.4778 18.2567 12.4809 17.3818 12.4757C17.0077 12.4736 17.1049 12.1814 17.1039 11.9779C17.0965 10.1859 17.0965 8.39495 17.0954 6.60297C17.0954 5.03955 17.0954 3.47717 17.0954 1.87305H20.0202V12.4778Z" fill="white"/>\r\n<path d="M19.6558 22.7944C19.6526 21.2571 20.9132 19.9932 22.4506 19.9922C24.0873 19.9911 25.3468 21.2185 25.3405 22.807C25.3341 24.3746 24.0704 25.6176 22.4928 25.6092C20.9026 25.6009 19.66 24.3673 19.6568 22.7944H19.6558ZM22.4865 20.7739C21.3411 20.7822 20.4398 21.6694 20.444 22.7851C20.4482 23.9456 21.357 24.8484 22.5066 24.8359C23.6668 24.8223 24.5628 23.9154 24.5533 22.7631C24.5448 21.6516 23.6245 20.7666 22.4854 20.7749L22.4865 20.7739Z" fill="white"/>\r\n<path d="M23.6572 19.1855C24.0936 18.1084 24.4296 17.1033 24.9062 16.1693C25.1915 15.6088 26.1308 15.5796 26.7025 15.9877C27.2804 16.4009 27.4294 17.0553 26.9846 17.6252C26.4172 18.3526 25.7758 19.0227 25.1777 19.7261C24.9727 19.9672 24.7804 19.9515 24.5448 19.7824C24.2828 19.5935 24.008 19.4203 23.6572 19.1855Z" fill="white"/>\r\n<path d="M29.7169 19.3997C29.7042 20.0875 29.3344 20.5154 28.786 20.7231C27.9671 21.0331 27.1165 21.2606 26.2701 21.4923C26.1655 21.5205 25.9404 21.3869 25.8855 21.2742C25.7513 21.0039 25.3709 20.7419 25.6879 20.3954C26.2881 19.7379 26.8978 19.0877 27.5349 18.4656C27.9438 18.067 28.4563 18.0722 28.9582 18.2976C29.4506 18.5189 29.7031 18.9123 29.7179 19.4008L29.7169 19.3997Z" fill="white"/>\r\n<path d="M16.8239 17.7803C17.0923 17.894 17.4093 17.9514 17.6185 18.132C18.2937 18.7102 18.9393 19.3228 19.5691 19.949C19.6758 20.0555 19.736 20.3748 19.661 20.4583C19.455 20.6869 19.4116 21.1628 18.9066 21.0271C18.0613 20.8007 17.2075 20.6065 16.3654 20.3696C15.7187 20.187 15.3711 19.6359 15.4683 19.0264C15.5761 18.3491 16.1466 17.8408 16.8229 17.7813L16.8239 17.7803Z" fill="white"/>\r\n<path d="M18.9696 29.5546C18.0968 29.5484 17.4766 28.6946 17.8263 27.867C18.0303 27.3848 18.4096 26.9705 18.7382 26.5478C18.9073 26.3297 19.1376 26.1564 19.3405 25.9644C19.9375 25.4008 20.2291 25.3998 20.8092 26.002C20.8969 26.0938 20.9402 26.29 20.9117 26.4184C20.7553 27.1135 20.6074 27.8138 20.3844 28.489C20.1573 29.1768 19.592 29.5588 18.9696 29.5536V29.5546Z" fill="white"/>\r\n<path d="M15.916 21.0352C16.811 21.268 17.7102 21.4871 18.5978 21.747C18.7214 21.7835 18.8735 22.0288 18.8587 22.1603C18.826 22.4588 18.77 22.942 18.5946 23.0057C17.7768 23.3063 16.9241 23.5359 16.0661 23.7008C15.2842 23.8521 14.6164 23.2864 14.5678 22.5402C14.5149 21.7407 15.1024 21.1125 15.915 21.0342L15.916 21.0352Z" fill="white"/>\r\n<path d="M28.9519 21.5362C29.8299 21.531 30.3709 21.9557 30.4375 22.5924C30.5114 23.3073 30.0909 23.9481 29.3587 24.0191C28.8145 24.0713 28.2481 23.9377 27.6955 23.8573C27.4018 23.8145 27.1165 23.7133 26.827 23.6371C26.1275 23.4534 25.9732 23.2092 26.137 22.5204C26.1581 22.4306 26.2247 22.3022 26.2965 22.2814C27.2221 22.0111 28.153 21.7574 28.9529 21.5362H28.9519Z" fill="white"/>\r\n<path d="M19.1854 15.6828C19.9261 15.6734 20.3625 15.9959 20.5527 16.5021C20.8675 17.3423 21.099 18.2158 21.3029 19.0904C21.3293 19.2042 21.0102 19.4442 20.8105 19.5475C20.6657 19.6227 20.3815 19.6456 20.2811 19.558C19.6006 18.961 18.9508 18.3296 18.2946 17.7065C17.9248 17.3558 17.9322 16.9342 18.1087 16.5063C18.3274 15.9771 18.7131 15.664 19.1854 15.6849V15.6828Z" fill="white"/>\r\n<path d="M18.881 23.8105C18.938 23.8763 18.9666 23.8993 18.9824 23.9295C19.5456 25.0181 19.5424 24.6664 18.7605 25.471C18.4192 25.8217 18.0674 26.163 17.7356 26.522C17.3013 26.9906 16.6409 27.1764 16.1179 26.9562C15.6286 26.7506 15.2768 26.1818 15.3148 25.6589C15.3571 25.0807 15.7438 24.6601 16.4116 24.4775C17.239 24.252 18.0674 24.0308 18.881 23.8105Z" fill="white"/>\r\n<path d="M25.8264 29.6968C25.3647 29.6989 24.9663 29.5267 24.7909 29.1071C24.4306 28.244 24.1168 27.3611 23.8061 26.4792C23.6508 26.0377 24.1147 26.0565 24.3207 25.8978C24.5088 25.7538 24.7001 25.6338 24.9547 25.8853C25.5126 26.4353 26.1096 26.9478 26.695 27.4706C27.1335 27.862 27.2603 28.3045 27.069 28.8232C26.8693 29.3639 26.3981 29.6958 25.8254 29.6968H25.8264Z" fill="white"/>\r\n<path d="M22.4534 26.3921C22.8602 26.2888 23.0578 26.4975 23.1413 26.9703C23.2248 27.4441 23.4583 27.8908 23.547 28.3636C23.6252 28.7769 23.6664 29.2225 23.5935 29.6316C23.5006 30.1566 23.0113 30.4854 22.4915 30.5104C21.9315 30.5376 21.4327 30.2505 21.2647 29.7172C21.1633 29.3968 21.1178 29.0294 21.1654 28.6996C21.2489 28.1194 21.401 27.5453 21.5637 26.9807C21.7402 26.3702 21.7592 26.3754 22.4545 26.3931L22.4534 26.3921Z" fill="white"/>\r\n<path d="M29.482 26.0443C29.4746 26.9898 28.4455 27.6338 27.6023 27.1025C26.8183 26.6068 26.1505 25.918 25.4922 25.2552C25.3981 25.1613 25.6147 24.7146 25.7542 24.4683C25.8218 24.3493 26.0617 24.2335 26.1959 24.2596C26.9683 24.4078 27.7365 24.58 28.4962 24.7814C29.1059 24.9432 29.4863 25.465 29.481 26.0453L29.482 26.0443Z" fill="white"/>\r\n<path d="M22.5741 14.8296C23.4733 14.8536 24.0766 15.6217 23.8315 16.4713C23.5959 17.2853 23.3327 18.0931 23.0443 18.8905C23.001 19.0105 22.7495 19.1326 22.6037 19.1232C22.4304 19.1118 22.1631 18.9928 22.1155 18.8592C21.8049 17.9752 21.509 17.0829 21.2765 16.177C21.0969 15.4777 21.7795 14.8087 22.5741 14.8296Z" fill="white"/>\r\n<path d="M23.7227 22.8505C23.7322 23.5101 23.2102 24.0518 22.5498 24.0706C21.8588 24.0894 21.2872 23.5571 21.2808 22.8881C21.2745 22.1909 21.7965 21.6493 22.4854 21.6388C23.1764 21.6284 23.7132 22.1534 23.7227 22.8505Z" fill="white"/>\r\n</g>\r\n<defs>\r\n<clipPath id="clip0_878_996">\r\n<rect width="45" height="45" fill="white"/>\r\n</clipPath>\r\n</defs>\r\n</svg>\r\n'
          },
          {
            type: "traffic_fines",
            name: "\u0642\u0628\u0636 \u062c\u0631\u06cc\u0645\u0647 \u0631\u0627\u0646\u0646\u062f\u06af\u06cc",
            icon: '<svg viewBox="0 0 70 101" fill="none" xmlns="http://www.w3.org/2000/svg">\n<g clip-path="url(#clip0_881_1113)">\n<path d="M15.205 75.9142C15.441 75.8216 15.6268 75.6831 15.8056 75.6912C16.3709 75.7176 16.9333 75.8021 17.4975 75.8567C17.6363 75.8699 17.7845 75.8797 17.9181 75.8481C18.7404 75.6509 19.4845 75.3015 20.1881 74.8204C22.3406 73.3513 24.5203 71.9219 26.6843 70.4694C26.895 70.328 27.1027 70.2694 27.3544 70.2717C28.5394 70.2815 29.7244 70.2763 30.9777 70.2763C30.8829 70.3958 30.8261 70.4757 30.7613 70.5482C29.2633 72.2236 27.7664 73.9008 26.2596 75.5687C26.1711 75.667 26.0033 75.7458 25.8719 75.7469C24.2136 75.759 22.5553 75.7532 20.8969 75.7555C20.5497 75.7555 20.2026 75.759 19.8565 75.7843C19.7767 75.79 19.7026 75.8912 19.6274 75.9504C19.5637 76.001 19.5105 76.0694 19.4399 76.1056C19.297 76.1791 19.1454 76.236 18.9307 76.3292C19.091 76.3964 19.1871 76.4464 19.2883 76.4774C20.3079 76.7895 21.3234 77.1172 22.3504 77.4045C23.9596 77.854 25.5815 78.2615 27.1901 78.7139C28.6962 79.1369 30.2047 79.5588 31.6877 80.0536C32.3734 80.2824 33.0319 80.6353 33.647 81.0192C34.3286 81.444 34.8748 82.0274 35.1346 82.8866C35.244 82.6585 35.3151 82.4855 35.4066 82.3234C35.9534 81.352 36.8578 80.8244 37.8356 80.3795C39.1538 79.78 40.5401 79.3875 41.9346 79.0191C43.6994 78.5529 45.4735 78.1213 47.232 77.6321C48.546 77.2666 49.8404 76.8344 51.1435 76.4303C51.206 76.4108 51.2644 76.3792 51.3362 76.3475C51.1522 76.0987 50.6823 76.2228 50.6754 75.7544C50.3045 75.7544 49.9492 75.7532 49.5939 75.7544C48.1861 75.759 46.7783 75.7653 45.3705 75.7676C44.9562 75.7682 44.5413 75.7665 44.1271 75.7486C44.0246 75.744 43.8956 75.6969 43.8296 75.6233C42.2743 73.8956 40.7253 72.1621 39.1763 70.4292C39.1514 70.401 39.1329 70.3671 39.0866 70.2999C39.189 70.2907 39.2677 70.2769 39.3464 70.2769C40.5135 70.2757 41.68 70.2717 42.8471 70.2815C42.9814 70.2826 43.1335 70.3298 43.2452 70.4039C45.5377 71.9242 47.8256 73.4496 50.1129 74.9779C50.5122 75.2446 50.952 75.3952 51.4027 75.5572C52.1624 75.8308 52.8979 75.9101 53.6819 75.7251C53.9579 75.6601 54.2582 75.6699 54.5447 75.6877C54.7026 75.6975 54.8554 75.7946 55.0486 75.8665C55.5677 75.313 56.0259 74.6543 56.3905 73.9335C57.0935 72.5437 57.4135 71.0511 57.5605 69.5153C57.774 67.2823 57.6143 65.0574 57.4048 62.8337C57.1537 60.1742 56.8557 57.5182 56.6642 54.8548C56.4518 51.9034 56.5328 48.96 57.2694 46.0643C57.7861 44.0314 58.7397 42.2117 59.879 40.4621C61.8579 37.4227 63.794 34.3552 65.7475 31.2992C65.998 30.9078 66.0669 30.8911 66.4325 31.2009C66.9093 31.605 67.3693 32.0286 67.8502 32.4275C68.0267 32.574 68.0238 32.6907 67.9352 32.8884C67.2883 34.3311 66.5975 35.7576 66.0345 37.2325C65.2018 39.4149 64.7256 41.6955 64.3946 44.0044C64.0914 46.1212 63.9444 48.2502 63.9288 50.3889C63.9126 52.6184 64.1637 54.8243 64.5364 57.017C65.0415 59.9897 65.5889 62.9561 66.0906 65.9294C66.4493 68.0566 66.6831 70.1981 66.6374 72.3604C66.5575 76.0981 65.4553 79.4812 63.0661 82.4056C61.8533 83.8902 60.3269 85.0093 58.6928 85.9915C56.6011 87.2491 54.3635 88.2164 52.1601 89.2545C48.9817 90.7517 45.7981 92.2404 42.6614 93.8204C40.024 95.1493 37.5816 96.7977 35.3284 98.7099C35.1844 98.8324 35.0843 98.8766 34.9153 98.7323C31.7577 96.0413 28.1899 93.998 24.4497 92.2352C21.376 90.7862 18.285 89.3734 15.2096 87.9279C13.1329 86.952 11.1031 85.8898 9.29312 84.4627C6.29409 82.0969 4.57615 78.9765 3.87254 75.2779C3.47386 73.1812 3.519 71.0672 3.72788 68.952C4.01257 66.0702 4.62302 63.2412 5.09923 60.3898C5.48749 58.0677 5.86128 55.7411 6.14886 53.4052C6.36989 51.6068 6.30162 49.7917 6.18936 47.9817C6.02735 45.3677 5.64719 42.787 5.09576 40.2259C4.62186 38.0245 3.75045 35.9761 2.79514 33.9535C2.61113 33.5638 2.41208 33.1804 2.23734 32.7861C2.20204 32.7068 2.20841 32.5482 2.26222 32.501C2.79629 32.0314 3.33962 31.5716 3.89048 31.1222C4.1497 30.9106 4.23418 30.9313 4.41587 31.2153C6.65863 34.7242 8.91238 38.2263 11.1355 41.7473C12.3523 43.675 13.0085 45.8114 13.3493 48.0496C13.7485 50.6705 13.708 53.3012 13.4772 55.9307C13.2521 58.4959 12.9651 61.0559 12.7377 63.6217C12.5485 65.7604 12.442 67.9025 12.7134 70.0452C12.9871 72.2081 13.6502 74.2088 15.1558 75.8607C15.1882 75.8964 15.2206 75.9314 15.2038 75.913L15.205 75.9142ZM24.5614 78.4104C24.5486 78.4408 24.5359 78.4707 24.5232 78.5012C27.3567 79.7105 30.1902 80.9192 33.0238 82.1285C33.0024 82.178 32.9815 82.2274 32.9601 82.2768C29.7829 80.9422 26.6056 79.607 23.4284 78.2724C24.9814 79.0127 26.5617 79.691 28.1378 80.3766C29.7106 81.0612 31.2925 81.7245 32.8542 82.4326L32.7935 82.5699C28.5666 80.7669 24.3397 78.9639 20.1129 77.1614C20.1019 77.1878 20.0903 77.2143 20.0793 77.2413C24.2391 79.0311 28.3982 80.8215 32.558 82.6113C32.5366 82.6602 32.5157 82.7096 32.4943 82.7585C27.2786 80.5669 22.0842 78.3253 16.8737 76.1211L16.8419 76.1952C22.0432 78.4345 27.245 80.6732 32.4463 82.9125L32.4041 83.0321C32.3045 83.0033 32.201 82.9844 32.1067 82.9441C28.165 81.2687 24.2234 79.5921 20.283 77.9144C18.9203 77.3338 17.5588 76.751 16.1979 76.1659C15.9606 76.0636 15.7465 76.0429 15.492 76.3073C16.1799 76.8717 16.8222 77.4499 17.516 77.9592C19.6928 79.5576 22.1213 80.7077 24.5857 81.7854C26.6936 82.7073 28.8334 83.5591 30.917 84.5316C31.6131 84.8564 32.1576 84.9104 32.7345 84.4259C32.8218 84.3523 32.9063 84.2258 32.915 84.1178C32.9399 83.8229 32.9405 83.5235 32.919 83.2281C32.8994 82.9568 32.9833 82.8539 33.2697 82.8683C33.7181 82.8907 34.1689 82.874 34.6584 82.874C34.4964 82.3981 34.306 81.9768 33.8772 81.7739C32.5285 81.1365 31.1658 80.5284 29.8054 79.9157C29.5294 79.7915 29.2396 79.6978 28.956 79.5898C30.604 80.4106 32.2756 81.171 33.9467 81.932C33.9727 81.9435 33.9964 81.9618 34.0167 81.9814C34.0294 81.9935 34.0358 82.013 34.0422 82.0302C34.0451 82.0383 34.041 82.0492 34.0369 82.0578C34.0335 82.0659 34.0265 82.0728 33.9976 82.113C33.861 82.0561 33.7129 81.9975 33.5677 81.9325C31.6339 81.0687 29.703 80.1996 27.7652 79.3444C27.4389 79.2001 27.0865 79.1145 26.7462 79.0018C26.737 79.0271 26.7277 79.0524 26.7191 79.0777C29.0278 80.0893 31.351 81.0687 33.6255 82.1567C30.5727 80.9802 27.5951 79.6266 24.5614 78.4087V78.4104ZM54.753 76.2481C54.5215 76.0349 54.3363 76.0935 54.1448 76.1757C50.7737 77.616 47.4032 79.0564 44.0316 80.4939C42.1007 81.317 40.1687 82.1366 38.2355 82.9545C38.1475 82.9918 38.0468 82.9987 37.9519 83.02C37.9415 82.9844 37.9317 82.9481 37.9213 82.9125C43.1156 80.6761 48.3099 78.4397 53.5049 76.2033C53.4927 76.1734 53.48 76.1429 53.4678 76.113C53.0801 76.2705 52.6896 76.4217 52.3048 76.5861C47.5965 78.5989 42.8894 80.6134 38.1817 82.6268C38.0763 82.6717 37.9658 82.7056 37.8576 82.7453C37.8414 82.7033 37.8252 82.6619 37.809 82.62C41.897 80.8267 46.0018 79.0719 50.084 77.2643C45.9 79.003 41.7443 80.8089 37.5666 82.5619C37.5463 82.5153 37.5267 82.4694 37.5064 82.4228C40.9255 80.9428 44.3452 79.4628 47.7643 77.9828C47.7568 77.9661 47.7498 77.9488 47.7423 77.9322C44.296 79.38 40.8497 80.8278 37.4028 82.2757C37.382 82.2274 37.3612 82.1797 37.3409 82.1314C40.2196 80.9026 43.0977 79.6737 45.9763 78.4449C45.6766 78.4857 45.3919 78.5667 45.1211 78.6817C42.4265 79.822 39.7341 80.9681 37.04 82.1107C36.9469 82.1504 36.8444 82.167 36.7461 82.1946C36.7345 82.1596 36.7224 82.1245 36.7108 82.09C39.0664 81.0646 41.422 80.0393 43.7776 79.0139C43.7666 78.9874 43.755 78.9616 43.744 78.9351C41.279 79.9984 38.8135 81.0618 36.3486 82.1257C36.3295 82.0825 36.311 82.0394 36.2919 81.9958C38.1846 81.1583 40.0778 80.3215 41.9705 79.484C41.8548 79.4743 41.7501 79.4921 41.6552 79.5323C40.7774 79.9019 39.899 80.2703 39.0253 80.6485C38.2123 81.0003 37.4156 81.3917 36.5904 81.7118C36.0361 81.9268 35.8538 82.3665 35.6421 82.8757C36.1003 82.8757 36.5042 82.8757 36.9081 82.8757C37.2911 82.8757 37.2877 82.8763 37.2935 83.2476C37.2987 83.5913 37.1986 84.0028 37.3542 84.2592C37.5099 84.5155 37.93 84.6086 38.2239 84.7897C38.3819 84.8874 38.5138 84.8868 38.6793 84.8064C39.1809 84.5615 39.6855 84.3213 40.1976 84.0988C42.6087 83.0528 45.0349 82.0412 47.4322 80.9641C49.4822 80.0427 51.4513 78.9662 53.2225 77.5712C53.7473 77.158 54.2351 76.6987 54.7518 76.2498L54.753 76.2481ZM11.9409 81.6888C11.9826 81.7624 12.0196 81.8394 12.0665 81.9095C12.6411 82.7728 13.4187 83.3855 14.374 83.793C15.4347 84.2454 16.5624 84.3816 17.6884 84.5437C18.0686 84.5983 18.4418 84.7006 18.8179 84.7811C18.8115 84.8207 18.8046 84.861 18.7982 84.9006C18.1432 84.9788 17.4905 84.8949 16.8326 84.8115C17.7393 85.7093 18.7913 86.3542 20.0591 86.4738C21.4188 86.6014 22.7913 86.5979 24.158 86.6485C24.2223 86.6508 24.2882 86.6203 24.3941 86.5956C23.4625 85.9806 22.5333 85.4944 21.5143 85.1719C20.7922 84.9432 20.0533 84.9432 19.3132 84.9029C19.205 84.8972 19.0725 84.8765 18.9967 84.811C18.6055 84.4736 18.2485 84.0948 17.8429 83.777C17.1324 83.22 16.3987 82.6866 15.5215 82.4079C15.1552 82.2918 14.7716 82.2303 14.4053 82.1142C14.2317 82.0596 14.024 81.9733 13.9302 81.8354C13.6635 81.4423 13.4777 80.9939 13.2058 80.6048C12.5207 79.6249 11.6666 78.8443 10.4868 78.4793C10.2855 78.4173 10.087 78.338 9.89721 78.246C9.52804 78.0672 9.11432 77.9529 8.85973 77.5683C8.939 78.1207 8.95346 78.6771 9.24509 79.1524C9.60615 79.741 10.0754 80.2479 10.6957 80.564C11.5353 80.9916 12.4015 81.3664 13.2556 81.7664C13.358 81.8147 13.4529 81.8785 13.5518 81.9348C12.9755 82.0234 12.4738 81.8411 11.9409 81.6888ZM58.1026 81.6865C57.5472 81.836 57.0501 82.0343 56.4958 81.9475C56.5855 81.8584 56.685 81.8049 56.7874 81.759C57.4644 81.4561 58.1489 81.1704 58.8172 80.8503C60.0856 80.2427 60.9888 79.3386 61.1647 77.8758C61.1769 77.7753 61.1665 77.6718 61.1665 77.5298C61.0137 77.6902 60.9234 77.8402 60.7904 77.9132C60.4449 78.1023 60.096 78.3098 59.7216 78.4178C58.0112 78.9098 56.9882 80.1456 56.2001 81.6158C56.0311 81.9308 55.8518 82.0791 55.5272 82.1418C54.8357 82.2751 54.1581 82.4607 53.5546 82.8378C52.6977 83.3735 51.8436 83.9172 51.1608 84.6736C51.0087 84.842 50.8629 84.9167 50.6453 84.9098C49.5673 84.8753 48.5304 85.0748 47.5566 85.5311C46.9097 85.834 46.29 86.195 45.6575 86.5295C45.6674 86.5611 45.6778 86.5922 45.6876 86.6238C45.8074 86.633 45.9266 86.6519 46.0464 86.6502C46.9722 86.6364 47.898 86.6289 48.8226 86.5991C49.9041 86.564 50.9502 86.3726 51.8997 85.8174C52.3702 85.5421 52.8221 85.2426 53.2543 84.7661C52.5287 84.8989 51.8853 84.9805 51.2303 84.8437C51.4756 84.7265 51.7267 84.6431 51.9848 84.5983C52.8007 84.4558 53.6258 84.3592 54.4347 84.185C55.7204 83.9092 56.8401 83.3194 57.6924 82.2958C57.848 82.1084 57.9667 81.8906 58.1026 81.6871V81.6865ZM35.3464 87.825C35.7572 87.0261 36.1993 86.2812 36.9174 85.7329C36.9665 85.6955 36.9926 85.6001 36.9932 85.5311C36.9984 84.842 36.9932 84.1523 36.9995 83.4631C37.0013 83.2976 36.9347 83.2459 36.7773 83.2464C35.6687 83.2499 34.5606 83.2505 33.452 83.2459C33.2761 83.2453 33.2176 83.3085 33.2193 83.4821C33.2269 84.1523 33.217 84.8225 33.2286 85.4926C33.2303 85.5903 33.2882 85.7174 33.3634 85.7783C33.8408 86.168 34.2071 86.6422 34.4964 87.179C34.6121 87.3945 34.7215 87.6135 34.8684 87.898C34.8684 87.5963 34.8598 87.3698 34.8708 87.1439C34.8817 86.9083 34.8528 86.7295 34.6231 86.568C34.2794 86.3266 34.2748 85.8346 34.5577 85.5248C34.8389 85.2167 35.314 85.1978 35.6201 85.4817C35.9256 85.7651 35.973 86.2841 35.638 86.522C35.3337 86.7381 35.3371 86.9887 35.347 87.283C35.3527 87.4635 35.3481 87.644 35.3481 87.8245L35.3464 87.825ZM27.7895 89.6062C27.8092 89.693 27.8098 89.7304 27.8254 89.7603C28.378 90.815 29.147 91.6633 30.2336 92.1915C31.1727 92.6479 32.1599 92.9583 33.1991 93.0996C33.3495 93.1203 33.4954 93.1744 33.6423 93.2175C33.8981 93.2928 34.1521 93.3709 34.4073 93.448C34.3731 93.314 34.3147 93.2272 34.2406 93.1571C33.7557 92.6962 33.2784 92.226 32.7779 91.7823C31.8665 90.973 30.799 90.4879 29.5943 90.2655C29.1175 90.1775 28.658 89.9884 28.1957 89.8327C28.0661 89.789 27.9527 89.6988 27.7901 89.6062H27.7895ZM42.2656 89.7166C42.2332 89.6896 42.2008 89.662 42.1684 89.635C41.5562 90.0586 40.8497 90.1994 40.1392 90.3367C39.1873 90.5201 38.3159 90.9 37.5776 91.5265C36.9428 92.0651 36.3463 92.6479 35.7352 93.2146C35.6785 93.2669 35.6421 93.3405 35.5587 93.456C35.6826 93.4353 35.7375 93.4319 35.7896 93.4169C36.1935 93.302 36.5951 93.1749 37.0018 93.0709C37.4578 92.9542 37.9259 92.8801 38.3772 92.7479C39.5021 92.4191 40.5459 91.9294 41.3282 91.0305C41.6795 90.6264 41.9555 90.1568 42.2662 89.7177L42.2656 89.7166ZM29.8326 89.6631C29.8407 89.6419 29.8488 89.6206 29.8569 89.5988C29.8014 89.5401 29.7545 89.4671 29.688 89.4246C29.0961 89.0401 28.5151 88.6349 27.9023 88.2854C26.9522 87.744 25.9043 87.5394 24.8194 87.4566C24.1714 87.4072 23.5285 87.2859 22.8828 87.1997C22.8423 87.1945 22.7989 87.2135 22.7028 87.2313C22.8139 87.3325 22.8926 87.3945 22.9597 87.4669C23.7866 88.3578 24.8038 88.9544 25.9848 89.1941C26.9997 89.3999 28.0424 89.47 29.0735 89.5959C29.3252 89.6263 29.5792 89.6407 29.8321 89.6631H29.8326ZM47.3188 87.3014C47.3014 87.2675 47.2835 87.2336 47.2661 87.1997C47.2198 87.1997 47.1729 87.1939 47.1278 87.2008C46.6065 87.2756 46.0863 87.3589 45.5638 87.4267C44.9915 87.5014 44.4054 87.5112 43.8458 87.6394C42.6527 87.9124 41.5788 88.4578 40.6113 89.2056C40.4499 89.3303 40.2965 89.4654 40.1397 89.5959C40.2491 89.6528 40.3249 89.6591 40.399 89.6522C41.1656 89.5763 41.9317 89.4924 42.6996 89.4223C43.8875 89.3131 45.0233 89.0395 46.0128 88.3463C46.4688 88.0268 46.8848 87.652 47.3193 87.302L47.3188 87.3014ZM8.48709 68.0186C8.54553 67.8669 8.5843 67.783 8.61034 67.6956C8.82501 66.9806 8.86378 66.2495 8.83311 65.5086C8.80591 64.8597 8.5519 64.3028 8.17116 63.7947C7.93624 63.4814 7.66081 63.1969 7.43804 62.8762C7.28644 62.6572 7.19386 62.398 7.06598 62.1382C7.02432 62.1871 6.98613 62.2175 6.96588 62.2578C6.45669 63.2601 6.26863 64.3016 6.7894 65.3408C7.10822 65.9771 7.5474 66.5536 7.93334 67.1565C8.1023 67.4209 8.273 67.6853 8.48709 68.0181V68.0186ZM62.9909 62.1606C62.7797 62.5118 62.6038 62.8377 62.3943 63.1406C62.2265 63.3831 62.0043 63.5883 61.8313 63.828C61.509 64.2752 61.2394 64.754 61.2162 65.3207C61.1977 65.7793 61.1763 66.242 61.2209 66.6972C61.2625 67.1226 61.3892 67.5398 61.4783 67.9606C61.5125 67.9594 61.5466 67.9588 61.5813 67.9577C61.6612 67.8313 61.7381 67.7031 61.8215 67.5789C62.0402 67.2542 62.2456 66.9191 62.4857 66.611C63.2466 65.6362 63.7304 64.5815 63.4544 63.3147C63.3647 62.9021 63.2408 62.4905 62.9909 62.1612V62.1606ZM7.136 67.3088C7.04284 67.3852 7.01622 67.399 7.0006 67.4209C6.14539 68.6279 6.1558 70.2458 7.0006 71.462C7.2876 71.8753 7.52368 72.3242 7.78232 72.757C7.87143 72.9059 7.95823 73.0559 8.0456 73.2053C8.08784 73.2019 8.13008 73.1984 8.17232 73.1944C8.31177 72.6041 8.48593 72.019 8.58314 71.4218C8.72953 70.5206 8.45064 69.6981 7.96575 68.9457C7.63998 68.4405 7.11517 68.0479 7.136 67.3082V67.3088ZM62.9741 67.3703C62.9492 67.3772 62.9249 67.3841 62.9 67.391C62.8809 67.86 62.653 68.2261 62.3515 68.5606C62.2172 68.7095 62.0934 68.8716 61.9881 69.0417C61.1398 70.4188 61.3418 71.8098 61.947 73.2662C62.0593 73.076 62.1455 72.9306 62.2311 72.7857C62.4875 72.3506 62.7235 71.9012 63.0048 71.4827C63.8617 70.2073 63.886 68.9147 63.1309 67.5933C63.0864 67.5151 63.0267 67.4444 62.9747 67.3709L62.9741 67.3703ZM10.01 57.0682C10.0378 57.0326 10.0714 56.9987 10.0945 56.9584C10.1229 56.909 10.1478 56.8555 10.164 56.8015C10.389 56.0618 10.5053 55.3088 10.4336 54.5346C10.3671 53.8237 10.1206 53.1874 9.67443 52.6189C9.33825 52.1913 8.97603 51.766 8.98124 51.1711C8.98124 51.132 8.94131 51.0929 8.86667 50.9573C8.67052 51.3527 8.48246 51.6694 8.35285 52.0091C8.14744 52.546 8.0537 53.1081 8.27878 53.6621C8.5409 54.3053 8.8117 54.9473 9.12416 55.5675C9.38107 56.0785 9.70452 56.5561 10.01 57.0688V57.0682ZM59.916 77.9477C59.9942 77.8615 60.0283 77.8172 60.0694 77.7799C60.5595 77.3361 61.0097 76.8338 61.5501 76.4619C62.7172 75.659 63.3971 74.6416 63.2703 73.1892C63.2536 72.9995 63.1934 72.8133 63.1604 72.6581C62.6784 73.0645 62.256 73.4875 61.7677 73.8123C61.3765 74.0726 61.0455 74.3715 60.7915 74.7491C60.1874 75.6475 59.9085 76.6533 59.8651 77.727C59.8628 77.7793 59.8889 77.8327 59.9166 77.9477H59.916ZM60.0219 57.1148C60.0543 57.0768 60.0769 57.059 60.0896 57.0354C60.4478 56.3635 60.8262 55.7014 61.156 55.0157C61.4153 54.4766 61.6948 53.926 61.8215 53.3489C61.9927 52.5666 61.6849 51.8442 61.2695 51.1763C61.2342 51.12 61.2151 51.0539 61.1722 50.9544C61.0883 51.0878 61.0525 51.1188 61.0519 51.1498C61.0467 51.8177 60.5948 52.2626 60.2522 52.7661C60.0827 53.0155 59.9409 53.2874 59.8194 53.5639C59.544 54.1875 59.544 54.8536 59.603 55.5117C59.6522 56.0578 59.7251 56.6101 60.0219 57.1148ZM10.1344 77.95C10.1489 77.7942 10.1738 77.6948 10.164 77.5988C10.0853 76.7947 9.94986 76.0015 9.54887 75.2842C9.22831 74.7106 8.89849 74.1376 8.26374 73.8335C8.18736 73.7967 8.12371 73.7318 8.05891 73.6755C7.6718 73.3404 7.28586 73.0041 6.89413 72.6633C6.89702 72.6599 6.87214 72.6771 6.86115 72.7007C6.8409 72.7438 6.8218 72.7892 6.8137 72.8352C6.63375 73.8674 6.77262 74.8405 7.52773 75.613C8.01956 76.1165 8.61555 76.5183 9.14846 76.9844C9.4777 77.2723 9.77511 77.5954 10.135 77.95H10.1344ZM61.9088 62.7325C61.9349 62.5974 61.9499 62.5267 61.9621 62.4555C62.0304 62.0508 62.0876 61.6445 62.1692 61.2421C62.2722 60.7369 62.4169 60.2392 62.5042 59.7311C62.712 58.527 62.2172 57.5889 61.3319 56.8124C61.2752 56.763 61.2006 56.7343 61.0889 56.6699C61.0889 56.8285 61.0988 56.9239 61.0872 57.0165C61.0235 57.5274 61.0131 58.0551 60.8725 58.5448C60.6827 59.2052 60.5896 59.834 60.795 60.511C60.9998 61.1864 61.1485 61.8773 61.6288 62.4313C61.7057 62.5204 61.7891 62.6043 61.9088 62.7325ZM8.13586 62.736C8.24985 62.6043 8.32334 62.5193 8.3974 62.4348C8.91007 61.852 9.05357 61.1191 9.25551 60.4041C9.41289 59.8466 9.3533 59.3196 9.22831 58.7684C9.09407 58.1769 9.03736 57.5677 8.94883 56.9665C8.9361 56.8797 8.93321 56.7917 8.91817 56.6239C8.71565 56.8021 8.56173 56.9153 8.43559 57.0533C8.0103 57.5159 7.58848 58.0166 7.53641 58.6505C7.4878 59.2408 7.57054 59.8489 7.6556 60.4409C7.75455 61.1278 7.91888 61.8054 8.05717 62.4865C8.0699 62.5492 8.09536 62.6089 8.13586 62.7365V62.736ZM8.92858 45.7177C8.88866 45.7258 8.87419 45.7246 8.87188 45.7298C8.82674 45.8126 8.78219 45.8959 8.73937 45.9798C8.20993 47.0288 8.13586 48.0881 8.71218 49.1399C9.00091 49.6664 9.33594 50.1676 9.65187 50.6791C9.82603 50.9607 10.0048 51.2401 10.2079 51.5631C10.2646 51.428 10.3208 51.3378 10.3404 51.2395C10.4162 50.8653 10.4972 50.4912 10.5458 50.1135C10.7084 48.8514 10.3827 47.7467 9.44645 46.8449C9.1907 46.5989 9.00843 46.3138 8.9986 45.9425C8.99628 45.866 8.95173 45.7902 8.928 45.7183L8.92858 45.7177ZM59.842 51.5838C60.3726 50.7033 60.8968 49.9032 61.3499 49.0652C61.9673 47.9231 61.7596 46.8029 61.1427 45.6884C61.1005 45.7419 61.0594 45.7689 61.0594 45.7965C61.0536 46.3914 60.6474 46.7512 60.2951 47.161C59.8605 47.6668 59.5359 48.2507 59.4815 48.933C59.4503 49.3227 59.4566 49.7181 59.4827 50.1089C59.5151 50.5912 59.5689 51.0751 59.842 51.5832V51.5838ZM59.4074 56.5423C59.4005 56.4584 59.4057 56.371 59.3849 56.2905C59.0805 55.1416 59.0487 54.0208 59.7112 52.9644C59.7454 52.9098 59.7679 52.7971 59.7373 52.7621C59.4346 52.4201 59.0603 52.1747 58.7027 51.981C58.6795 52.4494 58.7299 52.9086 58.6217 53.3282C58.3109 54.5352 58.547 55.5957 59.4074 56.5423ZM11.4346 52.0011C11.3999 51.9769 11.3646 51.9528 11.3299 51.9281C10.9943 52.189 10.6535 52.4436 10.33 52.7184C10.2843 52.7569 10.2988 52.9046 10.33 52.9856C10.4625 53.3322 10.6442 53.6633 10.7466 54.0174C10.9665 54.7783 10.8323 55.5342 10.6448 56.2836C10.6245 56.3653 10.6326 56.4538 10.6274 56.5388C11.2929 55.7916 11.6499 54.9669 11.5156 53.98C11.4265 53.3248 11.1546 52.6793 11.4358 52.0011H11.4346ZM11.2842 77.1999C11.2211 77.5396 11.1661 77.8368 11.1106 78.1333C11.0759 78.3184 11.1349 78.4276 11.327 78.5018C11.8645 78.7098 12.3512 79.0168 12.707 79.4685C13.1803 80.0697 13.6103 80.7043 14.0575 81.3256C14.1027 81.3882 14.1403 81.4566 14.1814 81.5222C14.1513 80.5157 13.8324 79.6352 13.0912 78.9449C12.8112 78.684 12.4825 78.4742 12.2071 78.2086C11.8993 77.9115 11.6273 77.5781 11.2842 77.1999ZM55.7933 81.5457C56.1353 81.0508 56.4697 80.5508 56.821 80.0628C57.3221 79.3656 57.9325 78.7937 58.7501 78.4702C58.8132 78.4449 58.9081 78.3776 58.9069 78.3311C58.8994 77.9563 58.889 77.5787 58.6755 77.1965C58.5979 77.312 58.5557 77.3982 58.4926 77.4649C58.205 77.7712 57.951 78.127 57.6137 78.3655C56.4958 79.1553 55.8686 80.1962 55.7933 81.5451V81.5457ZM61.1647 62.3693C61.0571 62.1192 60.9651 61.8606 60.839 61.6203C60.4079 60.7973 60.0966 59.9575 60.3668 59.0086C60.3888 58.9304 60.372 58.7833 60.3211 58.7523C59.9456 58.5224 59.5249 58.4304 59.0765 58.3896C59.4086 58.9063 59.4503 59.4707 59.5087 60.03C59.6221 61.1082 60.3859 61.7399 61.1647 62.3693ZM10.9966 58.4109L10.9139 58.3275C10.5684 58.4344 10.223 58.5425 9.87753 58.6488C9.67386 58.7115 9.60442 58.8454 9.66344 59.0454C9.93829 59.9754 9.61078 60.7956 9.19822 61.6037C9.07266 61.8503 8.97487 62.1112 8.86435 62.3658C9.25724 62.0365 9.6536 61.7232 9.9568 61.3376C10.1923 61.0381 10.378 60.6639 10.4683 60.2944C10.6228 59.6615 10.547 58.973 10.9966 58.4109ZM34.3523 92.7927C34.3749 92.7646 34.387 92.7559 34.3853 92.7496C34.3778 92.7128 34.372 92.6743 34.3575 92.6398C33.9068 91.5892 33.1962 90.7678 32.1581 90.262C31.5986 89.9896 31.0709 89.6884 30.6531 89.2206C30.6068 89.1688 30.5426 89.1326 30.4437 89.0556C30.4437 89.4131 30.4315 89.7171 30.4524 90.0195C30.4576 90.0948 30.5542 90.2057 30.6312 90.2293C31.6871 90.55 32.5823 91.1236 33.3646 91.8898C33.6828 92.2013 34.0225 92.4915 34.3535 92.7927H34.3523ZM35.6253 92.8284C36.0396 92.4542 36.4087 92.1375 36.7582 91.8012C37.5052 91.0834 38.3645 90.5575 39.3563 90.2448C39.4309 90.2212 39.5461 90.1563 39.5484 90.1057C39.5657 89.7723 39.5571 89.4378 39.5571 89.1039C39.0658 89.5666 38.5693 89.9425 37.9791 90.2097C36.9064 90.6954 36.1692 91.5173 35.6947 92.5806C35.6698 92.637 35.6606 92.6996 35.6247 92.8289L35.6253 92.8284ZM40.307 88.924C40.3185 88.9366 40.3301 88.9487 40.3411 88.9613C40.436 88.905 40.5315 88.8493 40.6264 88.7918C41.7159 88.1291 42.8518 87.5773 44.1236 87.352C44.6374 87.2612 45.0743 86.6525 45.0135 86.0944C44.9759 86.1117 44.9429 86.1272 44.9088 86.1427C44.2642 86.4364 43.6306 86.7565 42.9733 87.0181C41.9717 87.4164 41.0933 87.9768 40.3862 88.7906C40.3527 88.8291 40.333 88.8797 40.3064 88.9246L40.307 88.924ZM10.4463 77.0396C10.4781 77.0332 10.5105 77.0269 10.5424 77.0206C10.8056 76.178 10.8462 75.3463 10.3983 74.5365C10.0696 73.9427 9.57954 73.4243 9.50837 72.6713C9.28617 72.9748 9.11085 73.284 8.96793 73.6071C8.92916 73.695 8.94999 73.8542 9.00901 73.9307C9.16524 74.1313 9.38165 74.2864 9.52978 74.4916C9.97995 75.1153 10.2571 75.8119 10.3537 76.5769C10.3734 76.7326 10.4145 76.8855 10.4457 77.0396H10.4463ZM59.5637 77.0626C59.5897 76.9666 59.6267 76.8717 59.64 76.774C59.7818 75.7268 60.1082 74.7692 60.9443 74.0468C61.0305 73.9726 61.1346 73.8186 61.1103 73.7364C60.9958 73.3467 60.8413 72.9685 60.5589 72.7317C60.35 73.1702 60.1978 73.6404 59.9265 74.0284C59.2639 74.9767 59.1193 75.9682 59.5637 77.062V77.0626ZM24.9884 86.149C25.0462 86.5387 25.199 86.8985 25.4495 87.2164C25.49 87.2675 25.5838 87.2899 25.6567 87.3014C27.079 87.529 28.3496 88.1228 29.5509 88.8866C29.5971 88.9159 29.6562 88.9263 29.7094 88.9452C29.7302 88.9159 29.7505 88.8866 29.7713 88.8567C29.3061 88.4642 28.8733 88.0222 28.3664 87.6928C27.8983 87.3882 27.3526 87.2003 26.8382 86.9681C26.2301 86.6939 25.6179 86.4272 24.9878 86.1484L24.9884 86.149ZM55.548 80.8106C55.4328 80.8635 55.3923 80.8715 55.3669 80.8957C54.9375 81.3009 54.4064 81.517 53.8625 81.721C52.8435 82.1027 52.0178 82.7372 51.427 83.6545C51.368 83.7465 51.3367 83.8568 51.2928 83.958C51.4079 83.939 51.4664 83.8919 51.5283 83.8494C52.1486 83.4177 52.7393 82.9321 53.3996 82.5734C53.9492 82.2745 54.5823 82.1285 55.1754 81.9067C55.2645 81.8733 55.3918 81.809 55.408 81.7383C55.4722 81.4538 55.4994 81.1606 55.5492 80.8106H55.548ZM61.1121 67.5479C61.1289 67.5462 61.1462 67.5439 61.163 67.5421C61.1659 67.5082 61.1804 67.4703 61.1705 67.4404C60.8812 66.5662 60.946 65.6661 60.9732 64.7695C60.9784 64.5919 61.0062 64.3999 61.0814 64.2418C61.3273 63.724 60.9611 63.0314 60.3871 62.9268C60.3871 63.2693 60.4044 63.6159 60.383 63.9608C60.3489 64.5212 60.2823 65.0799 60.2453 65.6402C60.2372 65.7673 60.2684 65.911 60.3251 66.0253C60.5786 66.5369 60.8482 67.0409 61.1121 67.5479ZM18.6808 83.9718C18.7045 83.9563 18.7282 83.9402 18.7519 83.9247C18.6507 83.7586 18.5604 83.5844 18.4464 83.4269C17.8354 82.5849 17.0039 82.0469 16.0434 81.6612C15.5863 81.4779 15.1702 81.1917 14.7357 80.9526C14.6738 80.9186 14.6119 80.8847 14.521 80.8347C14.521 80.9813 14.5135 81.0859 14.5222 81.1894C14.5789 81.8337 14.5829 81.8251 15.2038 82.0044C15.9259 82.213 16.6272 82.4751 17.2423 82.9217C17.7226 83.2706 18.2017 83.6218 18.6808 83.9718ZM19.058 83.5034C18.9568 83.8603 19.3566 84.5339 19.6748 84.5977C19.6841 84.5994 19.6939 84.6006 19.7032 84.6017C21.1405 84.7627 22.5124 85.1386 23.79 85.8254C23.8271 85.845 23.8745 85.845 23.9173 85.8542C23.9497 85.8162 23.9821 85.7783 24.0151 85.7409C23.9283 85.6995 23.8253 85.6754 23.7582 85.6133C22.9898 84.9064 22.0831 84.4655 21.0688 84.2437C20.3709 84.0908 19.6905 83.9017 19.0586 83.5034H19.058ZM51.0191 83.5482C50.2975 83.9396 49.5505 84.0799 48.8197 84.2856C48.2515 84.446 47.6954 84.6828 47.1724 84.9587C46.7708 85.1702 46.4294 85.4955 46.0614 85.7697C46.084 85.8024 46.106 85.8346 46.1285 85.8674C46.364 85.749 46.5926 85.6145 46.8362 85.515C47.9443 85.0621 49.0841 84.727 50.2813 84.5989C50.4173 84.5845 50.577 84.4931 50.6644 84.3874C50.7957 84.2281 50.8808 84.0287 50.9676 83.8385C51.0069 83.7517 51.0029 83.6459 51.0185 83.5488L51.0191 83.5482ZM8.85625 67.5531C8.86898 67.5577 8.88114 67.5617 8.89387 67.5663C9.03852 67.303 9.19359 67.0444 9.32552 66.7748C9.48406 66.4507 9.72188 66.1236 9.74734 65.7851C9.79074 65.2115 9.68427 64.6281 9.6617 64.0481C9.64897 63.7125 9.67848 63.3751 9.68716 63.0383C9.68832 62.994 9.68022 62.9498 9.6727 62.8601C9.33652 63.0452 9.0906 63.2734 8.89097 63.5562C8.75962 63.7424 8.78855 63.9263 8.86956 64.1263C8.95057 64.3263 9.04604 64.5373 9.05241 64.7459C9.06977 65.3465 9.06456 65.9495 9.03042 66.5495C9.01133 66.8863 8.91643 67.2191 8.85625 67.5536V67.5531ZM11.3906 46.5132C11.1794 46.692 10.948 46.9012 10.7027 47.0926C10.5227 47.2328 10.4891 47.3719 10.591 47.5829C11.044 48.522 11.0915 49.4888 10.7628 50.4779C10.6957 50.6803 10.6529 50.8906 10.5806 51.1665C10.6726 51.0803 10.7252 51.051 10.7489 51.0062C10.9862 50.5492 11.2593 50.1044 11.4392 49.6256C11.559 49.306 11.5943 48.9341 11.5793 48.5898C11.5498 47.9099 11.4595 47.2323 11.3906 46.5138V46.5132ZM59.4566 51.1792C59.4144 51.0314 59.3941 50.9631 59.3756 50.8935C59.2888 50.5722 59.18 50.2549 59.1204 49.9285C58.9712 49.1043 59.0736 48.3088 59.441 47.5484C59.4821 47.4633 59.5168 47.3052 59.4728 47.2616C59.2003 46.9908 58.9052 46.7431 58.6193 46.4902C58.5835 47.0012 58.6101 47.4668 58.5094 47.9042C58.238 49.0818 58.6662 50.0664 59.2807 51.0148C59.3085 51.0579 59.3577 51.0878 59.4572 51.1797L59.4566 51.1792ZM8.62654 72.8564C8.65431 72.8696 8.68151 72.8834 8.70928 72.8967C8.90254 72.4989 9.10506 72.1046 9.28675 71.7017C9.50432 71.2189 9.65765 70.7212 9.58185 70.1786C9.48812 69.5038 9.28849 68.8336 9.47481 68.1198C9.17971 68.348 8.92569 68.5951 8.67977 68.8503C8.5571 68.9773 8.5357 69.1026 8.63695 69.2808C9.05877 70.0228 9.09812 70.8298 8.94999 71.646C8.87593 72.0552 8.73648 72.4529 8.62596 72.8564H8.62654ZM61.3609 72.8961C61.3806 72.8863 61.3996 72.8765 61.4193 72.8673C61.3898 72.7719 61.3615 72.6765 61.3302 72.5817C60.9668 71.4908 60.8025 70.3987 61.3794 69.3274C61.5044 69.0952 61.4442 68.94 61.2949 68.7785C61.1468 68.6181 60.9946 68.4606 60.8361 68.3106C60.758 68.2365 60.6602 68.183 60.5711 68.1204L60.5039 68.1497C60.7232 68.7744 60.5543 69.3797 60.4727 69.9935C60.4276 70.3303 60.4009 70.7005 60.4947 71.0183C60.6503 71.5454 60.9049 72.0443 61.1294 72.5506C61.185 72.6754 61.2828 72.7817 61.3609 72.8967V72.8961ZM36.977 81.3825C37.8212 81.0008 38.6648 80.6192 39.509 80.2376C38.6035 80.4864 37.7367 80.8181 36.977 81.3825ZM37.3102 85.4627C37.54 85.3495 37.7344 85.253 37.9867 85.1288C37.7286 84.9926 37.5342 84.8897 37.3102 84.7719V85.4633V85.4627ZM32.9075 84.8179C32.6847 84.9374 32.5059 85.034 32.2791 85.1558C32.51 85.2679 32.6916 85.3564 32.9075 85.461V84.8179ZM31.6073 80.4468C31.5969 80.4738 31.5865 80.5002 31.5761 80.5272C32.0714 80.7583 32.5667 80.9888 33.062 81.2198C33.0741 81.1934 33.0868 81.1664 33.099 81.1399C32.602 80.9089 32.1043 80.6778 31.6073 80.4468Z" fill="white"/>\n<path d="M39.0812 17.8775C38.4158 17.8775 37.7793 17.8999 37.1451 17.8694C36.747 17.8499 36.4259 17.9338 36.1887 18.2999C36.0255 18.1534 35.8866 18.0281 35.7125 17.8712C35.529 18.0856 35.3508 18.2942 35.1541 18.5235C34.8983 18.2838 34.6975 18.0965 34.4777 17.8901C34.3313 18.0206 34.1913 18.1448 34.0188 18.2982C33.7897 17.8102 33.3632 17.8677 32.946 17.8746C32.3692 17.8838 31.7923 17.8769 31.2067 17.8769C31.1893 17.8125 31.1673 17.7683 31.1668 17.7246C31.1616 16.0974 31.1402 14.4703 31.1604 12.8431C31.183 11.0545 32.0555 9.68651 33.4315 8.61573C33.8828 8.26454 34.4065 8.0036 34.9076 7.72024C35.0077 7.66334 35.179 7.6438 35.2802 7.6892C36.7291 8.33926 37.8846 9.31119 38.6085 10.7424C38.9157 11.3499 39.0893 11.9999 39.0963 12.6759C39.1136 14.3507 39.1026 16.0262 39.1015 17.7016C39.1015 17.7476 39.0911 17.793 39.0806 17.8769L39.0812 17.8775ZM35.7692 16.048C35.8756 15.8486 35.9578 15.7187 36.0157 15.5796C36.0857 15.41 36.1939 15.3491 36.3744 15.3865C36.4676 15.406 36.5665 15.3951 36.6626 15.402C36.8176 15.4129 36.8963 15.3244 36.8524 15.1939C36.695 14.7284 36.9681 14.5393 37.3378 14.399C37.3714 14.3864 37.3986 14.3553 37.4715 14.3019C37.0537 13.9225 37.0294 13.515 37.5074 13.0851C36.9044 12.9397 36.6539 12.6241 36.8755 12.0114C36.2882 12.1505 35.8965 12.0172 35.7697 11.3734C35.3381 11.8534 34.9371 11.8511 34.5488 11.4332C34.399 11.6712 34.3197 11.9356 34.1455 12.0327C33.9748 12.1281 33.7075 12.0534 33.4344 12.0534C33.5773 12.6213 33.4095 12.9816 32.8714 13.0977C32.9223 13.2426 32.9316 14.2478 32.8841 14.4025C33.457 14.5013 33.5721 14.9048 33.4674 15.4186C33.744 15.4186 34.0072 15.3445 34.1727 15.4388C34.3463 15.5382 34.4262 15.7991 34.576 16.0348C34.9562 15.6256 35.3566 15.5905 35.7686 16.048H35.7692ZM36.5168 17.2113C37.1278 17.9005 38.2989 17.8752 38.7115 17.1998C38.4008 16.3975 38.1062 15.6376 37.8117 14.8772C37.7787 14.8686 37.7463 14.86 37.7134 14.8508C37.6561 14.9669 37.5618 15.079 37.5484 15.1997C37.5201 15.4554 37.5317 15.7158 37.5305 15.9744C37.5288 16.3354 37.5305 16.6963 37.5305 17.0768H36.7436C36.8761 16.7182 36.9987 16.386 37.1214 16.0538C37.0815 16.0377 37.0416 16.0216 37.0011 16.0049C36.8443 16.3946 36.688 16.7843 36.5168 17.2108V17.2113ZM31.5805 17.209C32.1232 17.9022 33.3274 17.8884 33.781 17.1855C33.6873 16.9648 33.608 16.7762 33.527 16.5889C33.4483 16.4078 33.3679 16.2279 33.288 16.048C33.2545 16.0653 33.2209 16.0825 33.1873 16.0997C33.3042 16.4153 33.4211 16.7303 33.5461 17.0665H32.7476C32.7476 16.4297 32.7412 15.8181 32.751 15.2071C32.7545 15.0014 32.6805 14.9111 32.4687 14.9134C32.1736 15.6756 31.8825 16.4274 31.5799 17.2096L31.5805 17.209ZM35.4573 9.1129C35.4746 8.94449 35.5186 8.76401 35.5036 8.58871C35.4914 8.45249 35.4405 8.26799 35.3421 8.20477C35.2386 8.1381 35.0245 8.13867 34.9203 8.20477C34.822 8.26742 34.7595 8.45364 34.7589 8.58526C34.7589 8.83471 34.9041 9.08876 34.554 9.25486C34.3868 9.33418 34.3886 9.54225 34.5749 9.6503C34.7641 9.76008 34.8005 9.91182 34.7907 10.1078C34.7803 10.3182 34.7849 10.5291 34.7936 10.7395C34.7959 10.7981 34.8353 10.855 34.8578 10.9131C34.8844 10.9073 34.9116 10.9021 34.9383 10.8964V10.0067C35.0928 9.99114 35.2062 9.97964 35.3537 9.96527V10.9021C35.3809 10.9039 35.4081 10.9056 35.4347 10.9073C35.4469 10.8222 35.4683 10.7378 35.47 10.6527C35.4752 10.4326 35.4608 10.2113 35.477 9.99229C35.4839 9.89975 35.5244 9.78595 35.5904 9.72502C35.9023 9.43477 35.8849 9.30889 35.4579 9.11232L35.4573 9.1129ZM35.4359 16.5199C35.4012 16.521 35.3664 16.5222 35.3317 16.5233C35.3317 16.9125 35.3421 17.3027 35.3254 17.6913C35.3202 17.8131 35.242 17.9321 35.1969 18.0528C35.1576 18.0476 35.1182 18.043 35.0789 18.0378C34.7606 17.5976 35.0609 17.047 34.8428 16.5797C34.7919 17.0079 34.767 17.4378 34.8063 17.862C34.8191 17.9999 34.9984 18.1235 35.1009 18.2528C35.3699 18.0976 35.5018 17.9235 35.4764 17.6326C35.4509 17.3487 35.4735 17.0602 35.4694 16.7739C35.4683 16.6889 35.4474 16.6044 35.4359 16.5199Z" fill="white"/>\n<path d="M35.4241 70.2769C36.3372 70.2769 37.2318 70.274 38.1257 70.282C38.1981 70.2826 38.2883 70.3407 38.3387 70.3993C39.8506 72.1362 41.3585 73.8766 42.8664 75.6176C42.8844 75.6383 42.8931 75.6676 42.9428 75.7659C42.6657 75.7659 42.4244 75.7659 42.1831 75.7659C40.0161 75.7624 37.8486 75.7573 35.6816 75.7567C35.5057 75.7567 35.3935 75.7417 35.394 75.5164C35.4016 73.8226 35.3993 72.1288 35.4004 70.4349C35.4004 70.3981 35.4114 70.3608 35.4241 70.2774V70.2769Z" fill="white"/>\n<path d="M34.5989 70.277V75.7373H27.1074C27.1427 75.6712 27.1624 75.6125 27.2 75.5689C28.6888 73.848 30.1788 72.1277 31.6734 70.4115C31.7295 70.3471 31.829 70.2839 31.9089 70.2828C32.7942 70.2736 33.6795 70.277 34.5983 70.277H34.5989Z" fill="white"/>\n<path d="M35.1219 68.2946C31.7277 68.2946 28.3335 68.2912 24.9393 68.3009C24.6546 68.3015 24.5851 68.2153 24.5875 67.9434C24.6054 65.8369 24.6118 63.7298 24.6158 61.6233C24.6204 58.8846 24.6013 56.1458 24.6297 53.4076C24.6395 52.4547 24.7067 51.4948 24.8444 50.5522C25.0857 48.9015 25.8975 47.5059 27.0293 46.3018C28.1854 45.0718 29.4884 43.9999 30.9587 43.163C32.2601 42.4221 33.6117 41.7692 34.9484 41.0904C35.0571 41.0352 35.2406 41.0335 35.3499 41.0864C36.933 41.8514 38.5549 42.552 39.998 43.5688C41.4151 44.5672 42.7899 45.6242 43.8199 47.0421C44.5912 48.1043 45.2178 49.2486 45.4464 50.5533C45.5708 51.2661 45.6096 51.9966 45.6437 52.7208C45.6883 53.6576 45.7079 54.5968 45.7062 55.5348C45.6992 58.7621 45.6761 61.9889 45.6645 65.2162C45.6611 66.1255 45.6674 67.0347 45.6888 67.944C45.6952 68.2187 45.6125 68.3009 45.333 68.3004C41.9295 68.2917 38.5254 68.2946 35.1214 68.2946H35.1219ZM24.8739 68.0153H45.3897C45.3949 67.9411 45.4013 67.8934 45.4013 67.8457C45.4018 65.7674 45.4053 63.689 45.4013 61.6112C45.3949 58.4615 45.5633 55.3095 45.3312 52.1627C45.2716 51.3574 45.1796 50.5344 44.9488 49.7653C44.4101 47.9704 43.2517 46.5639 41.8676 45.3333C39.928 43.609 37.6748 42.3905 35.3077 41.3629C35.2047 41.318 35.0398 41.3387 34.9339 41.3899C34.0081 41.837 33.0748 42.2721 32.1709 42.7607C30.4709 43.6797 28.8878 44.7655 27.5286 46.1495C26.0844 47.6197 25.1053 49.3199 25.0029 51.4166C24.9184 53.1467 24.8444 54.8796 24.838 56.6114C24.8247 60.3077 24.8588 64.0046 24.8733 67.7015C24.8733 67.8038 24.8733 67.9066 24.8733 68.0164L24.8739 68.0153Z" fill="white"/>\n<path d="M17.9779 36.9053C18.0745 37.2318 18.1717 37.5583 18.2666 37.8853C18.3801 38.2767 18.354 38.3244 17.9727 38.4371C17.3559 38.6193 17.3611 38.6176 17.1742 38.0043C16.9069 37.1289 16.6361 36.2553 16.356 35.3839C16.2767 35.1368 16.3028 35.0063 16.5932 34.9431C17.239 34.8023 17.8709 34.5936 18.5201 34.477C19.0379 34.3838 19.3533 34.5729 19.5304 34.9494C19.7508 35.419 19.6727 35.934 19.3249 36.2748C19.292 36.307 19.2393 36.3191 19.2468 36.3156C19.6542 36.7208 20.0303 37.0944 20.4359 37.4979C20.4822 37.0967 20.5308 36.6984 20.5736 36.2995C20.6546 35.5489 20.7246 34.7971 20.8213 34.0482C20.834 33.9487 20.9625 33.8189 21.0649 33.7844C21.3085 33.7016 21.5677 33.6637 21.8223 33.6142C22.0046 33.5792 22.1313 33.6499 22.225 33.8154C22.7718 34.7822 23.3227 35.7466 23.877 36.7093C24.002 36.926 23.9661 37.0462 23.7052 37.0783C23.6195 37.0887 23.5333 37.1065 23.4517 37.1335C23.1069 37.249 22.817 37.2462 22.6978 36.8214C22.6862 36.7795 22.6335 36.7128 22.6087 36.7168C22.2997 36.7634 21.9837 36.795 21.6904 36.8921C21.6024 36.9214 21.5365 37.1427 21.5359 37.2766C21.5353 37.5111 21.445 37.5669 21.2217 37.6089C20.6656 37.714 20.1165 37.8589 19.5703 38.0083C19.41 38.052 19.3261 38.0129 19.2283 37.8968C18.9691 37.5882 18.707 37.2807 18.4258 36.9927C18.3349 36.8996 18.1798 36.8691 18.0543 36.8099C18.0282 36.8415 18.0028 36.8737 17.9767 36.9053H17.9779ZM17.5688 35.4201C17.6325 35.6633 17.6556 35.8058 17.71 35.9351C17.7366 35.9978 17.8413 36.0897 17.8766 36.0771C18.0774 36.0035 18.2915 35.9323 18.4541 35.8024C18.6057 35.6811 18.5137 35.4483 18.31 35.4265C18.078 35.4012 17.8413 35.4207 17.5682 35.4207L17.5688 35.4201ZM22.1996 35.8593C22.0352 35.5334 21.8923 35.2506 21.75 34.9672C21.7245 34.973 21.6991 34.9787 21.6736 34.9845V35.9685C21.8316 35.9357 21.9866 35.903 22.1996 35.8587V35.8593Z" fill="white"/>\n<path d="M53.3735 40.7684C53.3017 40.8908 53.2624 40.9661 53.2161 41.0368C51.9258 43.0117 50.6349 44.9866 49.3428 46.9603C49.1368 47.2753 49.0847 47.2678 48.8463 46.9954C48.5125 46.6132 48.1676 46.239 47.8141 45.8746C47.6821 45.739 47.6393 45.6332 47.7348 45.4522C48.6288 43.7566 49.5164 42.0582 50.3988 40.3563C50.5 40.1609 50.6094 40.1074 50.8316 40.1637C51.6602 40.3741 52.4951 40.5615 53.3735 40.7678V40.7684Z" fill="white"/>\n<path d="M16.6129 40.7701C17.5254 40.554 18.4032 40.3385 19.2867 40.1488C19.3625 40.1327 19.513 40.2655 19.5645 40.3632C20.3763 41.8972 21.1771 43.437 21.9802 44.9751C22.0381 45.0855 22.0809 45.2073 22.1556 45.305C22.3517 45.5631 22.2944 45.7597 22.0711 45.9781C21.7146 46.3264 21.3842 46.7017 21.0492 47.0713C20.9179 47.2161 20.816 47.2563 20.691 47.0649C19.3544 45.0153 18.0143 42.968 16.6765 40.919C16.6563 40.8885 16.647 40.8512 16.6123 40.7701H16.6129Z" fill="white"/>\n<path d="M51.785 51.2945C51.4627 50.7318 51.1479 50.207 50.8673 49.665C50.8239 49.5811 50.9084 49.3937 50.9853 49.2931C51.947 48.0344 52.9168 46.782 53.8871 45.5296C54.7632 44.3984 55.6421 43.2696 56.5205 42.1408C56.5708 42.0764 56.6281 42.0178 56.7224 41.9775C56.4759 42.9196 56.23 43.8616 55.9841 44.8037C55.7521 45.6928 55.5229 46.5826 55.2845 47.47C55.251 47.5953 55.1989 47.7321 55.1127 47.824C54.059 48.9431 52.9972 50.0547 51.9366 51.168C51.9048 51.2019 51.8648 51.2284 51.785 51.2945Z" fill="white"/>\n<path d="M13.2656 41.9111C13.5711 42.3014 13.8407 42.6428 14.1075 42.9865C15.7352 45.0861 17.36 47.1881 18.9923 49.2842C19.1404 49.4745 19.1792 49.6182 19.0328 49.8377C18.7782 50.2199 18.5589 50.6257 18.3378 51.0286C18.2233 51.2367 18.1209 51.2643 17.9496 51.0832C16.9214 49.9952 15.8868 48.9129 14.858 47.8243C14.7885 47.7507 14.7295 47.6525 14.7041 47.5559C14.2209 45.7253 13.7441 43.8929 13.2662 42.0611C13.2598 42.0359 13.2656 42.0071 13.2656 41.9111Z" fill="white"/>\n<path d="M34.1085 18.8182C34.1953 18.8993 34.3203 19.0165 34.4696 19.1562C34.6785 18.9602 34.8845 18.7671 35.1159 18.5498C35.3034 18.7659 35.4845 18.9746 35.6789 19.1987C35.8745 19.0251 36.0145 18.901 36.1904 18.7458C36.4855 19.2757 36.9843 19.1625 37.4449 19.1654C38.2341 19.17 39.0234 19.1665 39.852 19.1665C39.852 19.6551 39.8566 20.1293 39.845 20.6029C39.8439 20.6488 39.7507 20.7161 39.6888 20.7316C39.5979 20.7546 39.4978 20.7425 39.4012 20.7425C36.5011 20.7425 33.6005 20.7425 30.7004 20.7425C30.2959 20.7425 30.2954 20.7414 30.2942 20.3293C30.2936 19.9499 30.2942 19.57 30.2942 19.1596C30.5644 19.1596 30.793 19.1596 31.0221 19.1596C31.8316 19.1608 32.6417 19.1826 33.4495 19.1481C33.6554 19.1395 33.8539 18.9516 34.1079 18.8188L34.1085 18.8182ZM37.1318 20.2281C36.9716 20.2069 36.8715 20.2097 36.7847 20.1781C36.6747 20.1379 36.5752 20.0701 36.4572 20.0063C36.4462 20.0643 36.4329 20.1339 36.4172 20.2137C36.3952 20.1339 36.3756 20.0643 36.3374 19.9246C36.2853 20.0672 36.2587 20.1385 36.2535 20.1522C36.0081 20.2413 35.8016 20.3166 35.562 20.404C35.5713 20.4241 35.5898 20.5345 35.6384 20.55C35.7177 20.5753 35.8201 20.55 35.9069 20.5258C36.0365 20.4891 36.1592 20.404 36.2888 20.3948C36.504 20.3793 36.7222 20.4069 36.9392 20.4172C37.1411 20.427 37.1532 20.3178 37.1318 20.2281ZM37.457 20.4362C37.4889 20.5839 37.615 20.6351 37.7955 20.5345C37.9113 20.4695 38.0443 20.4069 38.1728 20.3982C38.4083 20.3827 38.6461 20.4132 38.8828 20.4126C38.951 20.4126 39.0228 20.3799 39.0841 20.3465C39.0969 20.3396 39.083 20.2321 39.0604 20.2235C38.9939 20.1982 38.9169 20.1988 38.8365 20.1885C38.8249 20.1408 38.8064 20.066 38.7884 19.9919C38.8041 20.0189 38.8191 20.0459 38.8347 20.0735C38.7219 20.1275 38.6085 20.1816 38.4986 20.2339C38.4754 20.2028 38.4372 20.1522 38.3921 20.0925C38.2486 20.4655 38.1271 20.0999 38.0594 20.1034C37.8412 20.2241 37.6688 20.3195 37.4576 20.4362H37.457ZM35.3954 20.3132C35.3954 20.2821 35.3948 20.2511 35.3942 20.2201C35.3121 20.1873 35.2299 20.127 35.1477 20.1275C35.0314 20.1287 34.9163 20.1931 34.7994 20.1971C34.388 20.2097 34.3874 20.204 34.307 20.5396C34.3052 20.5477 34.3313 20.5626 34.3417 20.5713C34.6952 20.4845 35.0447 20.3988 35.3948 20.3132H35.3954ZM32.6822 20.4103C33.0363 20.3701 33.2255 20.3118 33.2498 20.2356H32.9281C32.9183 20.1568 32.909 20.0862 32.909 20.085C32.7661 20.0517 32.6764 20.031 32.589 20.0109C32.6191 20.1396 32.6498 20.2712 32.6822 20.4103ZM31.882 20.4143C31.9016 20.5724 32.0289 20.6454 32.2054 20.5425C32.2754 20.5017 32.3391 20.4454 32.4137 20.4178C32.5989 20.3494 32.6012 20.3511 32.449 20.1798C32.2685 20.2546 32.0937 20.3264 31.882 20.4138V20.4143ZM33.6063 20.3138C33.5889 20.3207 33.571 20.3276 33.5536 20.3344C33.5808 20.4074 33.5883 20.5138 33.6404 20.5448C33.7006 20.5799 33.8522 20.577 33.873 20.5402C33.9332 20.4339 33.9471 20.3017 33.9789 20.1798C33.9419 20.1655 33.9054 20.1517 33.8684 20.1373C33.8169 20.2235 33.7654 20.3097 33.7093 20.4034C33.6844 20.3816 33.645 20.3477 33.6063 20.3138ZM39.1252 20.5787C39.5655 20.4758 39.6593 20.3005 39.4689 20.008C39.3607 20.1873 39.2531 20.3661 39.1252 20.5787ZM34.7109 19.3119C34.756 19.4832 34.7924 19.6194 34.8318 19.7695C34.9255 19.6056 35.0019 19.4723 35.0939 19.3119H34.7109Z" fill="white"/>\n<path d="M56.4179 31.0979C56.1691 31.0686 55.9885 31.0468 55.7785 31.0221C55.6176 31.3853 55.3584 31.7221 54.8816 31.7601C54.2781 31.8078 53.7388 31.6227 53.302 31.1991C53.0757 30.9801 53.0098 30.6743 53.1128 30.3996C53.2308 30.0846 53.4299 29.7967 53.6173 29.5116C53.6567 29.4524 53.7973 29.4587 53.8916 29.4352C53.8991 29.5248 53.9101 29.6145 53.9124 29.7047C53.913 29.7306 53.8899 29.7564 53.8783 29.7829C53.6735 30.2381 53.7244 30.4111 54.1896 30.5991C54.4621 30.7094 54.7578 30.7818 55.0494 30.8186C55.3752 30.8594 55.4724 30.6985 55.3393 30.4036C55.3 30.3168 55.234 30.2398 55.2062 30.1502C55.1871 30.0898 55.1877 29.9938 55.2242 29.9519C55.3301 29.8289 55.4568 29.7231 55.5777 29.6133C55.6327 29.5639 55.6929 29.5202 55.7704 29.4581C55.8711 29.6185 55.9515 29.7691 56.0534 29.9036C56.2512 30.164 56.4109 30.1594 56.6256 29.9214C56.6812 29.8599 56.7789 29.8363 56.8571 29.7955C56.8866 29.8846 56.9161 29.9737 56.945 30.0628C56.9774 30.1628 57.0092 30.2628 57.0416 30.3628C57.1406 30.3117 57.2401 30.2617 57.3379 30.2082C57.4235 30.1611 57.5063 30.1094 57.5908 30.0599C57.6209 30.1444 57.6781 30.2301 57.6747 30.3128C57.6683 30.4709 57.677 30.587 57.8627 30.6433C58.049 30.6996 58.2244 30.8008 58.3933 30.6174C58.3997 30.6105 58.4049 30.6014 58.413 30.5968C58.5195 30.5301 58.6259 30.4634 58.733 30.3967C58.7642 30.5157 58.785 30.6387 58.8302 30.7519C58.8759 30.8663 58.9187 31.0129 59.0107 31.0721C59.3394 31.2847 59.4649 31.229 59.6009 30.8514C59.7433 30.4554 59.8758 30.0559 60.0268 29.6633C60.0598 29.5777 60.1396 29.4668 60.2177 29.4484C60.4758 29.3869 60.7425 29.3622 61.0666 29.3145C60.8918 29.7335 60.7385 30.1002 60.5857 30.4669C60.4827 30.714 60.3844 30.9635 60.2767 31.2089C60.179 31.433 60.2073 31.5951 60.4648 31.679C60.6152 31.7285 60.7599 31.7946 60.9948 31.8888C60.9098 31.6555 60.8398 31.5129 60.8097 31.3629C60.7935 31.2824 60.816 31.1497 60.8722 31.1083C61.0631 30.9669 61.2772 30.856 61.5058 30.7192C61.6776 31.0117 61.6597 31.3095 61.5891 31.5882C61.5243 31.8434 61.4004 32.0877 61.2778 32.3239C61.1285 32.6125 60.8994 32.8349 60.5481 32.7883C60.1587 32.7372 59.7566 32.6659 59.5668 32.2417C59.5512 32.2072 59.5309 32.1745 59.5384 32.1889C59.2647 32.1756 59.0067 32.2136 58.7885 32.1383C58.5808 32.0664 58.4142 31.8762 58.1879 31.7072C57.7453 31.8262 57.383 31.7049 57.0903 31.2922C56.6331 31.356 56.6117 31.3491 56.4167 31.0968L56.4179 31.0979Z" fill="white"/>\n<path d="M24.5 43.844C23.8288 42.3272 23.1761 40.8506 22.5049 39.3338C22.6594 39.297 22.7739 39.2654 22.8902 39.2436C23.6089 39.1085 24.3293 38.9844 25.0451 38.8372C25.2372 38.7981 25.3066 38.8631 25.3564 39.0257C25.6983 40.1517 26.0461 41.276 26.3834 42.4031C26.4083 42.4858 26.3956 42.641 26.3429 42.6761C25.751 43.0658 25.1469 43.4382 24.5 43.8446V43.844Z" fill="white"/>\n<path d="M47.4587 39.3325C47.266 39.7716 47.0872 40.182 46.9067 40.5912C46.4779 41.5625 46.0498 42.5339 45.6187 43.5041C45.4775 43.8214 45.4439 43.8271 45.1587 43.6478C44.6871 43.3512 44.2184 43.0506 43.7399 42.7655C43.5692 42.6638 43.5264 42.558 43.586 42.3689C43.932 41.2654 44.2711 40.1595 44.6043 39.0525C44.6611 38.8652 44.7288 38.7905 44.9481 38.8364C45.691 38.9916 46.4398 39.1204 47.1856 39.2606C47.2672 39.2761 47.3465 39.3026 47.4593 39.3325H47.4587Z" fill="white"/>\n<path d="M44.9289 27.9449C44.4602 28.2725 44.2183 28.2334 43.7947 27.7581C43.4528 28.1449 43.0616 27.9776 42.6896 27.8259C42.3725 27.696 42.277 27.4011 42.2926 27.0896C42.3262 26.4304 42.3812 25.7723 42.4338 25.1142C42.439 25.0458 42.4708 24.948 42.5218 24.9199C42.7874 24.7722 43.0628 24.6417 43.4146 24.4658C43.3533 24.9647 43.3018 25.3843 43.2508 25.8039C43.2184 26.0694 43.1854 26.335 43.1565 26.6011C43.1357 26.7873 43.2202 26.8816 43.4111 26.908C43.5807 26.9316 43.6738 26.8931 43.7369 26.7189C43.8729 26.3419 44.0829 26.1913 44.4081 26.1941C44.7558 26.197 44.9451 26.3579 45.1129 26.7275C45.1944 26.9068 45.2992 27.1281 45.4566 27.2086C45.6967 27.3316 45.9629 27.2942 46.0965 26.9764C46.1249 26.9091 46.2342 26.8574 46.3152 26.8396C46.3459 26.8327 46.4443 26.9448 46.4408 26.9982C46.4125 27.4011 46.6694 27.4782 46.9222 27.4874C47.1757 27.0701 47.4094 26.6718 47.6623 26.2867C47.6993 26.2303 47.8718 26.1872 47.9134 26.2212C48.3775 26.5965 48.834 26.9833 49.014 27.5868C49.143 28.019 49.0174 28.3794 48.7015 28.6829C48.444 28.9306 48.2108 28.9375 47.9175 28.6651C47.7421 28.5024 47.6079 28.4897 47.3701 28.5495C46.8997 28.6679 46.4356 28.6001 46.0959 28.1868C45.5572 28.4403 45.25 28.3811 44.9294 27.946L44.9289 27.9449ZM44.9051 27.1712C44.7778 27.0069 44.6766 26.8758 44.5747 26.7442C44.5261 26.8344 44.4226 26.9385 44.4411 27.012C44.4781 27.1615 44.5811 27.2948 44.6575 27.4345C44.7252 27.3626 44.7923 27.2914 44.9051 27.1712ZM47.9672 27.5385C47.969 27.5086 47.9713 27.4782 47.973 27.4483C47.881 27.4011 47.7925 27.3293 47.6964 27.3167C47.6362 27.3086 47.5645 27.3914 47.498 27.4333C47.5882 27.5035 47.6698 27.5925 47.7716 27.6339C47.8162 27.6523 47.9007 27.573 47.9672 27.5385ZM48.4515 28.269C48.6049 28.0357 48.4758 27.9115 48.3329 27.7747C48.2629 27.8725 48.2045 27.9529 48.135 28.0489C48.2455 28.1259 48.3428 28.1937 48.451 28.269H48.4515Z" fill="white"/>\n<path d="M42.2978 32.856C43.0263 32.8249 43.6044 33.0847 43.9313 33.7538C44.2756 34.4596 44.0395 35.6476 43.5193 36.2356C42.8533 36.988 40.9762 36.8311 40.6007 35.5838C40.4098 34.9498 40.4456 34.3372 40.7332 33.744C41.0462 33.098 41.5155 32.8387 42.2978 32.856ZM42.9794 34.6113C42.9574 34.467 42.9453 34.3923 42.9343 34.317C42.8909 34.0107 42.7063 33.8572 42.4072 33.798C42.0889 33.7348 41.9038 33.9026 41.7932 34.1492C41.6237 34.528 41.5253 34.9286 41.6642 35.3418C41.7481 35.5913 41.9344 35.72 42.2052 35.7396C42.4795 35.7597 42.6872 35.6626 42.7734 35.4039C42.866 35.1257 42.9227 34.836 42.98 34.6113H42.9794Z" fill="white"/>\n<path d="M55.3509 38.3603C54.962 38.2286 54.6102 38.1275 54.2735 37.9901C54.0067 37.8809 53.8887 37.9671 53.821 38.2206C53.7753 38.3913 53.8158 38.4856 53.9894 38.5453C54.3701 38.677 54.7433 38.831 55.1252 38.9603C55.3433 39.0339 55.4081 39.1305 55.3115 39.3592C55.0789 39.9098 55.0887 39.9162 54.5281 39.7219C53.9298 39.515 53.3349 39.2966 52.7337 39.0971C52.482 39.0138 52.4045 38.8925 52.4936 38.6287C52.8182 37.6711 53.1341 36.7101 53.431 35.7434C53.5143 35.4732 53.6659 35.4462 53.8829 35.5221C54.6253 35.7819 55.3642 36.052 56.1077 36.3101C56.3287 36.3871 56.36 36.5118 56.2582 36.7021C56.213 36.786 56.1719 36.8728 56.1378 36.9619C56.0782 37.1182 55.981 37.1561 55.8207 37.1015C55.4215 36.9659 55.0158 36.8481 54.6172 36.7095C54.4563 36.6538 54.3493 36.6463 54.2868 36.8371C54.2272 37.0182 54.2665 37.1113 54.4586 37.1728C54.8324 37.2929 55.2016 37.4309 55.5644 37.5809C55.6251 37.6062 55.687 37.7332 55.6766 37.8027C55.6552 37.9413 55.5962 38.0786 55.5279 38.2034C55.4903 38.2729 55.4035 38.316 55.3514 38.3603H55.3509Z" fill="white"/>\n<path d="M21.894 29.2417C21.6886 29.2842 21.4849 29.3371 21.2778 29.3652C21.0822 29.3917 20.8571 29.452 20.7391 29.2181C20.6199 28.9824 20.6801 28.741 20.8762 28.5962C21.1418 28.3996 21.4352 28.2238 21.7418 28.1025C22.0786 27.9697 22.4449 27.9117 22.7973 27.8174C22.9049 27.7887 23.009 27.7473 23.1983 27.6841C22.9408 27.5254 22.7521 27.4059 22.56 27.2909C22.2568 27.1087 22.2481 26.5937 22.5519 26.4259C23.0391 26.1575 23.5298 25.8954 24.0807 25.5977C24.1102 25.8707 24.1449 26.0994 24.1512 26.3282C24.1524 26.3742 24.0529 26.4351 23.9887 26.469C23.7682 26.5845 23.5425 26.6914 23.3765 26.7731C23.5211 27.1127 23.7115 27.4243 23.7844 27.7616C23.8943 28.2715 23.605 28.6841 23.1045 28.8416C22.8129 28.9336 22.545 28.9876 22.2314 28.8066C21.9114 28.6221 21.5468 28.7468 21.2228 28.9514C21.2986 28.9468 21.375 28.9468 21.4496 28.9365C21.5353 28.925 21.6186 28.9003 21.7042 28.887C22.2337 28.8054 22.5392 29.1365 22.3436 29.6342C22.2562 29.8561 22.0653 30.1073 21.857 30.1981C21.4057 30.3941 20.9208 30.5636 20.4353 30.6177C19.6993 30.6998 19.2248 30.1119 19.274 29.2819C19.2827 29.1405 19.3012 28.9928 19.3527 28.8629C19.3799 28.7939 19.4846 28.7232 19.5604 28.7163C19.6108 28.7117 19.686 28.8112 19.7224 28.879C19.7572 28.9434 19.7577 29.0267 19.7716 29.1014C19.8486 29.5176 19.9874 29.6681 20.3919 29.6733C20.926 29.6796 21.4242 29.5101 21.912 29.3152C21.9062 29.2905 21.9004 29.2658 21.894 29.2411V29.2417Z" fill="white"/>\n<path d="M41.6471 38.2507C41.4753 39.0462 41.3139 39.8009 41.1484 40.555C41.0992 40.7791 41.035 40.9998 40.9823 41.2234C40.943 41.3907 40.8556 41.4321 40.6872 41.3803C40.0987 41.2004 39.508 41.024 38.9137 40.8636C38.699 40.8056 38.6435 40.6964 38.6695 40.49C38.765 39.7411 38.8448 38.9905 38.9444 38.2421C38.9559 38.1565 39.0595 38.0088 39.1104 38.0128C39.9408 38.0789 40.7699 38.1645 41.6471 38.2507Z" fill="white"/>\n<path d="M52.3671 37.6377C51.9459 38.4027 51.4113 38.6642 50.5092 38.4717C49.6597 38.2901 49.209 37.6946 49.2194 36.8767C49.2264 36.3347 49.3137 35.8099 49.6216 35.3455C50.0497 34.6995 50.7863 34.4794 51.6138 34.7449C52.4007 34.9978 52.7884 35.5392 52.7467 36.3836C52.4366 36.3445 52.1253 36.3175 51.8209 36.2577C51.759 36.2456 51.7064 36.118 51.674 36.0347C51.5825 35.7956 51.4176 35.6657 51.1613 35.6364C50.8911 35.6053 50.6874 35.7272 50.6093 35.9588C50.4889 36.314 50.4021 36.6847 50.3437 37.0555C50.3101 37.2704 50.4554 37.4279 50.6625 37.5176C50.8749 37.6095 51.0508 37.5636 51.218 37.4135C51.5941 37.0762 51.597 37.0779 52.0107 37.3681C52.1276 37.4503 52.2387 37.54 52.3671 37.6371V37.6377Z" fill="white"/>\n<path d="M27.9278 38.4549C28.4631 38.3957 28.9289 38.3422 29.3946 38.2928C29.7297 38.2577 30.0664 38.2359 30.4003 38.1928C30.5583 38.1726 30.626 38.2054 30.6433 38.3755C30.7238 39.1457 30.8215 39.9142 30.8962 40.6844C30.9037 40.7602 30.8123 40.8959 30.7382 40.9206C30.137 41.1252 29.5289 41.3097 28.9231 41.5011C28.7726 41.5482 28.6337 41.5735 28.5869 41.366C28.3722 40.416 28.1564 39.4659 27.9272 38.4543L27.9278 38.4549Z" fill="white"/>\n<path d="M37.348 32.4004C38.1025 32.4809 38.8211 32.5274 39.5282 32.6435C39.9923 32.7194 40.2168 33.0642 40.211 33.5378C40.2087 33.7379 40.1983 33.9402 40.1612 34.1362C40.0779 34.5782 39.729 34.8679 39.2736 34.8931C39.052 34.9052 38.8304 34.9248 38.6094 34.9167C38.3773 34.9087 38.3102 35.0213 38.3021 35.2282C38.29 35.534 38.2605 35.8392 38.2373 36.1444C38.2361 36.1617 38.2223 36.1777 38.2182 36.1869H37.1396C37.2091 34.9225 37.2768 33.6971 37.348 32.401V32.4004ZM38.4439 34.0592C38.6904 34.0988 38.9317 34.135 39.0769 33.9028C39.1313 33.8166 39.1452 33.6511 39.0971 33.566C38.9612 33.3235 38.7187 33.3137 38.4433 33.3654V34.0592H38.4439Z" fill="white"/>\n<path d="M33.8092 36.1226C32.6826 36.1801 31.9802 35.5473 31.9252 34.5133C31.9078 34.1914 31.9275 33.8626 31.9732 33.5431C32.0687 32.8769 32.6427 32.3786 33.3208 32.3447C33.4939 32.3361 33.6674 32.3343 33.8405 32.3372C34.5134 32.3487 34.8831 32.6143 35.1325 33.2356C35.2095 33.4264 35.1678 33.5253 34.9699 33.5672C34.801 33.6034 34.6343 33.6621 34.4642 33.6724C34.3699 33.6781 34.2281 33.6327 34.1807 33.562C34.0111 33.3109 33.793 33.1758 33.4979 33.2568C33.2034 33.3373 33.0691 33.5948 33.0489 33.8667C33.0263 34.1673 33.0518 34.4782 33.1056 34.7759C33.1467 35.0041 33.2763 35.2007 33.5604 35.2197C33.8532 35.2392 34.0869 35.1472 34.1668 34.8535C34.2466 34.5575 34.404 34.5277 34.6482 34.6484C34.7078 34.6777 34.7749 34.692 34.8386 34.7133C35.2483 34.8512 35.2726 34.9087 35.0909 35.2978C34.8143 35.8921 34.3716 36.2094 33.8092 36.1226Z" fill="white"/>\n<path d="M25.9797 25.624C26.214 26.028 26.4131 26.3757 26.6168 26.7212C26.7186 26.8942 26.8112 27.0856 27.0698 27.0476C27.3401 27.0086 27.5854 26.9505 27.5952 26.5988C27.597 26.5321 27.6757 26.4441 27.7416 26.4125C27.7792 26.3941 27.906 26.4579 27.9193 26.5051C28.0223 26.8712 28.2653 26.9172 28.5905 26.8356C28.7345 26.7993 28.8879 26.7988 29.0366 26.7815C29.047 26.7568 29.0568 26.7321 29.0673 26.708C28.9076 26.5677 28.7473 26.4269 28.5644 26.266C28.7062 26.0131 28.8485 25.759 29.0279 25.4395C29.1824 25.6527 29.3583 25.8021 29.4098 25.9866C29.5111 26.3487 29.6083 26.7338 29.5892 27.1034C29.5545 27.7627 28.6859 28.1615 28.1038 27.8265C28.0628 27.8029 28.0246 27.7736 27.9864 27.7477C27.4639 28.2426 26.9964 28.2403 26.3581 27.7351C26.2875 27.8592 26.2279 27.988 26.1469 28.1023C25.9357 28.3995 25.6273 28.4966 25.283 28.4432C24.9532 28.392 24.8016 28.138 24.7484 27.8397C24.7137 27.6465 24.7195 27.4431 24.7345 27.2459C24.7391 27.181 24.819 27.0936 24.8844 27.0701C24.9289 27.054 25.0244 27.116 25.0684 27.1672C25.349 27.4931 25.6672 27.5017 26.0185 27.1672C25.8761 26.9482 25.7402 26.7183 25.5822 26.5039C25.4769 26.3614 25.4861 26.2545 25.5984 26.1251C25.7222 25.9826 25.8281 25.8245 25.9797 25.624Z" fill="white"/>\n<path d="M34.5099 37.7161C34.8466 37.7161 35.184 37.7241 35.5207 37.7132C35.7192 37.7069 35.7933 37.769 35.7846 37.9753C35.7556 38.6823 35.736 39.3898 35.7279 40.0973C35.7256 40.314 35.6613 40.4048 35.431 40.4071C34.8449 40.4129 34.2587 40.4405 33.6726 40.4589C33.4984 40.464 33.3462 40.4554 33.3353 40.2163C33.3011 39.4812 33.26 38.7466 33.2114 38.0127C33.197 37.7931 33.26 37.6994 33.4984 37.7121C33.8346 37.7299 34.1725 37.7167 34.5093 37.7167L34.5099 37.7161Z" fill="white"/>\n<path d="M12.8318 30.3102C12.8318 30.4838 12.8457 30.6936 12.8243 30.8994C12.8167 30.973 12.7294 31.0448 12.6663 31.1051C12.4563 31.3069 12.1756 31.4672 12.0402 31.7086C11.6421 32.4162 10.9756 32.676 10.2581 32.8616C9.93287 32.9455 9.6586 32.7904 9.50873 32.5013C9.18354 31.873 8.8815 31.2322 8.57483 30.5948C8.55284 30.5488 8.54185 30.4718 8.56557 30.4338C8.73221 30.17 8.9087 29.9131 9.11758 29.6016C9.209 29.8068 9.2767 29.9504 9.33746 30.0964C9.53246 30.5643 9.72745 31.0322 9.91666 31.5023C10.0087 31.7316 10.1499 31.8121 10.3882 31.7046C10.784 31.5264 11.1827 31.3552 11.5623 31.135C11.2116 31.0977 10.8552 30.9758 10.6047 31.3546C10.4993 31.5144 10.3773 31.4741 10.3194 31.2919C10.1475 30.7499 10.6492 30.1263 11.2209 30.1729C11.744 30.2154 12.267 30.262 12.8318 30.3097V30.3102Z" fill="white"/>\n<path d="M41.3127 26.6436C41.2311 26.5195 41.1889 26.4459 41.1374 26.3787C40.9723 26.163 40.9816 25.9509 41.1652 25.7424C41.2653 25.6292 41.3683 25.5183 41.5459 25.3223C41.6564 25.6602 41.797 25.9183 41.8138 26.1844C41.8341 26.5011 41.7889 26.8368 41.6998 27.1431C41.5257 27.7426 40.7289 27.9099 40.2868 27.4638C39.9767 27.1512 39.5919 27.1667 39.1915 27.2598C39.383 27.2868 39.5751 27.3092 39.7655 27.3426C40.1456 27.4087 40.2839 27.6368 40.1803 28.0058C40.0629 28.4248 39.7389 28.6151 39.3506 28.6571C38.9525 28.7002 38.5376 28.7145 38.1447 28.6507C37.3133 28.5151 36.9846 27.9576 37.2097 27.1385C37.2594 26.9569 37.3445 26.7804 37.4423 26.6189C37.4793 26.558 37.6147 26.5017 37.6755 26.5235C37.7356 26.5454 37.7605 26.6684 37.7976 26.7483C37.8045 26.7632 37.7929 26.7856 37.7918 26.8046C37.7466 27.515 37.8687 27.6782 38.5799 27.7823C38.8449 27.8208 39.118 27.807 39.3871 27.8144C39.5184 27.8179 39.6497 27.815 39.7811 27.815L39.7857 27.7363C39.556 27.7081 39.3188 27.707 39.0995 27.6437C38.9427 27.5989 38.7147 27.4909 38.6904 27.3759C38.6597 27.227 38.7535 26.9632 38.8773 26.8914C39.1336 26.7431 39.4397 26.6373 39.7348 26.6097C40.1231 26.573 40.5206 26.6293 40.9135 26.6431C41.0257 26.6471 41.1386 26.6436 41.3133 26.6436H41.3127Z" fill="white"/>\n<path d="M27.2932 36.5156C27.1358 35.2615 26.9842 34.0591 26.8257 32.7934C27.7283 32.7095 28.6212 32.6273 29.4874 32.5469C29.5302 32.5963 29.5504 32.6089 29.5528 32.6245C29.7003 33.5694 29.6835 33.4119 28.9186 33.4619C28.7942 33.4699 28.6709 33.4993 28.5459 33.5085C28.0761 33.5447 28.0761 33.5435 28.1438 34.0528C28.3266 34.0528 28.5141 34.0568 28.7016 34.051C28.8069 34.0476 28.9134 34.0114 29.0169 34.0206C29.1541 34.0326 29.385 34.0447 29.4058 34.1108C29.4677 34.3022 29.4584 34.5218 29.4434 34.7275C29.4405 34.7672 29.2889 34.8155 29.2015 34.8264C28.9539 34.858 28.7039 34.877 28.4539 34.8925C28.2804 34.9034 28.2248 34.9776 28.2474 35.1523C28.289 35.4747 28.3041 35.8 28.3376 36.1231C28.3585 36.326 28.278 36.4294 28.0709 36.4438C27.8238 36.4616 27.5773 36.4886 27.2926 36.5151L27.2932 36.5156Z" fill="white"/>\n<path d="M25.0174 34.486C25.3449 34.4458 25.6504 34.4171 25.9524 34.3682C26.1891 34.3297 26.3494 34.3527 26.3401 34.6498C26.3355 34.7895 26.3737 34.9303 26.3985 35.1137C25.9837 35.1821 25.5914 35.2464 25.1458 35.32C25.1967 35.7149 25.2251 36.112 25.3055 36.4983C25.353 36.7242 25.2639 36.7989 25.081 36.8357C24.9115 36.8696 24.7333 36.8713 24.5707 36.9225C24.349 36.992 24.2646 36.8903 24.2304 36.7029C24.0354 35.6425 23.8439 34.5814 23.6489 33.521C23.6194 33.3612 23.6599 33.2693 23.8393 33.244C24.5903 33.1394 25.3408 33.0284 26.0913 32.9175C26.2927 32.8876 26.3598 32.9836 26.3818 33.1681C26.45 33.74 26.4541 33.7365 25.8668 33.8072C25.6573 33.8325 25.4496 33.9032 25.2407 33.9021C24.9132 33.9003 24.8987 34.0653 24.9693 34.3067C24.9826 34.3515 24.9942 34.3975 25.0179 34.4855L25.0174 34.486Z" fill="white"/>\n<path d="M15.8072 35.1715C15.9021 35.4617 15.993 35.7008 16.0514 35.9474C16.0636 35.9986 15.9652 36.1095 15.8952 36.1382C15.6394 36.2434 15.3744 36.325 15.0759 36.4285C15.3565 37.2728 15.6342 38.1108 15.9334 39.0103C15.6585 39.1207 15.3467 39.2466 14.9902 39.3903C14.9208 39.2437 14.8421 39.1069 14.7889 38.9615C14.5568 38.3252 14.3248 37.6889 14.109 37.0469C14.0442 36.8544 13.9539 36.805 13.7711 36.8762C13.5842 36.9492 13.3938 37.0136 13.2052 37.0826C13.1693 37.0958 13.1068 37.1285 13.1039 37.1245C12.9876 36.9308 12.8643 36.7394 12.77 36.5348C12.711 36.4066 12.6717 36.2561 12.8765 36.1854C13.8451 35.8526 14.812 35.5158 15.8072 35.1709V35.1715Z" fill="white"/>\n<path d="M45.4753 36.1628C45.9075 36.2559 46.3079 36.3496 46.7118 36.426C46.9589 36.4726 47.1064 36.5588 46.982 36.837C46.9589 36.8887 46.9502 36.9468 46.9357 37.0019C46.8177 37.4434 46.8165 37.4485 46.3721 37.3658C45.7588 37.2508 45.1472 37.1267 44.535 37.0077C44.3157 36.9652 44.2191 36.8876 44.2694 36.6203C44.4546 35.6357 44.5975 34.6431 44.7682 33.6557C44.8498 33.1838 44.8781 33.2309 45.234 33.3142C46.036 33.5022 46.0336 33.2867 45.8537 34.2632C45.7397 34.8805 45.6095 35.4955 45.4758 36.1628H45.4753Z" fill="white"/>\n<path d="M16.5674 30.5762C16.5396 30.9791 16.5339 31.3285 16.4818 31.6711C16.4662 31.7763 16.3429 31.9045 16.2376 31.9493C15.9471 32.0729 15.6428 32.1671 15.3378 32.251C15.2574 32.2735 15.155 32.2177 15.063 32.1976C15.0919 32.1148 15.1018 32.0188 15.1521 31.9522C15.3986 31.6228 15.6584 31.3033 15.9089 30.9768C16.075 30.7607 16.0235 30.6055 15.784 30.471C15.3245 30.2135 15.3292 30.2054 15.4136 29.6726C15.4293 29.5726 15.4437 29.4726 15.4674 29.3134C16.2017 29.8112 16.7879 29.4134 17.3954 29.1582C17.3896 29.1283 17.3844 29.0985 17.3787 29.0686C17.2045 29.1232 17.0326 29.1864 16.8556 29.2301C16.5182 29.3123 16.2955 29.1979 16.2289 28.8639C16.1855 28.6461 16.1821 28.4047 16.2289 28.1892C16.3227 27.761 16.7132 27.6098 17.1009 27.8184C17.6714 28.1254 18.062 29.2008 17.8074 29.7882C17.5881 30.294 17.1096 30.4371 16.6374 30.5831C16.601 30.594 16.5634 30.6003 16.5269 30.6101C16.5188 30.6124 16.5125 30.6216 16.5668 30.5756L16.5674 30.5762ZM17.131 28.5168C16.8035 28.3513 16.7526 28.3645 16.6305 28.63C16.7919 28.5932 16.9215 28.5639 17.131 28.5168Z" fill="white"/>\n<path d="M48.1724 33.9189C48.5121 33.9994 48.7869 34.0483 49.0479 34.1374C49.1144 34.1598 49.1914 34.3219 49.1729 34.3977C48.9131 35.4702 48.6377 36.5393 48.3657 37.6095C48.3229 37.7785 48.2349 37.8199 48.0509 37.7768C47.2304 37.5865 47.2316 37.5951 47.4167 36.7979C47.617 35.9358 47.8073 35.0713 48.011 34.2104C48.0359 34.1057 48.1175 34.0149 48.1724 33.9189Z" fill="white"/>\n<path d="M54.8299 52.0763C54.8299 52.6275 54.7784 53.185 54.8432 53.7288C54.9196 54.3725 54.7165 54.8059 54.1396 55.099C53.9221 55.2093 53.7381 55.3847 53.491 55.5651C53.4117 55.3467 53.3452 55.1726 53.285 54.9961C53.1675 54.6518 53.046 54.3087 52.9424 53.9604C52.9164 53.8724 52.9135 53.7259 52.9667 53.6753C53.5506 53.123 54.1483 52.585 54.742 52.043C54.7715 52.0539 54.8004 52.0648 54.8299 52.0757V52.0763Z" fill="white"/>\n<path d="M15.2279 52.0527C15.446 52.2482 15.6648 52.4424 15.8823 52.6384C16.2168 52.9402 16.5472 53.2465 16.8845 53.5454C17.0297 53.6741 17.083 53.815 17.017 54.0035C16.8695 54.4277 16.7289 54.8547 16.5871 55.2806C16.5171 55.491 16.4077 55.5249 16.226 55.3858C15.9066 55.1409 15.5728 54.9139 15.2562 54.6656C15.1845 54.6093 15.1174 54.4978 15.1162 54.411C15.1052 53.6391 15.1099 52.8666 15.1099 52.0941C15.1492 52.0803 15.1891 52.0665 15.2285 52.0527H15.2279Z" fill="white"/>\n<path d="M31.4162 36.2007H30.3781C30.3556 36.0058 30.3226 35.7926 30.3075 35.5782C30.245 34.6735 30.1959 33.7683 30.1247 32.8648C30.1039 32.5998 30.1681 32.482 30.4568 32.4871C31.3809 32.5044 31.2524 32.3222 31.2999 33.2671C31.3433 34.135 31.3786 35.0029 31.4162 35.8708C31.4208 35.9725 31.4168 36.0742 31.4168 36.2007H31.4162Z" fill="white"/>\n<path d="M13.8463 69.2158C14.5152 69.2538 15.1268 69.294 15.7384 69.3222C16.567 69.3595 16.4715 69.1946 16.766 70.0791C16.7869 70.1423 16.8106 70.2056 16.8291 70.2699C16.9043 70.5315 16.858 70.5953 16.5826 70.6114C15.9305 70.6504 15.2784 70.6832 14.6268 70.7321C14.4087 70.7487 14.2924 70.6843 14.2322 70.4665C14.1217 70.063 13.9869 69.6664 13.8457 69.2158H13.8463Z" fill="white"/>\n<path d="M56.1222 69.2213C55.9643 69.7185 55.8306 70.1656 55.6721 70.6042C55.6489 70.6674 55.5043 70.726 55.4192 70.722C54.7457 70.6933 54.0733 70.6473 53.3998 70.6099C53.162 70.5967 53.0613 70.4938 53.1435 70.2559C53.1464 70.2467 53.1493 70.2375 53.1521 70.2283C53.4015 69.3535 53.4021 69.3581 54.3273 69.3201C54.9025 69.2966 55.4771 69.2569 56.1217 69.2207L56.1222 69.2213Z" fill="white"/>\n<path d="M56.388 66.4826C56.388 66.5867 56.3793 66.674 56.3897 66.7585C56.4117 66.9442 56.3162 67.0195 56.1473 67.039C55.4888 67.1137 54.8303 67.1948 54.1701 67.2568C54.1145 67.262 53.989 67.1379 53.9954 67.0867C54.0399 66.7367 54.0995 66.3866 54.1828 66.0435C54.2037 65.9573 54.3188 65.8538 54.4096 65.8303C54.9588 65.6889 55.5137 65.5716 56.0651 65.44C56.2491 65.3963 56.3359 65.4417 56.3399 65.6423C56.3463 65.9286 56.3712 66.2148 56.3874 66.4832L56.388 66.4826Z" fill="white"/>\n<path d="M16.0111 67.273C15.6119 67.2316 15.2716 67.1966 14.932 67.1604C14.5877 67.1236 14.244 67.0811 13.8997 67.0494C13.6844 67.0293 13.5693 66.9523 13.5861 66.7086C13.6098 66.3655 13.6011 66.02 13.6086 65.6758C13.6133 65.4677 13.7001 65.3872 13.9223 65.443C14.454 65.5757 14.991 65.6861 15.5233 65.8171C15.6153 65.8396 15.7513 65.9068 15.7675 65.9758C15.8624 66.3896 15.9284 66.8103 16.0117 67.2724L16.0111 67.273Z" fill="white"/>\n<path d="M35.4842 27.4934C35.3482 27.4865 35.2846 27.4813 35.2209 27.4796C34.6972 27.4646 34.4785 27.237 34.5422 26.7174C34.574 26.4565 34.6382 26.1846 34.7545 25.9513C34.9744 25.5116 35.5033 25.5064 35.7376 25.9403C35.8522 26.153 35.9129 26.4059 35.9477 26.6479C36.0258 27.1962 35.9615 27.7348 35.7556 28.2532C35.645 28.5308 35.468 28.6894 35.1434 28.6653C34.9137 28.6481 34.6799 28.6848 34.4502 28.6676C34.3414 28.6596 34.2378 28.5814 34.1313 28.5348C34.2002 28.4532 34.2552 28.3521 34.3397 28.2946C34.6255 28.1003 34.9246 27.9256 35.214 27.7359C35.2967 27.6819 35.3627 27.6031 35.4842 27.4928V27.4934Z" fill="white"/>\n<path d="M54.5368 72.7757C54.2035 73.1511 53.9234 73.4775 53.6283 73.789C53.5757 73.8442 53.4541 73.8758 53.3766 73.8603C52.9334 73.7712 52.4948 73.658 52.0521 73.5672C51.8728 73.5304 51.8201 73.4511 51.8959 73.2901C52.0012 73.0643 52.1042 72.8372 52.2234 72.6188C52.2518 72.5665 52.3449 72.5108 52.4016 72.5171C53.089 72.5935 53.7759 72.682 54.5373 72.7763L54.5368 72.7757Z" fill="white"/>\n<path d="M18.1698 73.5082C17.5958 73.6404 17.0745 73.7634 16.5508 73.8766C16.4964 73.8881 16.4096 73.8582 16.3709 73.8169C16.0712 73.4961 15.7795 73.1674 15.4341 72.7846C15.9259 72.7202 16.3483 72.6627 16.7713 72.6104C17.0004 72.5817 17.2342 72.5794 17.4587 72.5311C17.656 72.4886 17.7347 72.565 17.803 72.7311C17.9066 72.9829 18.0344 73.2248 18.1704 73.5082H18.1698Z" fill="white"/>\n<path d="M14.1897 61.524C14.6144 61.7028 15.0079 61.8505 15.3817 62.0384C15.4713 62.0838 15.5315 62.2586 15.5396 62.3787C15.5622 62.7115 15.5506 63.0471 15.5524 63.3811C15.5535 63.5639 15.4725 63.6156 15.2954 63.5604C14.9286 63.4454 14.5565 63.3483 14.192 63.2276C14.1231 63.2052 14.0282 63.104 14.0329 63.0454C14.0716 62.5534 14.1312 62.0631 14.1897 61.5234V61.524Z" fill="white"/>\n<path d="M55.7858 61.5211C55.8362 62.0418 55.8917 62.5051 55.9166 62.9701C55.9212 63.0592 55.8246 63.2074 55.7418 63.2379C55.3999 63.3626 55.0423 63.4465 54.6945 63.5575C54.4926 63.6219 54.4324 63.542 54.4324 63.3552C54.4324 62.9827 54.4208 62.6097 54.4232 62.2372C54.4232 62.1803 54.4544 62.0901 54.4966 62.0711C54.9133 61.8849 55.3357 61.7108 55.7864 61.5205L55.7858 61.5211Z" fill="white"/>\n<path d="M49.5891 29.2173C49.5637 29.0558 49.5197 28.9282 49.5272 28.8035C49.5718 28.0793 49.6267 27.3562 49.6823 26.6326C49.6863 26.5803 49.7049 26.5067 49.7425 26.4826C50.0515 26.282 50.3668 26.0906 50.6943 25.8877C50.8673 26.7964 50.1724 28.9454 49.5891 29.2167V29.2173Z" fill="white"/>\n<path d="M13.2025 28.0781C13.2639 28.135 13.2986 28.1546 13.3154 28.1839C13.787 29.0104 14.1382 29.8835 14.2742 30.8272C14.3008 31.0111 14.1989 31.2135 14.1567 31.4072C14.0236 31.2686 13.8599 31.1485 13.7632 30.9887C13.4334 30.4404 13.1262 29.8794 12.8154 29.3202C12.7767 29.2506 12.7321 29.1483 12.7564 29.0874C12.8895 28.7558 13.044 28.4316 13.2025 28.0787V28.0781Z" fill="white"/>\n<path d="M30.5321 24.2791C30.6056 24.667 30.7161 25.0527 30.7445 25.4441C30.7873 26.0402 30.7896 26.6408 30.7722 27.2385C30.7676 27.3943 30.6258 27.5455 30.5466 27.6989C30.4598 27.5621 30.3371 27.4363 30.2926 27.2874C30.0981 26.6391 29.9246 25.985 29.751 25.3315C29.7313 25.2567 29.7255 25.1475 29.7666 25.0929C29.976 24.8107 30.2029 24.5412 30.4239 24.2676L30.5321 24.2791Z" fill="white"/>\n<path d="M51.9132 28.1475C52.0168 28.3963 52.1551 28.5895 52.1701 28.7912C52.2262 29.5326 52.015 30.1936 51.4179 30.6804C51.3207 30.7598 51.1355 30.7793 51.0024 30.7575C50.7287 30.7132 50.4597 30.6322 50.1958 30.5448C50.1009 30.5132 50.0263 30.4201 49.9424 30.3551C50.0257 30.2908 50.0998 30.2011 50.1941 30.1672C50.5632 30.0338 50.9451 29.9333 51.3108 29.7901C51.6285 29.666 51.643 29.5895 51.4989 29.293C51.3496 28.9853 51.393 28.7023 51.6291 28.444C51.7043 28.3618 51.783 28.2825 51.9132 28.1475Z" fill="white"/>\n<path d="M32.3562 25.9707C32.5483 26.2046 32.7421 26.3581 32.8249 26.557C33.0882 27.1938 33.0876 27.8398 32.7665 28.4675C32.6727 28.6508 32.5425 28.7589 32.3157 28.7583C32.0275 28.7583 31.74 28.8008 31.4518 28.8054C31.3737 28.8066 31.295 28.7365 31.2163 28.6991C31.2614 28.6238 31.2904 28.529 31.3546 28.4773C31.6827 28.2123 32.0218 27.9617 32.3527 27.7002C32.5454 27.5479 32.5622 27.3582 32.3533 27.23C31.9321 26.9714 31.9708 26.6633 32.1959 26.3081C32.2451 26.2305 32.2764 26.1408 32.3556 25.9713L32.3562 25.9707Z" fill="white"/>\n<path d="M39.852 18.2262V18.8361C39.7414 18.8424 39.6396 18.8533 39.5383 18.8533C38.6912 18.8545 37.8441 18.8424 36.9982 18.8608C36.71 18.8671 36.5277 18.755 36.3813 18.5395C36.5347 18.29 36.7372 18.1946 37.0317 18.2015C37.8684 18.2205 38.7063 18.2073 39.5435 18.209C39.6448 18.209 39.7461 18.2205 39.8525 18.2268L39.852 18.2262Z" fill="white"/>\n<path d="M30.3125 18.8546V18.208H30.9559C31.6775 18.208 32.3996 18.2212 33.1212 18.2016C33.4139 18.1936 33.6194 18.2867 33.7773 18.5379C33.6338 18.7528 33.4539 18.8667 33.1669 18.8609C32.3302 18.8437 31.4923 18.8546 30.655 18.8546H30.3125Z" fill="white"/>\n<path d="M14.7931 57.3154C15.1889 57.5695 15.5146 57.7683 15.8254 57.9879C15.8803 58.027 15.9006 58.1563 15.8902 58.2391C15.8439 58.6178 15.7785 58.9943 15.7253 59.3725C15.6958 59.5817 15.6072 59.6725 15.3966 59.5582C15.3879 59.5536 15.3798 59.549 15.3711 59.5449C14.5107 59.0926 14.5958 59.3576 14.6942 58.3937C14.7277 58.0649 14.7543 57.7362 14.7931 57.3154Z" fill="white"/>\n<path d="M55.1708 57.3267C55.231 57.9285 55.2889 58.4688 55.3352 59.0102C55.3404 59.0735 55.3004 59.1746 55.2495 59.2034C54.9996 59.347 54.7432 59.4815 54.4788 59.5942C54.4354 59.6126 54.2844 59.5155 54.2734 59.4551C54.1941 59.0321 54.1322 58.6056 54.0824 58.178C54.0738 58.1038 54.1299 57.9889 54.193 57.9463C54.4933 57.7417 54.8057 57.5549 55.1714 57.3262L55.1708 57.3267Z" fill="white"/>\n<path d="M57.7187 32.0957C57.7974 32.2325 57.8535 32.3302 57.9079 32.4239C58.3245 32.3101 58.3361 32.317 58.446 32.767C58.3216 32.8205 58.1926 32.8762 58.0438 32.9406C57.9773 32.8268 57.916 32.7228 57.8564 32.6216C57.5933 32.6921 57.411 32.5854 57.3096 32.3015C57.4357 32.2382 57.5665 32.1727 57.7198 32.0957H57.7187Z" fill="white"/>\n<path d="M60.7682 33.1965C60.8412 33.3718 60.895 33.5006 60.9465 33.6253C60.5819 33.877 60.5466 33.8701 60.3418 33.4914C60.0363 33.65 59.8453 33.5569 59.8164 33.1597C59.931 33.108 60.0635 33.0482 60.2191 32.9775C60.3175 33.2442 60.4442 33.4379 60.7688 33.1965H60.7682Z" fill="white"/>\n<path d="M41.5175 28.1171C41.6234 28.2429 41.709 28.3441 41.8167 28.4723C41.6899 28.5774 41.5771 28.6711 41.4232 28.7987C41.3491 28.6855 41.2861 28.5895 41.2172 28.4843C41.0876 28.5711 40.995 28.6332 40.8764 28.7119C40.774 28.597 40.6756 28.4872 40.561 28.359C40.6889 28.251 40.7965 28.1602 40.9505 28.0303C41.0187 28.1429 41.0789 28.2412 41.1426 28.347C41.2884 28.2579 41.3902 28.1952 41.5175 28.1176V28.1171Z" fill="white"/>\n<path d="M22.3022 26.3448C22.3433 26.2603 22.3618 26.135 22.429 26.0977C22.9468 25.8109 23.474 25.5407 24.0619 25.3057C24.0375 25.3804 24.0364 25.4953 23.9861 25.5235C23.4549 25.8235 22.9156 26.1092 22.3786 26.3994C22.3532 26.3816 22.3277 26.3632 22.3022 26.3454V26.3448Z" fill="white"/>\n<path d="M16.0278 27.3167C16.224 26.7816 16.3189 26.7552 16.7586 27.0949C16.5521 27.611 16.5197 27.6214 16.0278 27.3167Z" fill="white"/>\n<path d="M46.364 26.3381C46.2442 26.1818 46.1412 26.0473 46.0405 25.9157C46.4346 25.5041 46.493 25.5122 46.8182 26.0323C46.6741 26.1295 46.5283 26.2278 46.364 26.3381Z" fill="white"/>\n<path d="M28.6726 24.4531C28.8422 24.5727 28.9793 24.6704 29.1136 24.7652C28.8781 25.2658 28.7629 25.2825 28.3394 24.875C28.4406 24.7463 28.5442 24.6152 28.6726 24.4537V24.4531Z" fill="white"/>\n<path d="M11.9897 32.9671C12.102 32.7843 12.1581 32.5871 12.2825 32.5245C12.3728 32.4791 12.6494 32.586 12.6731 32.6711C12.7125 32.8136 12.6164 32.9935 12.5684 33.1958C12.363 33.1148 12.209 33.0538 11.9897 32.9671Z" fill="white"/>\n<path d="M27.5319 25.148C27.7049 25.271 27.8426 25.3687 27.9775 25.4647C27.6986 25.9665 27.6268 25.9768 27.2056 25.5734C27.3045 25.444 27.4058 25.3118 27.5319 25.1475V25.148Z" fill="white"/>\n<path d="M31.6187 9.08713C31.7842 9.1584 31.8913 9.20438 31.9977 9.25094C32.0087 9.23312 32.0197 9.21588 32.0307 9.19806C32.0006 9.15955 31.9705 9.12047 31.9312 9.06989C32.2344 9.04805 32.4311 8.83136 32.4167 8.54053C32.4849 8.55202 32.5486 8.56237 32.673 8.58249C32.5631 8.46754 32.4971 8.39799 32.4311 8.32902C32.4497 8.31062 32.4687 8.29281 32.4873 8.27441C32.5816 8.37442 32.6753 8.47386 32.7824 8.58709C32.4959 8.89171 32.2257 9.17852 31.9491 9.4728C31.8438 9.3498 31.7512 9.24232 31.6182 9.08713H31.6187Z" fill="white"/>\n<path d="M59.8784 33.7678C60.2979 33.5212 60.3188 33.5298 60.457 33.9868C60.0931 34.269 60.0248 34.2448 59.8784 33.7678Z" fill="white"/>\n<path d="M34.6073 7.29199C34.4494 7.47017 34.3383 7.59547 34.2416 7.7041C34.0565 7.7656 33.88 7.82365 33.7104 7.87998C33.7209 7.78744 33.7324 7.68111 33.7446 7.5719C34.0721 7.72881 34.2324 7.3236 34.6073 7.29199Z" fill="white"/>\n<path d="M35.3994 6.8772C35.3739 7.01342 35.3768 7.25022 35.3166 7.26746C35.1338 7.31919 34.9266 7.28643 34.7293 7.28643C34.7224 7.25539 34.7154 7.22378 34.7085 7.19274C34.7652 7.1255 34.8219 7.05882 34.8861 6.98295C34.9307 7.04733 34.966 7.09848 35.0262 7.18527C35.058 7.0663 35.0806 6.98353 35.117 6.84961C35.1569 6.97606 35.1824 7.05652 35.2079 7.13757C35.2241 7.13929 35.2408 7.14044 35.257 7.14216C35.2784 7.04905 35.2999 6.95594 35.3218 6.86283C35.3479 6.86743 35.3733 6.8726 35.3994 6.8772Z" fill="white"/>\n<path d="M37.9327 8.71542C37.9808 8.8206 38.0103 8.88497 38.0323 8.9321C38.1532 8.88555 38.2654 8.84187 38.3771 8.79876C38.3841 8.81888 38.3904 8.83957 38.3974 8.85968C38.2874 8.94015 38.1879 9.06085 38.0658 9.08959C37.9455 9.11833 37.8031 9.05396 37.6631 9.02867C37.7406 8.93843 37.8216 8.84417 37.9327 8.71484V8.71542Z" fill="white"/>\n<path d="M36.3898 7.58508C36.3857 7.61784 36.3782 7.67992 36.3707 7.74256C36.351 7.74371 36.3308 7.75061 36.314 7.74601C36.0808 7.67877 35.847 7.61324 35.6167 7.53737C35.5936 7.5299 35.5913 7.45863 35.5664 7.37012C35.7197 7.45518 35.8303 7.62531 35.9761 7.4161C35.994 7.39081 36.2422 7.523 36.3904 7.58508H36.3898Z" fill="white"/>\n<path d="M37.2368 8.74148C37.3705 8.59146 37.4567 8.4949 37.5308 8.41156C37.6824 8.39662 37.54 8.77998 37.8473 8.5041L37.8131 8.65124C37.6372 8.67883 37.4619 8.70641 37.2368 8.74148Z" fill="white"/>\n<path d="M36.6138 8.14249C36.6641 8.02064 36.7087 7.91201 36.7607 7.78613C36.8817 7.89361 36.9719 7.97293 37.0853 8.07352C36.9233 8.09708 36.7845 8.11777 36.6138 8.14249Z" fill="white"/>\n<path d="M35.503 14.8881C35.5221 14.8944 35.6089 14.9243 35.6957 14.9542C35.6934 14.9743 35.6911 14.9939 35.6888 15.014H34.653C34.6495 14.9956 34.6461 14.9772 34.6426 14.9588C34.7161 14.9255 34.7896 14.8921 34.8995 14.8427C34.1537 14.2881 33.998 13.6156 34.4736 12.8224C34.2572 13.5294 34.3851 14.134 34.9985 14.6346C34.9985 14.1777 34.9985 13.7622 34.9985 13.346C34.9985 13.1644 34.9834 12.9805 35.0054 12.8011C35.0164 12.7126 35.0951 12.6327 35.1431 12.5488C35.2021 12.6327 35.3115 12.7161 35.3127 12.8006C35.3173 13.2207 35.2924 13.6415 35.2808 14.0622C35.2762 14.2398 35.2802 14.418 35.2802 14.6082C35.8635 14.2858 36.0475 13.6196 35.7987 12.8063C36.0388 13.0506 36.198 13.4828 36.0643 13.8915C35.948 14.2455 35.6963 14.5559 35.503 14.8881Z" fill="white"/>\n<path d="M34.1071 14.5195C33.4718 13.9816 33.5661 13.0838 34.2743 12.7217C33.878 13.2735 33.7715 13.8551 34.1071 14.5195Z" fill="white"/>\n<path d="M36.2504 14.4685C36.5288 13.8167 36.4321 13.2316 35.96 12.6885C36.2794 12.7868 36.5311 13.0466 36.5907 13.3615C36.6705 13.7846 36.6011 14.1731 36.2504 14.4685Z" fill="white"/>\n<path d="M34.7935 12.3486H35.5405C35.2783 12.5073 34.9439 12.4895 34.7935 12.3486Z" fill="white"/>\n<path d="M37.7728 15.1738C38.0077 15.7911 38.2432 16.409 38.5013 17.0866C38.249 17.0866 38.0499 17.101 37.8555 17.078C37.7976 17.0711 37.7097 16.959 37.7085 16.8941C37.697 16.3239 37.7016 15.7538 37.7016 15.183C37.7253 15.1802 37.749 15.1773 37.7722 15.1738H37.7728Z" fill="white"/>\n<path d="M32.5972 15.1001V17.0693H31.7998C32.0573 16.3939 32.3067 15.7404 32.5561 15.0869C32.57 15.0915 32.5833 15.0955 32.5972 15.1001Z" fill="white"/>\n<path d="M35.4382 9.64699C35.3381 9.71711 35.238 9.78723 35.1298 9.8631C35.017 9.78608 34.9076 9.71194 34.7988 9.63722C34.8011 9.6125 34.8035 9.58721 34.8058 9.5625H35.433C35.4347 9.59066 35.4365 9.61883 35.4382 9.64699Z" fill="white"/>\n<path d="M35.5634 67.3403C35.5634 66.4115 35.5588 65.5033 35.5732 64.5952C35.5744 64.5314 35.7063 64.428 35.7891 64.4142C37.2252 64.1779 38.4612 63.5549 39.4645 62.5105C40.697 61.2277 41.3722 59.6999 41.4075 57.913C41.4156 57.513 41.4087 57.1124 41.4087 56.6704H42.5989C41.9543 55.9973 41.374 55.3904 40.8578 54.8507C40.2179 55.4386 39.5878 56.018 38.8911 56.6589C39.2851 56.6589 39.5895 56.6485 39.8927 56.6669C39.9633 56.6709 40.0802 56.7692 40.0865 56.833C40.2283 58.1912 40.0582 59.4925 39.2817 60.6575C38.1985 62.2829 36.7056 63.1865 34.703 63.1106C33.662 63.0709 32.7223 62.6973 31.9209 62.0433C30.5473 60.9219 29.8691 59.4465 29.7783 57.6929C29.7754 57.6365 29.7702 57.5802 29.7633 57.4808C29.3495 57.5026 28.9433 57.5245 28.54 57.5463C28.4093 59.8511 30.0126 63.7601 34.2441 64.4475V67.3564H33.7471C31.0762 67.3564 28.4052 67.3529 25.7343 67.3616C25.4588 67.3627 25.3535 67.3144 25.3535 67.0046C25.3535 63.1066 25.3107 59.2079 25.3373 55.3099C25.3477 53.7914 25.4403 52.2665 25.6093 50.7572C25.7794 49.2404 26.6005 48 27.6131 46.8879C28.996 45.3705 30.6769 44.2405 32.4747 43.2749C33.2784 42.8432 34.1099 42.461 34.935 42.0702C35.0409 42.0196 35.2058 42.0058 35.3105 42.0501C37.4272 42.9507 39.4373 44.0342 41.2085 45.5142C42.4838 46.5804 43.5519 47.8098 44.2399 49.3398C44.6276 50.202 44.7792 51.1089 44.8429 52.0406C45.0413 54.9495 44.9337 57.8613 44.9244 60.7725C44.9181 62.8508 44.9146 64.9292 44.9239 67.0081C44.925 67.2817 44.851 67.3633 44.5709 67.3621C41.6205 67.3552 38.6695 67.361 35.7191 67.3627C35.682 67.3627 35.6444 67.3524 35.5651 67.3409L35.5634 67.3403ZM41.4307 53.8586C41.4978 53.4045 41.3439 52.3981 41.1101 51.682C39.722 47.4235 34.7632 45.7849 31.1942 48.4363C29.5752 49.6393 28.6812 51.2791 28.573 53.3057C28.5487 53.7603 28.5695 54.2173 28.5695 54.719H27.4615C27.4551 54.7415 27.4487 54.7639 27.4424 54.7863C28.047 55.3559 28.6517 55.9249 29.2083 56.4497C29.7667 55.895 30.3604 55.3047 30.9599 54.7087H29.9114C29.3744 51.3618 31.6779 48.9605 34.063 48.5098C35.3736 48.2621 36.6119 48.5058 37.7084 49.2381C39.3517 50.3347 40.1265 51.9354 40.2028 53.8592H41.4307V53.8586ZM35.0102 57.6998C34.1134 57.6992 33.3889 58.4136 33.3878 59.2999C33.3872 60.1787 34.1226 60.9093 35.0085 60.9104C35.9002 60.9116 36.6206 60.1919 36.6206 59.3011C36.6206 58.3993 35.9175 57.7009 35.0102 57.7003V57.6998ZM36.6258 51.8079C36.6252 50.9175 35.9083 50.2002 35.0149 50.1956C34.1313 50.1916 33.393 50.917 33.3849 51.7969C33.3768 52.6849 34.1261 53.4316 35.0183 53.4241C35.9117 53.4166 36.6263 52.6982 36.6252 51.8079H36.6258ZM35.0189 57.1198C35.9164 57.117 36.6032 56.4313 36.6032 55.5375C36.6032 54.6472 35.9094 53.9563 35.0149 53.9546C34.1319 53.9529 33.4086 54.6564 33.3999 55.5266C33.3907 56.4037 34.1209 57.1227 35.0189 57.1198Z" fill="white"/>\n<path d="M35.0019 101C34.7439 101 34.5396 100.816 34.3527 100.628C33.1312 99.4012 31.7576 98.4086 30.5755 97.5993C28.6 96.2474 26.3758 94.9324 23.5752 93.4621C20.7805 91.9948 17.8844 90.7044 15.39 89.6095C13.4012 88.737 10.8136 87.5162 8.43429 85.8034C6.51961 84.4251 5.19629 83.01 4.26991 81.3495C3.19829 79.4292 2.44897 77.2814 2.04335 74.9656C1.62963 72.6056 1.64236 70.2365 1.69965 68.4369C1.75867 66.5815 1.95829 64.7538 2.24066 62.58C2.40904 61.2805 2.60288 59.9631 2.79036 58.6894C3.04843 56.937 3.31459 55.1253 3.51885 53.3378C3.68549 51.8756 3.81453 50.6565 3.83015 49.3909C3.83189 49.2311 3.84693 49.0759 3.86082 48.9253C3.8747 48.7793 3.88743 48.6408 3.88917 48.5034C3.91174 46.7107 3.71385 44.9537 3.5391 43.6231L3.52926 43.5501C3.30418 41.8373 3.07157 40.0659 2.62487 38.3703C2.11221 36.4236 1.31717 34.4591 0.261757 32.5324C0.179592 32.3824 0.132144 32.2284 0.0904831 32.0928C0.0679166 32.0192 0.0465074 31.9491 0.0210478 31.8835L0.00195312 31.8335V31.6186L0.0690739 31.5387C0.295896 31.2674 0.573637 31.0863 0.84212 30.911C0.963631 30.8317 1.0782 30.757 1.1864 30.6754C1.31659 30.5771 1.44736 30.4805 1.57813 30.384C2.05492 30.0322 2.50509 29.7 2.90898 29.3C2.92807 29.281 2.95932 29.2505 2.98535 29.2229C2.96163 29.1896 2.9327 29.1517 2.91476 29.1281C2.44434 28.5074 1.95945 27.8803 1.49076 27.2739C1.10134 26.7699 0.69862 26.2491 0.305732 25.7336C0.166283 25.5508 0.0742815 25.3812 0.0158402 25.2002L0.00195312 25.1576V24.9519L0.0684952 24.872C0.211995 24.7007 0.397734 24.6283 0.54702 24.5708L0.578844 24.5582C2.01731 23.9943 3.6473 23.3557 5.26283 22.7287L5.26977 22.7258C5.36583 22.6884 5.46477 22.6499 5.50701 22.6264C5.51338 22.5758 5.51048 22.4631 5.50817 22.385C5.46477 20.7963 5.60422 19.364 5.93404 18.0053C6.46927 15.8016 7.50385 13.9014 9.00828 12.3576C10.4062 10.923 12.1566 9.75738 14.5168 8.68889C16.7619 7.67271 19.1412 6.92667 21.4418 6.20534L22.0031 6.02946C24.3384 5.29778 26.7536 4.54139 29.0317 3.54935C31.2727 2.5734 32.9964 1.52445 34.4569 0.246747C34.5367 0.177201 34.6206 0.134668 34.6878 0.100757C34.7242 0.0823644 34.756 0.0662709 34.7792 0.0501775L34.8532 -0.000976562H35.1165L35.1698 0.0208645C35.4018 0.115701 35.5812 0.269738 35.7385 0.405382C35.7756 0.436994 35.8126 0.469181 35.8496 0.499644C37.0856 1.51755 38.5061 2.39752 40.1928 3.18839C42.6034 4.31896 45.1858 5.13282 47.6831 5.92025C47.9267 5.9967 48.1698 6.07371 48.4134 6.15073L48.7565 6.25936C50.9466 6.95138 53.2108 7.66754 55.3534 8.62625C57.3265 9.50966 58.82 10.4115 60.053 11.4656C62.1153 13.2284 63.471 15.4476 64.0826 18.0616C64.3979 19.4088 64.5322 20.8222 64.4946 22.3821C64.4928 22.4568 64.4899 22.5643 64.4957 22.6149C64.5357 22.6373 64.6225 22.6718 64.7064 22.7057L64.7202 22.7114C65.4927 23.0218 66.2825 23.3282 67.0463 23.6253C67.8275 23.9288 68.6347 24.2426 69.4262 24.5605L69.4673 24.5765C69.6125 24.634 69.7936 24.7053 69.9337 24.8731L70.0002 24.953V25.168L69.9805 25.218C69.8313 25.6031 69.5853 25.9048 69.3475 26.1968C69.2729 26.2882 69.2023 26.375 69.1346 26.4641C68.792 26.9147 68.4408 27.3699 68.1006 27.8096C67.7667 28.2418 67.4213 28.689 67.0857 29.1304C67.0677 29.154 67.0394 29.1913 67.0157 29.2247C67.0429 29.2517 67.0735 29.2816 67.0897 29.2965C67.8113 29.9799 68.6277 30.5512 69.4702 31.1254L69.4887 31.1381C69.6473 31.2461 69.8266 31.368 69.9545 31.5697L69.9991 31.6398V31.8077L69.9938 31.8347C69.9308 32.16 69.7827 32.4313 69.6397 32.694C69.6108 32.7468 69.5819 32.7997 69.5541 32.8532C68.1579 35.5069 67.235 38.4002 66.8108 41.4516C66.7339 42.0057 66.6471 42.5667 66.5632 43.1093C66.4029 44.1456 66.2368 45.2175 66.1344 46.2751C66.0042 47.62 65.973 49.023 66.0395 50.564C66.1726 53.6643 66.6419 56.7829 67.0961 59.7993C67.1447 60.1217 67.1933 60.4442 67.2413 60.7666C67.5578 62.8875 67.8853 65.0808 68.0705 67.308C68.1584 68.3633 68.1897 69.4163 68.2094 70.3066C68.2539 72.3602 68.0948 74.238 67.7233 76.0468C67.3582 77.8228 66.7107 79.5666 65.7982 81.2283C64.9233 82.8221 63.699 84.2015 62.0551 85.4459C60.3846 86.7104 58.4861 87.8197 56.0813 88.9382C55.0728 89.4072 54.0405 89.8658 53.0418 90.3101C51.1451 91.1533 49.1841 92.0252 47.3134 92.9977C44.205 94.614 40.9115 96.4256 37.8881 98.7138C37.1868 99.2443 36.3716 99.8874 35.6431 100.633C35.4614 100.819 35.2623 101 35.0043 101.001H35.0019V101ZM0.604883 31.8059C0.618191 31.8462 0.630342 31.8858 0.642493 31.9249C0.679526 32.045 0.714822 32.1588 0.768634 32.2583C1.84604 34.2263 2.65843 36.2339 3.18325 38.2255C3.6392 39.9567 3.87413 41.7459 4.10153 43.4765L4.11136 43.5495C4.28842 44.8985 4.48921 46.682 4.46664 48.5109C4.4649 48.6713 4.44986 48.8276 4.43597 48.9788C4.42266 49.1242 4.40936 49.2621 4.40762 49.3984C4.39142 50.691 4.26123 51.9244 4.09227 53.4027C3.88743 55.1995 3.62011 57.0163 3.36146 58.7728C3.17457 60.0441 2.98073 61.3586 2.81292 62.6536C2.53287 64.8107 2.33498 66.6223 2.27654 68.4553C2.22041 70.2278 2.20768 72.5585 2.61214 74.8673C3.01255 77.1514 3.72021 79.1809 4.77505 81.0714C5.65919 82.6548 6.92928 84.0107 8.77336 85.3384C11.1087 87.0196 13.661 88.2232 15.6237 89.0842C18.1274 90.1825 21.0345 91.478 23.846 92.954C26.6668 94.4352 28.9096 95.7612 30.9041 97.1263C32.1088 97.951 33.5097 98.9638 34.7647 100.225C34.9163 100.377 34.9788 100.414 35.0019 100.424C35.0228 100.415 35.0835 100.379 35.2282 100.231C35.9833 99.4587 36.8194 98.7988 37.5375 98.2557C40.595 95.9417 43.914 94.1162 47.0449 92.4879C48.9312 91.5074 50.9003 90.6314 52.8052 89.7848C53.8015 89.3416 54.8315 88.8841 55.8354 88.4168C58.202 87.3167 60.0669 86.227 61.7039 84.9878C63.2818 83.794 64.4546 82.4738 65.2896 80.9524C66.1743 79.3407 66.8021 77.6515 67.1557 75.9312C67.5185 74.165 67.6741 72.3286 67.6302 70.3186C67.6111 69.4364 67.5798 68.3949 67.493 67.3546C67.309 65.1458 66.9833 62.9617 66.6679 60.85C66.6199 60.5275 66.5713 60.2057 66.5227 59.8832C66.0667 56.8525 65.5951 53.7183 65.4603 50.5875C65.3932 49.0202 65.4244 47.5913 65.5575 46.2193C65.6617 45.1457 65.8283 44.0657 65.9903 43.0213C66.0742 42.4811 66.1604 41.9224 66.2368 41.3723C66.6702 38.2554 67.6134 35.2988 69.0403 32.5865C69.0698 32.5307 69.0999 32.475 69.13 32.4198C69.2439 32.2112 69.3522 32.0129 69.4071 31.8031C69.3429 31.7352 69.2567 31.6766 69.1606 31.6117L69.1421 31.599C68.2794 31.0116 67.4427 30.4248 66.6899 29.7121C66.3288 29.3701 66.3155 29.1879 66.6228 28.7838C66.9601 28.3401 67.3055 27.8924 67.6406 27.4596C67.9796 27.0205 68.3303 26.5664 68.6717 26.1175C68.7452 26.0204 68.8221 25.9261 68.8962 25.8347C69.0779 25.6111 69.2515 25.3979 69.3724 25.1605C69.3383 25.1444 69.2983 25.1283 69.2515 25.1099L69.2069 25.0921C68.4188 24.7754 67.6128 24.4622 66.8334 24.1593C66.0679 23.8621 65.2769 23.5546 64.5009 23.2431L64.4871 23.2373C63.975 23.0316 63.8997 22.9178 63.9131 22.3672C63.9501 20.8567 63.8199 19.4905 63.5161 18.1909C62.9329 15.6982 61.6402 13.5819 59.6729 11.9007C58.4832 10.8839 57.0343 10.0097 55.1127 9.14986C53.0007 8.20437 50.7522 7.49396 48.5783 6.80654L48.2346 6.69791C47.9915 6.62089 47.7485 6.54445 47.5049 6.468C44.9891 5.6754 42.3875 4.85579 39.9423 3.70856C38.211 2.89641 36.7506 1.99173 35.477 0.942213C35.4365 0.908876 35.3966 0.874391 35.3561 0.839905C35.2392 0.739321 35.1281 0.64391 35.0077 0.58126C34.9863 0.592756 34.9655 0.603101 34.9458 0.612872C34.8995 0.636438 34.8596 0.656555 34.8347 0.677821C33.3286 1.99576 31.5568 3.07517 29.2597 4.07526C26.9532 5.07995 24.523 5.84093 22.1726 6.57721L21.6119 6.75309C19.3281 7.46924 16.9661 8.21012 14.7529 9.21193C12.461 10.2494 10.7662 11.3759 9.41969 12.7571C7.96733 14.2469 7.00971 16.0074 6.49184 18.1398C6.17417 19.4485 6.03993 20.832 6.08217 22.3689C6.09779 22.9339 6.01852 23.0505 5.47634 23.2609L5.4694 23.2638C3.85445 23.8903 2.22504 24.5294 0.78715 25.0927L0.75359 25.1059C0.700356 25.1266 0.655802 25.1444 0.61877 25.1622C0.654645 25.2341 0.702092 25.3077 0.762269 25.3864C1.15458 25.9002 1.55672 26.421 1.94556 26.9239C2.41483 27.5314 2.9003 28.1596 3.37246 28.7821C3.67739 29.1844 3.6664 29.3569 3.31286 29.7069C2.87947 30.1357 2.3911 30.4966 1.91894 30.8449C1.78991 30.9403 1.6603 31.0358 1.53184 31.1323C1.40802 31.226 1.27956 31.3099 1.15516 31.391C0.953216 31.5226 0.759955 31.6485 0.602568 31.8048L0.604883 31.8059Z" fill="white"/>\n</g>\n<defs>\n<clipPath id="clip0_881_1113">\n<rect width="70" height="101" fill="white"/>\n</clipPath>\n</defs>\n</svg>\n'
          }
        ]
      },
      {
        path: "backstep3.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "step1Next2.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "backstep2.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "step1Next.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "addBill.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "step2Next.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button2.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "billsdata",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(window.localStorage.getItem("bills") || "[]");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "popover[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button3[].loadingviow",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button4[].loadingviow",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "edit.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "exitModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button5.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button6.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "selectBill",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsosEvNkdp6Zt6()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBill.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBill.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBill.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"chargeStep1"}
        data-plasmic-override={overrides.chargeStep1}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.chargeStep1,
          hasVariant($state, "stepscharg", "step3") &&
            hasVariant(globalVariants, "screen", "mobileOnly")
            ? "page"
            : hasVariant($state, "stepscharg", "step3")
            ? "page"
            : undefined,
          {
            [sty.chargeStep1stepscharg_step1]: hasVariant(
              $state,
              "stepscharg",
              "step1"
            ),
            [sty.chargeStep1stepscharg_step2]: hasVariant(
              $state,
              "stepscharg",
              "step2"
            ),
            [sty.chargeStep1stepscharg_step3]: hasVariant(
              $state,
              "stepscharg",
              "step3"
            )
          }
        )}
      >
        <section
          className={classNames(projectcss.all, sty.section___1Mdb, {
            [sty.sectionstepscharg_step1___1MdbqKzi3]: hasVariant(
              $state,
              "stepscharg",
              "step1"
            ),
            [sty.sectionstepscharg_step3___1MdbTqZTv]: hasVariant(
              $state,
              "stepscharg",
              "step3"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__mpDk, {
              [sty.freeBoxstepscharg_step2__mpDkAvykh]: hasVariant(
                $state,
                "stepscharg",
                "step2"
              ),
              [sty.freeBoxstepscharg_step3__mpDkTqZTv]: hasVariant(
                $state,
                "stepscharg",
                "step3"
              )
            })}
          >
            <section
              className={classNames(projectcss.all, sty.section__xU2Oq, {
                [sty.sectionstepscharg_step3__xU2OqTqZTv]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
            >
              <div
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames(projectcss.all, sty.header, {
                  [sty.headerstepscharg_step1]: hasVariant(
                    $state,
                    "stepscharg",
                    "step1"
                  ),
                  [sty.headerstepscharg_step2]: hasVariant(
                    $state,
                    "stepscharg",
                    "step2"
                  ),
                  [sty.headerstepscharg_step3]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon10Icon
                      : Icon3Icon
                  }
                  className={classNames(projectcss.all, sty.svg__qGyiK, {
                    [sty.svgstepscharg_step1__qGyiKqKzi3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.svgstepscharg_step2__qGyiKAvykh]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.svgstepscharg_step3__qGyiKTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9DAgr
                  )}
                >
                  {"\u067e\u0631\u062f\u0627\u062e\u062a \u0642\u0628\u0636"}
                </div>
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon9Icon
                      : Icon9Icon
                  }
                  className={classNames(projectcss.all, sty.svg__pqJFh, {
                    [sty.svgstepscharg_step3__pqJFhTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  role={"img"}
                />
              </div>
            </section>
            <Reveal
              data-plasmic-name={"reveal"}
              data-plasmic-override={overrides.reveal}
              cascade={false}
              className={classNames("__wab_instance", sty.reveal, {
                [sty.revealstepscharg_step2]: hasVariant(
                  $state,
                  "stepscharg",
                  "step2"
                ),
                [sty.revealstepscharg_step3]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
              duration={
                hasVariant($state, "stepscharg", "step2") ? 2000 : undefined
              }
              effect={
                hasVariant($state, "stepscharg", "step2") ? "fade" : "fade"
              }
              reverse={
                hasVariant($state, "stepscharg", "step2") ? false : undefined
              }
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"wallet"}
                data-plasmic-override={overrides.wallet}
                hasGap={true}
                className={classNames(projectcss.all, sty.wallet, {
                  [sty.walletstepscharg_step1]: hasVariant(
                    $state,
                    "stepscharg",
                    "step1"
                  ),
                  [sty.walletstepscharg_step2]: hasVariant(
                    $state,
                    "stepscharg",
                    "step2"
                  ),
                  [sty.walletstepscharg_step3]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant($state, "stepscharg", "step3")
                      ? Icon154Icon
                      : Icon61Icon
                  }
                  className={classNames(projectcss.all, sty.svg__yjxOe, {
                    [sty.svgstepscharg_step1__yjxOeqKzi3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.svgstepscharg_step2__yjxOeAvykh]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.svgstepscharg_step3__yjxOeTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"steps"}
                  data-plasmic-override={overrides.steps}
                  className={classNames(projectcss.all, sty.steps, {
                    [sty.stepsstepscharg_step2]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.stepsstepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"\u0645\u0634\u062e\u0635\u0627\u062a"}
                    data-plasmic-override={overrides.مشخصات}
                    className={classNames(projectcss.all, sty.مشخصات, {
                      [sty.مشخصاتstepscharg_step3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    <PlasmicIcon__
                      data-plasmic-name={"selected"}
                      data-plasmic-override={overrides.selected}
                      PlasmicIconType={
                        hasVariant($state, "stepscharg", "step3")
                          ? CheckCircleSvgrepoComSvgIcon
                          : hasVariant($state, "stepscharg", "step2")
                          ? CheckCircleSvgrepoComSvgIcon
                          : RadioButtonCheckedSvgrepoCom2SvgIcon
                      }
                      className={classNames(projectcss.all, sty.selected, {
                        [sty.selectedstepscharg_step1]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.selectedstepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.selectedstepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dr5Sp,
                        {
                          [sty.textstepscharg_step2__dr5SpAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.textstepscharg_step3__dr5SpTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {"\u0645\u0634\u062e\u0635\u0627\u062a"}
                    </div>
                  </div>
                  <LineXlSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__wWiHf)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={
                      "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698"
                    }
                    data-plasmic-override={overrides.مبلغشارژ}
                    className={classNames(projectcss.all, sty.مبلغشارژ)}
                  >
                    <PlasmicIcon__
                      data-plasmic-name={"unselected"}
                      data-plasmic-override={overrides.unselected}
                      PlasmicIconType={
                        hasVariant($state, "stepscharg", "step3")
                          ? CheckCircleSvgrepoComSvgIcon
                          : RadioButtonCheckedSvgrepoCom2SvgIcon
                      }
                      className={classNames(projectcss.all, sty.unselected, {
                        [sty.unselectedstepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.unselectedstepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7Mhfp,
                        {
                          [sty.textstepscharg_step2___7MhfpAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.textstepscharg_step3___7MhfpTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {"\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698"}
                    </div>
                  </div>
                  <LineXlSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__sNzY)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={
                      "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f"
                    }
                    data-plasmic-override={overrides.تاییدخرید}
                    className={classNames(projectcss.all, sty.تاییدخرید, {
                      [sty.تاییدخریدstepscharg_step2]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      )
                    })}
                  >
                    <RadioButtonCheckedSvgrepoCom2SvgIcon
                      data-plasmic-name={"unselected2"}
                      data-plasmic-override={overrides.unselected2}
                      className={classNames(projectcss.all, sty.unselected2, {
                        [sty.unselected2stepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.unselected2stepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dPYdD,
                        {
                          [sty.textstepscharg_step2__dPYdDAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.textstepscharg_step3__dPYdDTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "stepscharg", "step3")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u062e\u0631\u06cc\u062f"
                        : "\u062a\u0627\u0626\u06cc\u062f \u062e\u0631\u06cc\u062f"}
                    </div>
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__c6PsJ, {
                    [sty.freeBoxstepscharg_step2__c6PsJAvykh]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.freeBoxstepscharg_step3__c6PsJTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gPzHz, {
                      [sty.freeBoxstepscharg_step1__gPzHzqKzi3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step1"
                      ),
                      [sty.freeBoxstepscharg_step2__gPzHzAvykh]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.freeBoxstepscharg_step3__gPzHzTqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml___5U0Al,
                        {
                          [sty.embedHtmlstepscharg_step1___5U0AlqKzi3]:
                            hasVariant($state, "stepscharg", "step1"),
                          [sty.embedHtmlstepscharg_step3___5U0AlTqZTv]:
                            hasVariant($state, "stepscharg", "step3")
                        }
                      )}
                      code={
                        hasVariant($state, "stepscharg", "step3")
                          ? (() => {
                              try {
                                return (() => {
                                  if ($state.data?.type_en)
                                    return $state.types.find(
                                      item => item.type == $state.data.type_en
                                    ).icon;
                                  else if ($state.type != "mobile")
                                    return $state.types.find(
                                      item => item.type == $state.type
                                    ).icon;
                                  else
                                    return $state.operators2[
                                      $state.operatorselect
                                    ].icon;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "<div>Paste your embed code via the right sidebar</div>";
                                }
                                throw e;
                              }
                            })()
                          : "<div>Paste your embed code via the right sidebar</div>"
                      }
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ovHho,
                      {
                        [sty.textstepscharg_step1__ovHhoqKzi3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.textstepscharg_step2__ovHhoAvykh]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.textstepscharg_step3__ovHhoTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "stepscharg", "step3") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              if ($state.data?.type_en)
                                return $state.types.find(
                                  item => item.type == $state.data.type_en
                                ).name;
                              else if ($state.type != "mobile")
                                return $state.types.find(
                                  item => item.type == $state.type
                                ).name;
                              else
                                return $state.operators2[$state.operatorselect]
                                  .description;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : hasVariant($state, "stepscharg", "step2") ? (
                      "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                    ) : (
                      "\u0634\u0646\u0627\u0633\u0647 \u0642\u0628\u0636 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                    )}
                  </div>
                  {(
                    hasVariant($state, "stepscharg", "step3")
                      ? (() => {
                          try {
                            return $state.data.holder_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "stepscharg", "step2")
                      ? true
                      : true
                  ) ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__z1Dcz,
                        {
                          [sty.freeBoxstepscharg_step2__z1DczAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.freeBoxstepscharg_step3__z1DczTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a161,
                            {
                              [sty.textstepscharg_step2__a161Avykh]: hasVariant(
                                $state,
                                "stepscharg",
                                "step2"
                              ),
                              [sty.textstepscharg_step3__a161TqZTv]: hasVariant(
                                $state,
                                "stepscharg",
                                "step3"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u0646\u0627\u0645 \u0645\u0634\u062a\u0631\u06a9"
                            : hasVariant($state, "stepscharg", "step2")
                            ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                            : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                        </div>
                      ) : null}
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3EJpq,
                          {
                            [sty.freeBoxstepscharg_step3___3EJpqTqZTv]:
                              hasVariant($state, "stepscharg", "step3")
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4YO1,
                            {
                              [sty.textstepscharg_step1___4YO1QKzi3]:
                                hasVariant($state, "stepscharg", "step1"),
                              [sty.textstepscharg_step2___4YO1Avykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3___4YO1TqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.data.holder_name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0633\u06a9\u0646 \u0641\u0644\u0627\u0646";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : hasVariant($state, "stepscharg", "step2") ? (
                            "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return undefined;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0633\u06a9\u0646 \u0641\u0644\u0627\u0646";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      </Stack__>
                    </Stack__>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step3")
                      ? (() => {
                          try {
                            return $state.mobile;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "stepscharg", "step2")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__okEke,
                        {
                          [sty.freeBoxstepscharg_step2__okEkeAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.freeBoxstepscharg_step3__okEkeTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__my9Y4,
                            {
                              [sty.textstepscharg_step2__my9Y4Avykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__my9Y4TqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                            : hasVariant($state, "stepscharg", "step2")
                            ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                            : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0JTo9,
                            {
                              [sty.textstepscharg_step2___0JTo9Avykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3___0JTo9TqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.mobile;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : hasVariant($state, "stepscharg", "step2") ? (
                            "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          ) : (
                            "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          )}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step3")
                      ? (() => {
                          try {
                            return $state.phone;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "stepscharg", "step2")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6HMtq,
                        {
                          [sty.freeBoxstepscharg_step2___6HMtqAvykh]:
                            hasVariant($state, "stepscharg", "step2"),
                          [sty.freeBoxstepscharg_step3___6HMtqTqZTv]:
                            hasVariant($state, "stepscharg", "step3")
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h7Myd,
                            {
                              [sty.textstepscharg_step2__h7MydAvykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__h7MydTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u0634\u0645\u0627\u0631\u0647 \u062b\u0627\u0628\u062a"
                            : hasVariant($state, "stepscharg", "step2")
                            ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                            : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ooVa,
                            {
                              [sty.textstepscharg_step2__ooVaAvykh]: hasVariant(
                                $state,
                                "stepscharg",
                                "step2"
                              ),
                              [sty.textstepscharg_step3__ooVaTqZTv]: hasVariant(
                                $state,
                                "stepscharg",
                                "step3"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.phone;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : hasVariant($state, "stepscharg", "step2") ? (
                            "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          ) : (
                            "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          )}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step3")
                      ? (() => {
                          try {
                            return $state.code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "stepscharg", "step2")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__vjiyC,
                        {
                          [sty.freeBoxstepscharg_step2__vjiyCAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.freeBoxstepscharg_step3__vjiyCTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dm9Sb,
                            {
                              [sty.textstepscharg_step2__dm9SbAvykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__dm9SbTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u06a9\u062f \u0627\u0634\u062a\u0631\u0627\u06a9"
                            : hasVariant($state, "stepscharg", "step2")
                            ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                            : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iiWt2,
                            {
                              [sty.textstepscharg_step2__iiWt2Avykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__iiWt2TqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.code;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : hasVariant($state, "stepscharg", "step2") ? (
                            "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          ) : (
                            "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          )}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step3")
                      ? (() => {
                          try {
                            return $state.id != 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "stepscharg", "step2")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__yl38R,
                        {
                          [sty.freeBoxstepscharg_step2__yl38RAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.freeBoxstepscharg_step3__yl38RTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zkO5I,
                            {
                              [sty.textstepscharg_step2__zkO5IAvykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__zkO5ITqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u0634\u0646\u0627\u0633\u0647 \u0642\u0628\u0636"
                            : hasVariant($state, "stepscharg", "step2")
                            ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                            : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tF2ZB,
                            {
                              [sty.textstepscharg_step2__tF2ZBAvykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__tF2ZBTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : hasVariant($state, "stepscharg", "step2") ? (
                            "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          ) : (
                            "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          )}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eJoqq, {
                      [sty.freeBoxstepscharg_step2__eJoqqAvykh]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.freeBoxstepscharg_step3__eJoqqTqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    {(
                      hasVariant($state, "stepscharg", "step3") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__r4Xam,
                          {
                            [sty.textstepscharg_step2__r4XamAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3__r4XamTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a"
                          : hasVariant($state, "stepscharg", "step2")
                          ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                      </div>
                    ) : null}
                    {(
                      hasVariant($state, "stepscharg", "step3") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5AQQ,
                          {
                            [sty.textstepscharg_step1___5AQQqKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.textstepscharg_step2___5AQQAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3___5AQQTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  $state.data.amount.toLocaleString("en") +
                                  " تومان "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0628\u0644\u063a \u0646\u0647\u0627\u06cc\u06cc";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : hasVariant($state, "stepscharg", "step2") ? (
                          "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                        ) : (
                          "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                        )}
                      </div>
                    ) : null}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lP6JV, {
                    [sty.freeBoxstepscharg_step1__lP6JVqKzi3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.freeBoxstepscharg_step2__lP6JVAvykh]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.freeBoxstepscharg_step3__lP6JVTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "stepscharg", "step1")
                      ? (() => {
                          try {
                            return $state.type == "gas";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__vcZxB,
                        {
                          [sty.freeBoxstepscharg_step1__vcZxBqKzi3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          )
                        }
                      )}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return [
                              { text: "شناسه قبض", type: "bill_id" },
                              { text: "کد اشتراک", type: "participate_code" }
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <RadioButton
                            data-plasmic-name={"radioButton"}
                            data-plasmic-override={overrides.radioButton}
                            className={classNames(
                              "__wab_instance",
                              sty.radioButton,
                              {
                                [sty.radioButtonstepscharg_step1]: hasVariant(
                                  $state,
                                  "stepscharg",
                                  "step1"
                                )
                              }
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateIdORcode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["idORcode"]
                                      },
                                      operation: 0,
                                      value: currentItem.type
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateIdORcode"] != null &&
                                typeof $steps["updateIdORcode"] === "object" &&
                                typeof $steps["updateIdORcode"].then ===
                                  "function"
                              ) {
                                $steps["updateIdORcode"] = await $steps[
                                  "updateIdORcode"
                                ];
                              }
                            }}
                            selected={
                              hasVariant($state, "stepscharg", "step1")
                                ? (() => {
                                    try {
                                      return (
                                        currentItem.type == $state.idORcode
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "selected";
                                      }
                                      throw e;
                                    }
                                  })()
                                : undefined
                            }
                            stepscharg={
                              hasVariant($state, "stepscharg", "step1")
                                ? "step1"
                                : undefined
                            }
                            text={
                              hasVariant($state, "stepscharg", "step1")
                                ? (() => {
                                    try {
                                      return currentItem.text;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                : ``
                            }
                          />
                        );
                      })}
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aci6W, {
                      [sty.freeBoxstepscharg_step1__aci6WqKzi3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step1"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tz4Bs,
                        {
                          [sty.textstepscharg_step1__tz4BsqKzi3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          ),
                          [sty.textstepscharg_step2__tz4BsAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.textstepscharg_step3__tz4BsTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "stepscharg", "step3")
                        ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                        : hasVariant($state, "stepscharg", "step2")
                        ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                        : "\u0646\u0627\u0645 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
                    </div>
                    <Input
                      data-plasmic-name={"fragmentInput3"}
                      data-plasmic-override={overrides.fragmentInput3}
                      className={classNames(
                        "__wab_instance",
                        sty.fragmentInput3,
                        {
                          [sty.fragmentInput3stepscharg_step1]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          ),
                          [sty.fragmentInput3stepscharg_step2]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.fragmentInput3stepscharg_step3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "fragmentInput3",
                          "value"
                        ]).apply(null, eventArgs);

                        (async value => {
                          const $steps = {};

                          $steps["updateName"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["name"]
                                  },
                                  operation: 0,
                                  value: $state.fragmentInput3.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateName"] != null &&
                            typeof $steps["updateName"] === "object" &&
                            typeof $steps["updateName"].then === "function"
                          ) {
                            $steps["updateName"] = await $steps["updateName"];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={
                        "\u0645\u0627\u0646\u0646\u062f: \u062e\u0627\u0646\u0647 ( \u0627\u062e\u062a\u06cc\u0627\u0631\u06cc )"
                      }
                      type={"text"}
                      value={generateStateValueProp($state, [
                        "fragmentInput3",
                        "value"
                      ])}
                    />
                  </div>
                  {(
                    hasVariant($state, "stepscharg", "step1")
                      ? (() => {
                          try {
                            return $state.type == "phone";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.type == "phone";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__kAcN3,
                        {
                          [sty.freeBoxstepscharg_step1__kAcN3QKzi3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o8Bft,
                          {
                            [sty.textstepscharg_step1__o8BftQKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.textstepscharg_step2__o8BftAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3__o8BftTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step1")
                          ? "\u0634\u0645\u0627\u0631\u0647 \u062b\u0627\u0628\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f (\u0647\u0645\u0631\u0627\u0647 \u06a9\u062f \u0634\u0647\u0631)."
                          : hasVariant($state, "stepscharg", "step3")
                          ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                          : hasVariant($state, "stepscharg", "step2")
                          ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          : "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 \u06cc\u0627 \u062b\u0627\u0628\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
                      </div>
                      <Input
                        data-plasmic-name={"fragmentInput4"}
                        data-plasmic-override={overrides.fragmentInput4}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentInput4,
                          {
                            [sty.fragmentInput4stepscharg_step1]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.fragmentInput4stepscharg_step2]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.fragmentInput4stepscharg_step3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentInput4",
                            "value"
                          ]).apply(null, eventArgs);

                          (async value => {
                            const $steps = {};

                            $steps["updatePhone"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["phone"]
                                    },
                                    operation: 0,
                                    value: $state.fragmentInput4.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updatePhone"] != null &&
                              typeof $steps["updatePhone"] === "object" &&
                              typeof $steps["updatePhone"].then === "function"
                            ) {
                              $steps["updatePhone"] = await $steps[
                                "updatePhone"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={
                          hasVariant($state, "stepscharg", "step1")
                            ? "\u0645\u0627\u0646\u0646\u062f: 0212345678"
                            : "\u0645\u0627\u0646\u0646\u062f: 09121234567"
                        }
                        type={"tel"}
                        value={generateStateValueProp($state, [
                          "fragmentInput4",
                          "value"
                        ])}
                      />
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step1")
                      ? (() => {
                          try {
                            return $state.type == "mobile";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__riwOa,
                        {
                          [sty.freeBoxstepscharg_step1__riwOaqKzi3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          ),
                          [sty.freeBoxstepscharg_step2__riwOaAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___36VHu,
                          {
                            [sty.textstepscharg_step1___36VHuqKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.textstepscharg_step2___36VHuAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3___36VHuTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step1")
                          ? "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                          : hasVariant($state, "stepscharg", "step3")
                          ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                          : hasVariant($state, "stepscharg", "step2")
                          ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          : "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 \u06cc\u0627 \u062b\u0627\u0628\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
                      </div>
                      <Input
                        data-plasmic-name={"fragmentInput5"}
                        data-plasmic-override={overrides.fragmentInput5}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentInput5,
                          {
                            [sty.fragmentInput5stepscharg_step1]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.fragmentInput5stepscharg_step2]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.fragmentInput5stepscharg_step3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentInput5",
                            "value"
                          ]).apply(null, eventArgs);

                          (async value => {
                            const $steps = {};

                            $steps["runCode2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        let __plasmic_ret = undefined;
                                        if (
                                          $state.fragmentInput5.value.length < 4
                                        )
                                          __plasmic_ret =
                                            $state.operatorselect = -1;
                                        else {
                                          for (
                                            let operatorIndex = 0;
                                            operatorIndex <
                                            $state.operators2.length;
                                            operatorIndex++
                                          ) {
                                            const operator =
                                              $state.operators2[operatorIndex];
                                            for (let code of operator.codes) {
                                              if (
                                                $state.fragmentInput5.value.startsWith(
                                                  code
                                                )
                                              ) {
                                                __plasmic_ret =
                                                  $state.operatorselect =
                                                    operatorIndex;
                                              }
                                            }
                                          }
                                        }
                                        return __plasmic_ret;
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode2"] != null &&
                              typeof $steps["runCode2"] === "object" &&
                              typeof $steps["runCode2"].then === "function"
                            ) {
                              $steps["runCode2"] = await $steps["runCode2"];
                            }

                            $steps["updateMobile"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["mobile"]
                                    },
                                    operation: 0,
                                    value: $state.fragmentInput5.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateMobile"] != null &&
                              typeof $steps["updateMobile"] === "object" &&
                              typeof $steps["updateMobile"].then === "function"
                            ) {
                              $steps["updateMobile"] = await $steps[
                                "updateMobile"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={
                          hasVariant($state, "stepscharg", "step1")
                            ? "\u0645\u0627\u0646\u0646\u062f: 0912345678"
                            : "\u0645\u0627\u0646\u0646\u062f: 09121234567"
                        }
                        type={"tel"}
                        value={generateStateValueProp($state, [
                          "fragmentInput5",
                          "value"
                        ])}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___57Idy, {
                          [sty.imgstepscharg_step1___57IdyQKzi3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          )
                        })}
                        displayHeight={
                          hasVariant($state, "stepscharg", "step1")
                            ? "35px"
                            : "auto"
                        }
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={
                          hasVariant($state, "stepscharg", "step1")
                            ? "35px"
                            : "auto"
                        }
                        loading={"lazy"}
                        src={
                          hasVariant($state, "stepscharg", "step1")
                            ? (() => {
                                try {
                                  return (() => {
                                    if ($state.operatorselect == -1)
                                      return "https://www.svgrepo.com/show/474990/sim-card.svg";
                                    else
                                      return $state.operators2[
                                        $state.operatorselect
                                      ].logoUrl;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : undefined
                        }
                      />
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step1")
                      ? (() => {
                          try {
                            return (
                              $state.idORcode == "bill_id" &&
                              ($state.type == "elec" ||
                                $state.type == "water" ||
                                $state.type == "gas" ||
                                $state.type == "other")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              $state.idORcode == "bill_id" &&
                              ($state.type == "elec" ||
                                $state.type == "water" ||
                                $state.type == "gas")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      data-plasmic-name={"billId"}
                      data-plasmic-override={overrides.billId}
                      className={classNames(projectcss.all, sty.billId, {
                        [sty.billIdstepscharg_step1]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.billIdstepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        )
                      })}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wuKnw,
                          {
                            [sty.textstepscharg_step1__wuKnwQKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.textstepscharg_step2__wuKnwAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3__wuKnwTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                          : hasVariant($state, "stepscharg", "step2")
                          ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          : "\u0634\u0646\u0627\u0633\u0647 \u0642\u0628\u0636 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
                      </div>
                      <Input
                        data-plasmic-name={"idinput"}
                        data-plasmic-override={overrides.idinput}
                        className={classNames("__wab_instance", sty.idinput, {
                          [sty.idinputstepscharg_step1]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          ),
                          [sty.idinputstepscharg_step2]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.idinputstepscharg_step3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        name={"idNumber"}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "idinput",
                            "value"
                          ]).apply(null, eventArgs);

                          (async value => {
                            const $steps = {};

                            $steps["updateId"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["id"]
                                    },
                                    operation: 0,
                                    value: $state.idinput.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateId"] != null &&
                              typeof $steps["updateId"] === "object" &&
                              typeof $steps["updateId"].then === "function"
                            ) {
                              $steps["updateId"] = await $steps["updateId"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={"\u0645\u0627\u0646\u0646\u062f: 12345678"}
                        type={"tel"}
                        value={generateStateValueProp($state, [
                          "idinput",
                          "value"
                        ])}
                      />
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step1")
                      ? (() => {
                          try {
                            return $state.type == "other";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.type == "other";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      data-plasmic-name={"billId3"}
                      data-plasmic-override={overrides.billId3}
                      className={classNames(projectcss.all, sty.billId3, {
                        [sty.billId3stepscharg_step1]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.billId3stepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        )
                      })}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5DeUq,
                          {
                            [sty.textstepscharg_step1___5DeUqQKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.textstepscharg_step2___5DeUqAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3___5DeUqTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step1")
                          ? "\u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                          : hasVariant($state, "stepscharg", "step3")
                          ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                          : hasVariant($state, "stepscharg", "step2")
                          ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          : "\u0634\u0646\u0627\u0633\u0647 \u0642\u0628\u0636 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
                      </div>
                      <Input
                        data-plasmic-name={"idinput3"}
                        data-plasmic-override={overrides.idinput3}
                        className={classNames("__wab_instance", sty.idinput3, {
                          [sty.idinput3stepscharg_step1]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          ),
                          [sty.idinput3stepscharg_step2]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.idinput3stepscharg_step3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        name={
                          hasVariant($state, "stepscharg", "step1")
                            ? "idPay"
                            : "idPay"
                        }
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "idinput3",
                            "value"
                          ]).apply(null, eventArgs);

                          (async value => {
                            const $steps = {};

                            $steps["updateIdinputValue"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["pardakhtid"]
                                    },
                                    operation: 0,
                                    value: $state.idinput3.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateIdinputValue"] != null &&
                              typeof $steps["updateIdinputValue"] ===
                                "object" &&
                              typeof $steps["updateIdinputValue"].then ===
                                "function"
                            ) {
                              $steps["updateIdinputValue"] = await $steps[
                                "updateIdinputValue"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={"\u0645\u0627\u0646\u0646\u062f: 12345678"}
                        type={"tel"}
                        value={generateStateValueProp($state, [
                          "idinput3",
                          "value"
                        ])}
                      />
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step1")
                      ? (() => {
                          try {
                            return $state.idORcode == "participate_code";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.idORcode == "participate_code";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      data-plasmic-name={"billId2"}
                      data-plasmic-override={overrides.billId2}
                      className={classNames(projectcss.all, sty.billId2, {
                        [sty.billId2stepscharg_step1]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.billId2stepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        )
                      })}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ecMmD,
                          {
                            [sty.textstepscharg_step1__ecMmDqKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.textstepscharg_step2__ecMmDAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3__ecMmDTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                          : hasVariant($state, "stepscharg", "step2")
                          ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          : "\u06a9\u062f \u0627\u0634\u062a\u0631\u0627\u06a9 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
                      </div>
                      <Input
                        data-plasmic-name={"idinput2"}
                        data-plasmic-override={overrides.idinput2}
                        className={classNames("__wab_instance", sty.idinput2, {
                          [sty.idinput2stepscharg_step1]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          ),
                          [sty.idinput2stepscharg_step2]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.idinput2stepscharg_step3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        name={``}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "idinput2",
                            "value"
                          ]).apply(null, eventArgs);

                          (async value => {
                            const $steps = {};

                            $steps["updateCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["code"]
                                    },
                                    operation: 0,
                                    value: $state.idinput2.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCode"] != null &&
                              typeof $steps["updateCode"] === "object" &&
                              typeof $steps["updateCode"].then === "function"
                            ) {
                              $steps["updateCode"] = await $steps["updateCode"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        placeholder={"\u0645\u0627\u0646\u0646\u062f: 12345678"}
                        type={"tel"}
                        value={generateStateValueProp($state, [
                          "idinput2",
                          "value"
                        ])}
                      />
                    </div>
                  ) : null}
                </Stack__>
                {(hasVariant($state, "stepscharg", "step2") ? true : false) ? (
                  <Input
                    data-plasmic-name={"fragmentInput2"}
                    data-plasmic-override={overrides.fragmentInput2}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentInput2,
                      {
                        [sty.fragmentInput2stepscharg_step1]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.fragmentInput2stepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.fragmentInput2stepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      }
                    )}
                    disabled={
                      hasVariant($state, "stepscharg", "step2") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "stepscharg", "step2")
                        ? (() => {
                            try {
                              return (
                                $state.typecharge == 1 ||
                                $state.operatorselect == 3
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput2",
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};

                        $steps["updateAmont"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["amont"]
                                },
                                operation: 0,
                                value: parseInt($state.fragmentInput2.value)
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAmont"] != null &&
                          typeof $steps["updateAmont"] === "object" &&
                          typeof $steps["updateAmont"].then === "function"
                        ) {
                          $steps["updateAmont"] = await $steps["updateAmont"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"\u062a\u0648\u0645\u0627\u0646"}
                    type={
                      hasVariant($state, "stepscharg", "step2")
                        ? "number"
                        : "number"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput2",
                      "value"
                    ])}
                  />
                ) : null}
              </Stack__>
              <div
                className={classNames(projectcss.all, sty.freeBox__i7Zny, {
                  [sty.freeBoxstepscharg_step2__i7ZnyAvykh]: hasVariant(
                    $state,
                    "stepscharg",
                    "step2"
                  ),
                  [sty.freeBoxstepscharg_step3__i7ZnyTqZTv]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rrNu,
                    {
                      [sty.textstepscharg_step2__rrNuAvykh]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      )
                    }
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0627\u067e\u0631\u0627\u062a\u0648\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                    : "\u0627\u067e\u0631\u0627\u062a\u0648\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"operators"}
                  data-plasmic-override={overrides.operators}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.operators, {
                    [sty.operatorsstepscharg_step2]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    )
                  })}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.operators2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const operatoritem = __plasmic_item_0;
                    const operatorIndex = __plasmic_idx_0;
                    return (() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.boxselect),
                        disable2: generateStateValueProp($state, [
                          "boxselect",
                          __plasmic_idx_0,
                          "disable2"
                        ]),
                        key: operatorIndex,
                        onClick: async event => {
                          const $steps = {};

                          $steps["runCode"] = !$state.boxselect[0].disable2
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      for (
                                        let i = 0;
                                        i < $state.boxselect.length;
                                        i++
                                      ) {
                                        $state.boxselect[i].select = false;
                                      }
                                      $state.boxselect[operatorIndex].select =
                                        true;
                                      $state.boxselect2[0].select = true;
                                      $state.operatorselect = operatorIndex;
                                      for (
                                        let i = 0;
                                        i < $state.boxselect2.length;
                                        i++
                                      ) {
                                        $state.boxselect2[i].select = false;
                                      }
                                      $state.boxselect2[0].select = true;
                                      return ($state.typecharge = 0);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        },
                        onDisable2Change: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "boxselect",
                            __plasmic_idx_0,
                            "disable2"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        onSelectChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "boxselect",
                            __plasmic_idx_0,
                            "select"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        select: generateStateValueProp($state, [
                          "boxselect",
                          __plasmic_idx_0,
                          "select"
                        ])
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "boxselect[].select",
                            initFunc: ({ $props, $state, $queries }) =>
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? false
                                : false
                          },
                          {
                            name: "boxselect[].disable2",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return $state.idinput.value.length != 11;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <Boxselect
                          data-plasmic-name={"boxselect"}
                          data-plasmic-override={overrides.boxselect}
                          {...child$Props}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__d8XkB, {
                              [sty.imgstepscharg_step3__d8XkBTqZTv]: hasVariant(
                                $state,
                                "stepscharg",
                                "step3"
                              )
                            })}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "50px"
                                : "60px"
                            }
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={(() => {
                              try {
                                return operatoritem.logoUrl;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </Boxselect>
                      );
                    })();
                  })}
                </Stack__>
              </div>
              {(hasVariant($state, "stepscharg", "step2") ? true : false) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__e9MOi, {
                    [sty.freeBoxstepscharg_step2__e9MOiAvykh]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.freeBoxstepscharg_step3__e9MOiTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__riyhU,
                      {
                        [sty.textstepscharg_step2__riyhUAvykh]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.textstepscharg_step3__riyhUTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "stepscharg", "step3")
                      ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                      : hasVariant($state, "stepscharg", "step2")
                      ? "\u0645\u0628\u0644\u063a \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u06cc (\u062a\u0648\u0645\u0627\u0646)"
                      : ""}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"operators3"}
                    data-plasmic-override={overrides.operators3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.operators3, {
                      [sty.operators3stepscharg_step2]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.operators3stepscharg_step3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.operators2[$state.operatorselect]
                            .services[$state.typecharge].chargeAmounts;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const amonttem = __plasmic_item_0;
                      const amontIndex = __plasmic_idx_0;
                      return (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.boxselect3,
                            {
                              [sty.boxselect3stepscharg_step2]: hasVariant(
                                $state,
                                "stepscharg",
                                "step2"
                              ),
                              [sty.boxselect3stepscharg_step3]: hasVariant(
                                $state,
                                "stepscharg",
                                "step3"
                              )
                            }
                          ),
                          disable2: generateStateValueProp($state, [
                            "boxselect3",
                            __plasmic_idx_0,
                            "disable2"
                          ]),
                          key: amontIndex,
                          onClick: async event => {
                            const $steps = {};

                            $steps["runCode"] = !$state.boxselect3[0].disable2
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        for (
                                          let i = 0;
                                          i < $state.boxselect3.length;
                                          i++
                                        ) {
                                          $state.boxselect3[i].select = false;
                                        }
                                        $state.boxselect3[amontIndex].select =
                                          true;
                                        $state.amont = amonttem;
                                        return ($state.fragmentInput2.value =
                                          amonttem);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          },
                          onDisable2Change: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "boxselect3",
                              __plasmic_idx_0,
                              "disable2"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onSelectChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "boxselect3",
                              __plasmic_idx_0,
                              "select"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          select: generateStateValueProp($state, [
                            "boxselect3",
                            __plasmic_idx_0,
                            "select"
                          ])
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "boxselect3[].select",
                              initFunc: ({ $props, $state, $queries }) =>
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? false
                                  : false
                            },
                            {
                              name: "boxselect3[].disable2",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return $state.idinput.value.length != 11;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Boxselect
                            data-plasmic-name={"boxselect3"}
                            data-plasmic-override={overrides.boxselect3}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pw8Om,
                                {
                                  [sty.freeBoxstepscharg_step2__pw8OmAvykh]:
                                    hasVariant($state, "stepscharg", "step2")
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___05Xh4,
                                  {
                                    [sty.textstepscharg_step2___05Xh4Avykh]:
                                      hasVariant($state, "stepscharg", "step2")
                                  }
                                )}
                              >
                                {hasVariant($state, "stepscharg", "step2") ? (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          amonttem.toLocaleString("en-US") +
                                          " تومان"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return amonttem.toLocaleString("en-US");
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                )}
                              </div>
                            </div>
                          </Boxselect>
                        );
                      })();
                    })}
                  </Stack__>
                </div>
              ) : null}
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jipZs, {
                  [sty.freeBoxstepscharg_step1__jipZsqKzi3]: hasVariant(
                    $state,
                    "stepscharg",
                    "step1"
                  ),
                  [sty.freeBoxstepscharg_step2__jipZsAvykh]: hasVariant(
                    $state,
                    "stepscharg",
                    "step2"
                  ),
                  [sty.freeBoxstepscharg_step3__jipZsTqZTv]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                {(
                  hasVariant($state, "stepscharg", "step3")
                    ? (() => {
                        try {
                          return !$state.disable;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nwPxR, {
                      [sty.freeBoxstepscharg_step3__nwPxRTqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateDisable"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["disable"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDisable"] != null &&
                        typeof $steps["updateDisable"] === "object" &&
                        typeof $steps["updateDisable"].then === "function"
                      ) {
                        $steps["updateDisable"] = await $steps["updateDisable"];
                      }

                      $steps["updateUuid"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["uuid"]
                              },
                              operation: 0,
                              value: $$.uuid.v4().replace(/[^0-9]/g, "")
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUuid"] != null &&
                        typeof $steps["updateUuid"] === "object" &&
                        typeof $steps["updateUuid"].then === "function"
                      ) {
                        $steps["updateUuid"] = await $steps["updateUuid"];
                      }

                      $steps["invokeGlobalAction4"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.babarkat.com/webhook/Babarkat/transaction",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      type: "bill_payment",
                                      otherData: {
                                        billId: $state.data.bill_id,
                                        payId: $state.data.pay_id,
                                        type: $state.data.type_en || $state.type
                                      },
                                      mobile: $state.number,
                                      price: $state.data.amount,
                                      origin:
                                        "bill_" +
                                        ($state.data.type_en || $state.type),
                                      originId: $state.uuid + "",
                                      priceType: "toman",
                                      userToken: $state.token
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction4"] != null &&
                        typeof $steps["invokeGlobalAction4"] === "object" &&
                        typeof $steps["invokeGlobalAction4"].then === "function"
                      ) {
                        $steps["invokeGlobalAction4"] = await $steps[
                          "invokeGlobalAction4"
                        ];
                      }

                      $steps["updatePardakhtid"] =
                        $steps.invokeGlobalAction4?.data[0]?.success == true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["pardakhtid"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction4.data[0].id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updatePardakhtid"] != null &&
                        typeof $steps["updatePardakhtid"] === "object" &&
                        typeof $steps["updatePardakhtid"].then === "function"
                      ) {
                        $steps["updatePardakhtid"] = await $steps[
                          "updatePardakhtid"
                        ];
                      }

                      $steps["invokeGlobalAction"] =
                        $steps.invokeGlobalAction4?.data[0]?.success == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PUT",
                                  "https://n8n.babarkat.com/webhook/babarkat/bill",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        method: "bill",
                                        bill_id: $state.data.bill_id,
                                        pay_id: $state.data.pay_id,
                                        mobile: $state.mobile,
                                        order_id: $state.uuid,
                                        pay_type: "credit"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateInfopardakt"] = (
                        $steps.invokeGlobalAction?.data ? true : false
                      )
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["infopardakt"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateInfopardakt"] != null &&
                        typeof $steps["updateInfopardakt"] === "object" &&
                        typeof $steps["updateInfopardakt"].then === "function"
                      ) {
                        $steps["updateInfopardakt"] = await $steps[
                          "updateInfopardakt"
                        ];
                      }

                      $steps["invokeGlobalAction5"] =
                        $steps.invokeGlobalAction4?.data[0]?.success == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PUT",
                                  "https://n8n.babarkat.com/webhook/Babarkat/transaction",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        id: $state.pardakhtid,
                                        trackingId:
                                          $state.infopardakt?.code == 1
                                            ? $state.infopardakt.ref_code
                                            : -1,
                                        userToken: $state.token
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction5"] != null &&
                        typeof $steps["invokeGlobalAction5"] === "object" &&
                        typeof $steps["invokeGlobalAction5"].then === "function"
                      ) {
                        $steps["invokeGlobalAction5"] = await $steps[
                          "invokeGlobalAction5"
                        ];
                      }

                      $steps["updateModal2Open"] = (
                        $state.infopardakt?.code
                          ? $state.infopardakt?.code == 1
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal2", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModal2Open"] != null &&
                        typeof $steps["updateModal2Open"] === "object" &&
                        typeof $steps["updateModal2Open"].then === "function"
                      ) {
                        $steps["updateModal2Open"] = await $steps[
                          "updateModal2Open"
                        ];
                      }

                      $steps["invokeGlobalAction3"] = (
                        $state.infopardakt?.code
                          ? $state.infopardakt?.code != 1
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return $state.infopardakt.msg
                                      ? $state.infopardakt.msg
                                      : "مشکلی رخ داده است مجدد تلاش کنید.";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "top-left",
                                5000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["updateError"] =
                        $steps.invokeGlobalAction4?.data[0]?.success == false &&
                        $steps.invokeGlobalAction4?.data[0]?.message
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["error"]
                                },
                                operation: 0,
                                value:
                                  $steps.invokeGlobalAction4?.data[0].message
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateError"] != null &&
                        typeof $steps["updateError"] === "object" &&
                        typeof $steps["updateError"].then === "function"
                      ) {
                        $steps["updateError"] = await $steps["updateError"];
                      }

                      $steps["invokeGlobalAction6"] =
                        $steps.invokeGlobalAction4?.data[0]?.success == false &&
                        $steps.invokeGlobalAction4?.data[0]?.message
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($state.error.includes("صراف")) {
                                          return ($state.error =
                                            $state.error.replace(
                                              "صراف",
                                              "امانتدار"
                                            ));
                                        } else return $state.error;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction6"] != null &&
                        typeof $steps["invokeGlobalAction6"] === "object" &&
                        typeof $steps["invokeGlobalAction6"].then === "function"
                      ) {
                        $steps["invokeGlobalAction6"] = await $steps[
                          "invokeGlobalAction6"
                        ];
                      }

                      $steps["updateDisable2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["disable"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDisable2"] != null &&
                        typeof $steps["updateDisable2"] === "object" &&
                        typeof $steps["updateDisable2"].then === "function"
                      ) {
                        $steps["updateDisable2"] = await $steps[
                          "updateDisable2"
                        ];
                      }
                    }}
                  >
                    <Group4SvgIcon
                      className={classNames(projectcss.all, sty.svg__ah7QR, {
                        [sty.svgstepscharg_step3__ah7QRTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__g2MR, {
                        [sty.imgstepscharg_step3__g2MRTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/babarkat/images/image6.svg",
                        fullWidth: 58,
                        fullHeight: 62,
                        aspectRatio: 0.935484
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__nrhnT,
                        {
                          [sty.freeBoxstepscharg_step3__nrhnTTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sVxBl,
                          {
                            [sty.textstepscharg_step3__sVxBlTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                          : "Enter some text"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j5Hde,
                          {
                            [sty.textstepscharg_step2__j5HdeAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3__j5HdeTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "موجودی :" +
                                  parseInt(
                                    $state.mojody.toFixed(0)
                                  ).toLocaleString() +
                                  " تومان "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0648\u062c\u0648\u062f\u06cc : 150000 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "Enter some text"
                        )}
                      </div>
                    </div>
                    <Group7SvgIcon
                      className={classNames(projectcss.all, sty.svg__owa0Y, {
                        [sty.svgstepscharg_step3__owa0YTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />
                  </div>
                ) : null}
                {(
                  hasVariant($state, "stepscharg", "step3")
                    ? (() => {
                        try {
                          return $state.disable;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : false
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bWutK, {
                      [sty.freeBoxstepscharg_step3__bWutKTqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};
                    }}
                  >
                    <Group4SvgIcon
                      className={classNames(projectcss.all, sty.svg__sKdZf, {
                        [sty.svgstepscharg_step3__sKdZfTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__v1Auz, {
                        [sty.imgstepscharg_step3__v1AuzTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/babarkat/images/image6.svg",
                        fullWidth: 58,
                        fullHeight: 62,
                        aspectRatio: 0.935484
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__wtxJh,
                        {
                          [sty.freeBoxstepscharg_step3__wtxJhTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8DpNg,
                          {
                            [sty.textstepscharg_step3___8DpNgTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                          : "Enter some text"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jib07,
                          {
                            [sty.textstepscharg_step2__jib07Avykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3__jib07TqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return "موجودی :" + $state.mojody + " تومان ";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0648\u062c\u0648\u062f\u06cc : 150000 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          "Enter some text"
                        )}
                      </div>
                    </div>
                    <Group7SvgIcon
                      className={classNames(projectcss.all, sty.svg__mh5Dm, {
                        [sty.svgstepscharg_step3__mh5DmTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__e4WiS,
                        {
                          [sty.freeBoxstepscharg_step3__e4WiSTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__fSVaq, {
                          [sty.svgstepscharg_step3__fSVaqTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />
                    </div>
                  </div>
                ) : null}
              </Stack__>
              {(
                hasVariant($state, "stepscharg", "step1")
                  ? true
                  : hasVariant($state, "stepscharg", "step3")
                  ? true
                  : hasVariant($state, "stepscharg", "step2")
                  ? true
                  : (() => {
                      try {
                        return $state.billsdata?.length == 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"nobill"}
                  data-plasmic-override={overrides.nobill}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.nobill, {
                    [sty.nobillstepscharg_step1]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.nobillstepscharg_step2]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.nobillstepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___6RNoo, {
                      [sty.imgstepscharg_step1___6RNooQKzi3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step1"
                      )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/babarkat/images/image12.png",
                      fullWidth: 450,
                      fullHeight: 450,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eDrsD,
                      {
                        [sty.textstepscharg_step1__eDrsDqKzi3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        )
                      }
                    )}
                  >
                    {
                      "\u0642\u0628\u0636\u06cc \u0646\u062f\u0627\u0634\u062a\u06cc\u062f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rkOf7
                    )}
                  >
                    {
                      "\u0627\u0648\u0644\u06cc\u0646 \u0642\u0628\u0636 \u062e\u0648\u062f \u0631\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u06a9\u0646\u06cc\u062f"
                    }
                  </div>
                </Stack__>
              ) : null}
              {(
                hasVariant($state, "stepscharg", "step1")
                  ? true
                  : hasVariant($state, "stepscharg", "step3")
                  ? true
                  : hasVariant($state, "stepscharg", "step2")
                  ? true
                  : (() => {
                      try {
                        return $state.billsdata?.length > 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"bills"}
                  data-plasmic-override={overrides.bills}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.bills, {
                    [sty.billsstepscharg_step1]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.billsstepscharg_step2]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.billsstepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2FL0
                    )}
                  >
                    {
                      "\u0642\u0628\u0636 \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                    }
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.billsdata;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nQaQ,
                          {
                            [sty.freeBoxstepscharg_step1__nQaQqKzi3]:
                              hasVariant($state, "stepscharg", "step1"),
                            [sty.freeBoxstepscharg_step2__nQaQAvykh]:
                              hasVariant($state, "stepscharg", "step2"),
                            [sty.freeBoxstepscharg_step3__nQaQTqZTv]:
                              hasVariant($state, "stepscharg", "step3")
                          }
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};
                        }}
                      >
                        <Embed
                          className={classNames(
                            "__wab_instance",
                            sty.embedHtml___0Z3P,
                            {
                              [sty.embedHtmlstepscharg_step1___0Z3PQKzi3]:
                                hasVariant($state, "stepscharg", "step1")
                            }
                          )}
                          code={(() => {
                            try {
                              return (() => {
                                if (currentItem.type == "other")
                                  return $state.types.find(
                                    item => item.type == currentItem.type_en
                                  ).icon;
                                else if (currentItem.type != "mobile")
                                  return $state.types.find(
                                    item => item.type == currentItem.type
                                  ).icon;
                                else
                                  return $state.operators2[
                                    currentItem.operatorselect
                                  ].icon;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "<div>Paste your embed code via the right sidebar</div>";
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2IEOv
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        $state.name = currentItem.name;
                                        $state.id = currentItem.billId;
                                        $state.pardakhtid = currentItem.payID;
                                        $state.code = currentItem.code;
                                        $state.idORcode = currentItem.idORcode;
                                        $state.mobile = currentItem.mobile;
                                        $state.operatorselect =
                                          currentItem.operatorselect;
                                        $state.phone = currentItem.phone;
                                        return ($state.type = currentItem.type);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["updateStepscharg"] = true
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: "stepscharg",
                                    operation: 0,
                                    value: "step1"
                                  };
                                  return (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }

                                    $stateSet($state, vgroup, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateStepscharg"] != null &&
                              typeof $steps["updateStepscharg"] === "object" &&
                              typeof $steps["updateStepscharg"].then ===
                                "function"
                            ) {
                              $steps["updateStepscharg"] = await $steps[
                                "updateStepscharg"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9ZOyA
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    if (currentItem.type == "other")
                                      return (
                                        currentItem.name ||
                                        $state.types.find(
                                          item =>
                                            item.type === currentItem.type_en
                                        ).name
                                      );
                                    else if (currentItem.type !== "mobile")
                                      return (
                                        currentItem.name ||
                                        $state.types.find(
                                          item => item.type === currentItem.type
                                        ).name
                                      );
                                    else
                                      return (
                                        currentItem.name ||
                                        $state.operators2[
                                          currentItem.operatorselect
                                        ].description
                                      );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0642\u0628\u0636 \u062e\u0627\u0646\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ke3Ex
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    switch (currentItem.type) {
                                      case "mobile":
                                        return currentItem.mobile;
                                      case "phone":
                                        return currentItem.phone;
                                      case "gaz":
                                        return currentItem.idORcode == "bill_id"
                                          ? currentItem.billId
                                          : currentItem.code;
                                      default:
                                        return currentItem.billId;
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "09228951264";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        {(() => {
                          const child$Props = {
                            arrow: true,
                            className: classNames(
                              "__wab_instance",
                              sty.popover
                            ),
                            color: "#101729",
                            content: (
                              <React.Fragment>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.button3
                                    ),
                                    color: "clear",
                                    loadingviow: generateStateValueProp(
                                      $state,
                                      [
                                        "button3",
                                        __plasmic_idx_0,
                                        "loadingviow"
                                      ]
                                    ),
                                    onClick: async event => {
                                      const $steps = {};

                                      $steps["updateSelectBill"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["selectBill"]
                                              },
                                              operation: 0,
                                              value: {
                                                data: currentItem,
                                                id: currentIndex
                                              }
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateSelectBill"] != null &&
                                        typeof $steps["updateSelectBill"] ===
                                          "object" &&
                                        typeof $steps["updateSelectBill"]
                                          .then === "function"
                                      ) {
                                        $steps["updateSelectBill"] =
                                          await $steps["updateSelectBill"];
                                      }

                                      $steps["updateExitModalOpen"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "exitModal",
                                                  "open"
                                                ]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateExitModalOpen"] != null &&
                                        typeof $steps["updateExitModalOpen"] ===
                                          "object" &&
                                        typeof $steps["updateExitModalOpen"]
                                          .then === "function"
                                      ) {
                                        $steps["updateExitModalOpen"] =
                                          await $steps["updateExitModalOpen"];
                                      }

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return (() => {
                                                  return ($state.popover[
                                                    currentIndex
                                                  ].open = false);
                                                })();
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] = await $steps[
                                          "runCode"
                                        ];
                                      }
                                    },
                                    onLoadingviowChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "button3",
                                          __plasmic_idx_0,
                                          "loadingviow"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    showStartIcon: true,
                                    size: "compact",
                                    startIcon: (
                                      <Icon110Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__g3X3Q
                                        )}
                                        role={"img"}
                                      />
                                    )
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "button3[].loadingviow",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return $state.loadingviow;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Button
                                      data-plasmic-name={"button3"}
                                      data-plasmic-override={overrides.button3}
                                      {...child$Props}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__lMfJh
                                        )}
                                      >
                                        {"\u062d\u0630\u0641   "}
                                      </div>
                                    </Button>
                                  );
                                })()}
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.button4
                                    ),
                                    color: "clear",
                                    loadingviow: generateStateValueProp(
                                      $state,
                                      [
                                        "button4",
                                        __plasmic_idx_0,
                                        "loadingviow"
                                      ]
                                    ),
                                    onLoadingviowChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "button4",
                                          __plasmic_idx_0,
                                          "loadingviow"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    showStartIcon: true,
                                    size: "compact",
                                    startIcon: (
                                      <Icon111Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__tRuSm
                                        )}
                                        role={"img"}
                                      />
                                    )
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "button4[].loadingviow",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return $state.loadingviow;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <Button
                                      data-plasmic-name={"button4"}
                                      data-plasmic-override={overrides.button4}
                                      {...child$Props}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___9QhJb
                                        )}
                                      >
                                        {"\u0648\u06cc\u0631\u0627\u06cc\u0634"}
                                      </div>
                                    </Button>
                                  );
                                })()}
                              </React.Fragment>
                            ),
                            contentText: "Popover contents",
                            defaultOpen: false,
                            defaultStylesClassName: classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            ),
                            mouseEnterDelay: 0,
                            mouseLeaveDelay: 0,
                            onOpenChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "popover",
                                __plasmic_idx_0,
                                "open"
                              ]).apply(null, eventArgs);
                            },
                            open: generateStateValueProp($state, [
                              "popover",
                              __plasmic_idx_0,
                              "open"
                            ]),
                            placement: "bottom",
                            popoverScopeClassName: sty["popover__popover"],
                            title: null,
                            trigger: "click"
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "open",
                                plasmicStateName: "popover[].open"
                              }
                            ],
                            [__plasmic_idx_0],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "popover[].open",
                                initFunc: ({ $props, $state, $queries }) =>
                                  false
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdPopover
                              data-plasmic-name={"popover"}
                              data-plasmic-override={overrides.popover}
                              {...child$Props}
                            >
                              <Icon109Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__a7Rhy
                                )}
                                role={"img"}
                              />
                            </AntdPopover>
                          );
                        })()}
                        <Icon108Icon
                          className={classNames(projectcss.all, sty.svg__i1Sz)}
                          role={"img"}
                        />
                      </Stack__>
                    );
                  })}
                </Stack__>
              ) : null}
            </Reveal>
            <section className={classNames(projectcss.all, sty.section__bZv3S)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0UoW, {
                  [sty.freeBoxstepscharg_step1___0UoWQKzi3]: hasVariant(
                    $state,
                    "stepscharg",
                    "step1"
                  ),
                  [sty.freeBoxstepscharg_step2___0UoWAvykh]: hasVariant(
                    $state,
                    "stepscharg",
                    "step2"
                  ),
                  [sty.freeBoxstepscharg_step3___0UoWTqZTv]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                {(
                  hasVariant($state, "stepscharg", "step3")
                    ? true
                    : hasVariant($state, "stepscharg", "step2")
                    ? true
                    : hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <Button
                    data-plasmic-name={"backstep3"}
                    data-plasmic-override={overrides.backstep3}
                    className={classNames("__wab_instance", sty.backstep3, {
                      [sty.backstep3stepscharg_step1]: hasVariant(
                        $state,
                        "stepscharg",
                        "step1"
                      ),
                      [sty.backstep3stepscharg_step2]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.backstep3stepscharg_step3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    color={
                      hasVariant($state, "stepscharg", "step2")
                        ? "softGreen"
                        : "softGreen"
                    }
                    loadingviow={generateStateValueProp($state, [
                      "backstep3",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateUnnamedVariant2"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "stepscharg",
                              operation: 0,
                              value: "step1"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUnnamedVariant2"] != null &&
                        typeof $steps["updateUnnamedVariant2"] === "object" &&
                        typeof $steps["updateUnnamedVariant2"].then ===
                          "function"
                      ) {
                        $steps["updateUnnamedVariant2"] = await $steps[
                          "updateUnnamedVariant2"
                        ];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "backstep3",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ujQjf,
                        {
                          [sty.textstepscharg_step2__ujQjfAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "stepscharg", "step2")
                        ? "\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"
                        : "\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"}
                    </div>
                  </Button>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hztXs, {
                    [sty.freeBoxstepscharg_step1__hztXsQKzi3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.freeBoxstepscharg_step3__hztXsTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "stepscharg", "step1")
                      ? (() => {
                          try {
                            return (() => {})();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "stepscharg", "step3")
                      ? true
                      : hasVariant($state, "stepscharg", "step2")
                      ? true
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : (() => {
                          try {
                            return (() => {})();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <Button
                      data-plasmic-name={"step1Next2"}
                      data-plasmic-override={overrides.step1Next2}
                      className={classNames("__wab_instance", sty.step1Next2, {
                        [sty.step1Next2stepscharg_step1]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.step1Next2stepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.step1Next2stepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      color={
                        hasVariant($state, "stepscharg", "step1")
                          ? "clear"
                          : "softGreen"
                      }
                      loadingviow={generateStateValueProp($state, [
                        "step1Next2",
                        "loadingviow"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.document
                                    .getElementById("imageInput")
                                    .click();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      onLoadingviowChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "step1Next2",
                            "loadingviow"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      showStartIcon={
                        hasVariant($state, "stepscharg", "step1")
                          ? undefined
                          : true
                      }
                      startIcon={null}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oJz02,
                          {
                            [sty.freeBoxstepscharg_step1__oJz02QKzi3]:
                              hasVariant($state, "stepscharg", "step1")
                          }
                        )}
                      >
                        <Icon95Icon
                          className={classNames(projectcss.all, sty.svg__zOhx, {
                            [sty.svgstepscharg_step1__zOhxQKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            )
                          })}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5OyPr,
                            {
                              [sty.textstepscharg_step1___5OyPrQKzi3]:
                                hasVariant($state, "stepscharg", "step1")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step1")
                            ? "\u0628\u0627\u0631\u06a9\u062f \u062e\u0648\u0627\u0646"
                            : "\u0627\u0633\u06a9\u0646 \u0628\u0627\u0631\u06a9\u062f \u0642\u0628\u0636"}
                        </div>
                      </div>
                    </Button>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jBkqJ,
                      {
                        [sty.textstepscharg_step1__jBkqJqKzi3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        )
                      }
                    )}
                    id={"barcode_error"}
                    {...{ "id ": "barcode_error" }}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u0646\u062a\u0648\u0627\u0646\u0633\u062a\u06cc\u0645 \u0634\u0646\u0627\u0633\u0647 \u0642\u0628\u0636 \u0631\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0646\u06cc\u0645.",
                                undefined,
                                5,
                                "bottom"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                  >
                    {""}
                  </div>
                  {(
                    hasVariant($state, "stepscharg", "step1") ? true : false
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bE0T7,
                        {
                          [sty.textstepscharg_step1__bE0T7QKzi3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          )
                        }
                      )}
                      id={"loadingImage"}
                      {...{ "id ": "loadingImage" }}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadingLoad"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading", "load"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadingLoad"] != null &&
                          typeof $steps["updateLoadingLoad"] === "object" &&
                          typeof $steps["updateLoadingLoad"].then === "function"
                        ) {
                          $steps["updateLoadingLoad"] = await $steps[
                            "updateLoadingLoad"
                          ];
                        }
                      }}
                    >
                      {""}
                    </div>
                  ) : null}
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__e9RnO, {
                      [sty.freeBoxstepscharg_step1__e9RnOqKzi3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step1"
                      )
                    })}
                  >
                    <Button
                      data-plasmic-name={"step1Next"}
                      data-plasmic-override={overrides.step1Next}
                      className={classNames("__wab_instance", sty.step1Next, {
                        [sty.step1Nextstepscharg_step1]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.step1Nextstepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.step1Nextstepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      color={"green"}
                      loadingviow={generateStateValueProp($state, [
                        "step1Next",
                        "loadingviow"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateData"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["data"]
                                },
                                operation: 0,
                                value: {}
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateData"] != null &&
                          typeof $steps["updateData"] === "object" &&
                          typeof $steps["updateData"].then === "function"
                        ) {
                          $steps["updateData"] = await $steps["updateData"];
                        }

                        $steps["updateStep1NextLoadingviow"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step1Next", "loadingviow"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep1NextLoadingviow"] != null &&
                          typeof $steps["updateStep1NextLoadingviow"] ===
                            "object" &&
                          typeof $steps["updateStep1NextLoadingviow"].then ===
                            "function"
                        ) {
                          $steps["updateStep1NextLoadingviow"] = await $steps[
                            "updateStep1NextLoadingviow"
                          ];
                        }

                        $steps["updateIdinputValue2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["uuid"]
                                },
                                operation: 0,
                                value: $$.uuid
                                  .v4()
                                  .replace(/[^0-9]/g, "")
                                  .slice(0, 10)
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateIdinputValue2"] != null &&
                          typeof $steps["updateIdinputValue2"] === "object" &&
                          typeof $steps["updateIdinputValue2"].then ===
                            "function"
                        ) {
                          $steps["updateIdinputValue2"] = await $steps[
                            "updateIdinputValue2"
                          ];
                        }

                        $steps["updateId"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["id"]
                                },
                                operation: 0,
                                value: parseInt(
                                  window.document.getElementsByName(
                                    "idNumber"
                                  )[0]?.value || 0
                                )
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateId"] != null &&
                          typeof $steps["updateId"] === "object" &&
                          typeof $steps["updateId"].then === "function"
                        ) {
                          $steps["updateId"] = await $steps["updateId"];
                        }

                        $steps["updateNumber"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["number"]
                                },
                                operation: 0,
                                value: $state.fragmentInput5.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateNumber"] != null &&
                          typeof $steps["updateNumber"] === "object" &&
                          typeof $steps["updateNumber"].then === "function"
                        ) {
                          $steps["updateNumber"] = await $steps["updateNumber"];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    switch ($state.type) {
                                      case "mobile":
                                        if (
                                          !/^09\d{9}$/.test(
                                            $state.fragmentInput5.value
                                          )
                                        ) {
                                          $state.buttonHasError = true;
                                        }
                                        if ($state.operatorselect == -1)
                                          $state.buttonHasError = true;
                                        if ($state.operatorselect == 2)
                                          $state.buttonHasError = true;
                                        break;
                                      case "phone":
                                        if (
                                          !/^0[1-9]\d{9}$/.test(
                                            $state.fragmentInput4.value
                                          )
                                        ) {
                                          $state.buttonHasError = true;
                                        }
                                        break;
                                      case "elec":
                                      case "water":
                                        if (!/^\d+$/.test($state.id)) {
                                          $state.buttonHasError = true;
                                        }
                                        break;
                                      case "gas":
                                        if (
                                          !/^\d+$/.test($state.id) &&
                                          $state.idORcode == "bill_id"
                                        ) {
                                          $state.buttonHasError = true;
                                        }
                                        if (
                                          $state.idinput3.value.length == 0 &&
                                          $state.idORcode == "participate_code"
                                        ) {
                                          $state.buttonHasError = true;
                                        }
                                        break;
                                      case "other":
                                        if (
                                          !/^\d+$/.test($state.id) &&
                                          !/^\d+$/.test($state.pardakhtid)
                                        ) {
                                          $state.buttonHasError = true;
                                        }
                                        break;
                                    }
                                    if ($state.type != "mobile")
                                      return ($state.mobile =
                                        $state.userinfo.mobile);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["invokeGlobalAction"] = false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0634\u0646\u0627\u0633\u0647 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0645\u0639\u062a\u0628\u0631 \u0646\u06cc\u0633\u062a.",
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["inquiry"] =
                          $state.type == "other" &&
                          $state.buttonHasError == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.babarkat.com/webhook/babarkat/bill",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          bill_id: $state.id,
                                          pay_id: $state.pardakhtid
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["inquiry"] != null &&
                          typeof $steps["inquiry"] === "object" &&
                          typeof $steps["inquiry"].then === "function"
                        ) {
                          $steps["inquiry"] = await $steps["inquiry"];
                        }

                        $steps["inquiry1"] =
                          $state.type != "other" &&
                          $state.buttonHasError == false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "GET",
                                    "https://n8n.babarkat.com/webhook/babarkat/bill",
                                    (() => {
                                      try {
                                        return {
                                          data: {
                                            method: "inquiry_bill",
                                            username:
                                              "c6657e0531cbd431fd2d803784498946",
                                            password: "ashabehr2012",
                                            bill_type: $state.type,
                                            mobile: $state.mobile,
                                            operator:
                                              $state.operators2[
                                                $state.operatorselect
                                              ]?.name || "",
                                            phone: $state.phone,
                                            bill_id: $state.id,
                                            participate_code: $state.id,
                                            order_id: $state.uuid
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["inquiry1"] != null &&
                          typeof $steps["inquiry1"] === "object" &&
                          typeof $steps["inquiry1"].then === "function"
                        ) {
                          $steps["inquiry1"] = await $steps["inquiry1"];
                        }

                        $steps["updateIdinputValue3"] = (
                          $steps.inquiry?.data
                            ? true
                            : false || $steps.inquiry1?.data
                            ? true
                            : false
                        )
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["data"]
                                },
                                operation: 0,
                                value:
                                  $steps.inquiry?.data || $steps.inquiry1?.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateIdinputValue3"] != null &&
                          typeof $steps["updateIdinputValue3"] === "object" &&
                          typeof $steps["updateIdinputValue3"].then ===
                            "function"
                        ) {
                          $steps["updateIdinputValue3"] = await $steps[
                            "updateIdinputValue3"
                          ];
                        }

                        $steps["updateStepscharg"] =
                          Object.keys($state.data).length != 0 &&
                          $state.data.code == 1
                            ? (() => {
                                const actionArgs = {
                                  vgroup: "stepscharg",
                                  operation: 0,
                                  value: "step3"
                                };
                                return (({ vgroup, value }) => {
                                  if (typeof value === "string") {
                                    value = [value];
                                  }

                                  $stateSet($state, vgroup, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateStepscharg"] != null &&
                          typeof $steps["updateStepscharg"] === "object" &&
                          typeof $steps["updateStepscharg"].then === "function"
                        ) {
                          $steps["updateStepscharg"] = await $steps[
                            "updateStepscharg"
                          ];
                        }

                        $steps["invokeGlobalAction2"] =
                          Object.keys($state.data).length === 0 ||
                          $state.data?.code != 1
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    (() => {
                                      try {
                                        return $state.data.msg;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    "top-left"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["updateStep1NextLoadingviow2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["step1Next", "loadingviow"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStep1NextLoadingviow2"] != null &&
                          typeof $steps["updateStep1NextLoadingviow2"] ===
                            "object" &&
                          typeof $steps["updateStep1NextLoadingviow2"].then ===
                            "function"
                        ) {
                          $steps["updateStep1NextLoadingviow2"] = await $steps[
                            "updateStep1NextLoadingviow2"
                          ];
                        }

                        $steps["updateIdinputValue4"] =
                          Object.keys($state.data).length != 0 &&
                          $state.data.code == 1
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      let bills =
                                        JSON.parse(
                                          window.localStorage.getItem("bills")
                                        ) || [];
                                      const exists = bills.some(b => {
                                        if ($state.type === "mobile")
                                          return b.mobile === $state.mobile;
                                        if ($state.type === "phone")
                                          return b.phone === $state.phone;
                                        if (
                                          $state.type === "elec" ||
                                          $state.type === "water"
                                        )
                                          return (
                                            b.billId === $state.id &&
                                            b.type === $state.type
                                          );
                                        if ($state.type === "gas") {
                                          if ($state.idORcode === "bill_id") {
                                            return (
                                              b.billId === $state.id &&
                                              b.type === "gas"
                                            );
                                          } else if (
                                            $state.idORcode ===
                                            "participate_code"
                                          ) {
                                            return (
                                              b.billId === $state.code &&
                                              b.type === "gas"
                                            );
                                          }
                                        }
                                        if ($state.type === "other")
                                          return (
                                            b.billId === $state.id &&
                                            b.payID === $state.pardakhtid
                                          );
                                        return false;
                                      });
                                      if (!exists) {
                                        bills.push({
                                          name: $state.name,
                                          type: $state.type,
                                          billId: $state.id,
                                          type_en:
                                            $steps.inquiry?.data?.type_en || "",
                                          payID: $state.pardakhtid,
                                          code: $state.code || "",
                                          mobile: $state.mobile || "",
                                          phone: $state.phone || "",
                                          idORcode: $state.idORcode,
                                          operatorselect: $state.operatorselect
                                        });
                                        return window.localStorage.setItem(
                                          "bills",
                                          JSON.stringify(bills)
                                        );
                                      }
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateIdinputValue4"] != null &&
                          typeof $steps["updateIdinputValue4"] === "object" &&
                          typeof $steps["updateIdinputValue4"].then ===
                            "function"
                        ) {
                          $steps["updateIdinputValue4"] = await $steps[
                            "updateIdinputValue4"
                          ];
                        }
                      }}
                      onLoadingviowChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "step1Next",
                            "loadingviow"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___34Uvn,
                          {
                            [sty.textstepscharg_step1___34UvnQKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            )
                          }
                        )}
                      >
                        {"\u0627\u062f\u0627\u0645\u0647"}
                      </div>
                    </Button>
                    <Button
                      data-plasmic-name={"backstep2"}
                      data-plasmic-override={overrides.backstep2}
                      className={classNames("__wab_instance", sty.backstep2, {
                        [sty.backstep2stepscharg_step1]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.backstep2stepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.backstep2stepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      color={
                        hasVariant($state, "stepscharg", "step1")
                          ? "softGreen"
                          : hasVariant($state, "stepscharg", "step2")
                          ? "softGreen"
                          : "green"
                      }
                      loadingviow={generateStateValueProp($state, [
                        "backstep2",
                        "loadingviow"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateUnnamedVariant"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "stepscharg",
                                operation: 1
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUnnamedVariant"] != null &&
                          typeof $steps["updateUnnamedVariant"] === "object" &&
                          typeof $steps["updateUnnamedVariant"].then ===
                            "function"
                        ) {
                          $steps["updateUnnamedVariant"] = await $steps[
                            "updateUnnamedVariant"
                          ];
                        }
                      }}
                      onLoadingviowChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "backstep2",
                            "loadingviow"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bcqup,
                          {
                            [sty.textstepscharg_step1__bcqupQKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.textstepscharg_step2__bcqupAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step1")
                          ? "\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"
                          : hasVariant($state, "stepscharg", "step2")
                          ? "\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"
                          : "\u0627\u062f\u0627\u0645\u0647"}
                      </div>
                    </Button>
                  </Stack__>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml___8NcEa,
                      {
                        [sty.embedHtmlstepscharg_step1___8NcEaQKzi3]:
                          hasVariant($state, "stepscharg", "step1"),
                        [sty.embedHtmlstepscharg_step3___8NcEaTqZTv]:
                          hasVariant($state, "stepscharg", "step3")
                      }
                    )}
                    code={
                      hasVariant($state, "stepscharg", "step1") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? '<input type="file" id="imageInput" accept="image/*" capture="environment" style="display:none">\r\n<canvas id="canvas" style="display: none;"></canvas>\r\n\r\n<!-- \u06a9\u062a\u0627\u0628\u062e\u0627\u0646\u0647\u200c\u0647\u0627\u06cc \u0645\u0648\u0631\u062f \u0646\u06cc\u0627\u0632 -->\r\n<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>\r\n<script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>\r\n\r\n<script>\r\n  let barcodeErrorClicked = false; // \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0627\u062c\u0631\u0627\u06cc \u0686\u0646\u062f\u0628\u0627\u0631\u0647 \u062e\u0637\u0627\r\n\r\n  document.getElementById("imageInput").addEventListener("change", function(event) {\r\n      window.document.getElementById("loadingImage").click();\r\n\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n\r\n      const canvas = document.getElementById("canvas");\r\n      const context = canvas.getContext("2d");\r\n      const img = new Image();\r\n\r\n      img.onload = function() {\r\n          window.document.getElementById("loadingImage").click();\r\n\r\n          // \u062a\u0646\u0638\u06cc\u0645 \u0627\u0646\u062f\u0627\u0632\u0647 \u06a9\u0627\u0646\u0648\u0627\u0633 \u0648 \u0631\u0633\u0645 \u062a\u0635\u0648\u06cc\u0631\r\n          canvas.width = img.width;\r\n          canvas.height = img.height;\r\n          context.drawImage(img, 0, 0, img.width, img.height);\r\n\r\n          // \u0627\u0633\u06a9\u0646 QR \u06a9\u062f\r\n          scanQRCode(canvas);\r\n\r\n          // \u0627\u0633\u06a9\u0646 \u0628\u0627\u0631\u06a9\u062f\r\n          scanBarcode(canvas);\r\n      };\r\n\r\n      img.src = URL.createObjectURL(file);\r\n  });\r\n\r\n  function scanQRCode(canvas) {\r\n      const context = canvas.getContext("2d");\r\n      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n      const code = jsQR(imageData.data, imageData.width, imageData.height);\r\n\r\n      if (code) {\r\n          document.getElementsByName("idNumber")[0].value = code.data;\r\n      } \r\n  }\r\n\r\n  function scanBarcode(canvas) {\r\n      const imageData = canvas.toDataURL("image/jpeg");\r\n\r\n      Quagga.decodeSingle({\r\n          decoder: {\r\n              readers: ["code_128_reader", "ean_reader", "ean_8_reader", "code_39_reader", "upc_reader"]\r\n          },\r\n          locate: true,\r\n          src: imageData\r\n      }, function(result) {\r\n          if (result && result.codeResult) {\r\n              var inputField = document.getElementsByName("idNumber")[0];\r\n              inputField.value= result.codeResult.code+"."\r\n              if (inputField) {\r\n                  inputField.focus();\r\n                  inputField.setSelectionRange(inputField.value.length, inputField.value.length);\r\n                  document.execCommand(\'delete\', false); // \u0634\u0628\u06cc\u0647\u200c\u0633\u0627\u0632\u06cc \u062d\u0630\u0641 \u0628\u0647 \u0633\u0628\u06a9 \u0642\u062f\u06cc\u0645\u06cc\r\n              }\r\n             }\r\n          else {\r\n              window.document.getElementById("barcode_error").click();\r\n          }\r\n      });\r\n  }\r\n</script>'
                        : hasVariant($state, "stepscharg", "step1")
                        ? '<input type="file" id="imageInput" accept="image/*" capture="environment" style="display:none">\r\n<canvas id="canvas" style="display: none;"></canvas>\r\n\r\n<!-- \u06a9\u062a\u0627\u0628\u062e\u0627\u0646\u0647\u200c\u0647\u0627\u06cc \u0645\u0648\u0631\u062f \u0646\u06cc\u0627\u0632 -->\r\n<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>\r\n<script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>\r\n\r\n<script>\r\n  let barcodeErrorClicked = false; // \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0627\u062c\u0631\u0627\u06cc \u0686\u0646\u062f\u0628\u0627\u0631\u0647 \u062e\u0637\u0627\r\n\r\n  document.getElementById("imageInput").addEventListener("change", function(event) {\r\n      window.document.getElementById("loadingImage").click();\r\n\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n\r\n      const canvas = document.getElementById("canvas");\r\n      const context = canvas.getContext("2d");\r\n      const img = new Image();\r\n\r\n      img.onload = function() {\r\n          window.document.getElementById("loadingImage").click();\r\n\r\n          // \u062a\u0646\u0638\u06cc\u0645 \u0627\u0646\u062f\u0627\u0632\u0647 \u06a9\u0627\u0646\u0648\u0627\u0633 \u0648 \u0631\u0633\u0645 \u062a\u0635\u0648\u06cc\u0631\r\n          canvas.width = img.width;\r\n          canvas.height = img.height;\r\n          context.drawImage(img, 0, 0, img.width, img.height);\r\n\r\n          // \u0627\u0633\u06a9\u0646 QR \u06a9\u062f\r\n          scanQRCode(canvas);\r\n\r\n          // \u0627\u0633\u06a9\u0646 \u0628\u0627\u0631\u06a9\u062f\r\n          scanBarcode(canvas);\r\n      };\r\n\r\n      img.src = URL.createObjectURL(file);\r\n  });\r\n\r\n  function scanQRCode(canvas) {\r\n      const context = canvas.getContext("2d");\r\n      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n      const code = jsQR(imageData.data, imageData.width, imageData.height);\r\n\r\n      if (code) {\r\n          document.getElementsByName("idNumber")[0].value = code.data;\r\n      } \r\n  }\r\n\r\n  function scanBarcode(canvas) {\r\n      const imageData = canvas.toDataURL("image/jpeg");\r\n\r\n      Quagga.decodeSingle({\r\n          decoder: {\r\n              readers: ["code_128_reader", "ean_reader", "ean_8_reader", "code_39_reader", "upc_reader"]\r\n          },\r\n          locate: true,\r\n          src: imageData\r\n      }, function(result) {\r\n          if (result && result.codeResult) {\r\n              var inputField = document.getElementsByName("idNumber")[0];\r\n              inputField.value= result.codeResult.code+"."\r\n              if (inputField) {\r\n                  inputField.focus();\r\n                  inputField.setSelectionRange(inputField.value.length, inputField.value.length);\r\n                  document.execCommand(\'delete\', false); // \u0634\u0628\u06cc\u0647\u200c\u0633\u0627\u0632\u06cc \u062d\u0630\u0641 \u0628\u0647 \u0633\u0628\u06a9 \u0642\u062f\u06cc\u0645\u06cc\r\n              }\r\n             }\r\n          else {\r\n              window.document.getElementById("barcode_error").click();\r\n          }\r\n      });\r\n  }\r\n</script>'
                        : '<input type="file" id="imageInput" accept="image/*" capture="environment" style="display:none">\r\n<canvas id="canvas" style="display: none;"></canvas>\r\n\r\n<!-- \u06a9\u062a\u0627\u0628\u062e\u0627\u0646\u0647\u200c\u0647\u0627\u06cc \u0645\u0648\u0631\u062f \u0646\u06cc\u0627\u0632 -->\r\n<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>\r\n<script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>\r\n\r\n<script>\r\n  let barcodeErrorClicked = false; // \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0627\u062c\u0631\u0627\u06cc \u0686\u0646\u062f\u0628\u0627\u0631\u0647 \u062e\u0637\u0627\r\n\r\n  document.getElementById("imageInput").addEventListener("change", function(event) {\r\n      window.document.getElementById("loadingImage").click();\r\n\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n\r\n      const canvas = document.getElementById("canvas");\r\n      const context = canvas.getContext("2d");\r\n      const img = new Image();\r\n\r\n      img.onload = function() {\r\n          window.document.getElementById("loadingImage").click();\r\n\r\n          // \u062a\u0646\u0638\u06cc\u0645 \u0627\u0646\u062f\u0627\u0632\u0647 \u06a9\u0627\u0646\u0648\u0627\u0633 \u0648 \u0631\u0633\u0645 \u062a\u0635\u0648\u06cc\u0631\r\n          canvas.width = img.width;\r\n          canvas.height = img.height;\r\n          context.drawImage(img, 0, 0, img.width, img.height);\r\n\r\n          // \u0627\u0633\u06a9\u0646 QR \u06a9\u062f\r\n          scanQRCode(canvas);\r\n\r\n          // \u0627\u0633\u06a9\u0646 \u0628\u0627\u0631\u06a9\u062f\r\n          scanBarcode(canvas);\r\n      };\r\n\r\n      img.src = URL.createObjectURL(file);\r\n  });\r\n\r\n  function scanQRCode(canvas) {\r\n      const context = canvas.getContext("2d");\r\n      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n      const code = jsQR(imageData.data, imageData.width, imageData.height);\r\n\r\n      if (code) {\r\n          document.getElementsByName("idNumber")[0].value = code.data;\r\n      } \r\n  }\r\n\r\n  function scanBarcode(canvas) {\r\n      const imageData = canvas.toDataURL("image/jpeg");\r\n\r\n      Quagga.decodeSingle({\r\n          decoder: {\r\n              readers: ["code_128_reader", "ean_reader", "ean_8_reader", "code_39_reader", "upc_reader"]\r\n          },\r\n          locate: true,\r\n          src: imageData\r\n      }, function(result) {\r\n          if (result && result.codeResult) {\r\n              var inputField = document.getElementsByName("idNumber")[0];\r\n              inputField.value= result.codeResult.code+"."\r\n              if (inputField) {\r\n                  inputField.focus();\r\n                  inputField.setSelectionRange(inputField.value.length, inputField.value.length);\r\n                  document.execCommand(\'delete\', false); // \u0634\u0628\u06cc\u0647\u200c\u0633\u0627\u0632\u06cc \u062d\u0630\u0641 \u0628\u0647 \u0633\u0628\u06a9 \u0642\u062f\u06cc\u0645\u06cc\r\n              }\r\n             }\r\n          else {\r\n              window.document.getElementById("barcode_error").click();\r\n          }\r\n      });\r\n  }\r\n</script>'
                    }
                  />
                </Stack__>
                <Button
                  data-plasmic-name={"addBill"}
                  data-plasmic-override={overrides.addBill}
                  className={classNames("__wab_instance", sty.addBill, {
                    [sty.addBillstepscharg_step1]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.addBillstepscharg_step2]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.addBillstepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  color={"green"}
                  endIcon={
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg___7Ya0M)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "isDisabled";
                      }
                      throw e;
                    }
                  })()}
                  loadingviow={generateStateValueProp($state, [
                    "addBill",
                    "loadingviow"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateType2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["type2", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateType2Open"] != null &&
                      typeof $steps["updateType2Open"] === "object" &&
                      typeof $steps["updateType2Open"].then === "function"
                    ) {
                      $steps["updateType2Open"] = await $steps[
                        "updateType2Open"
                      ];
                    }
                  }}
                  onLoadingviowChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "addBill",
                        "loadingviow"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showStartIcon={true}
                  startIcon={
                    <Icon92Icon
                      className={classNames(projectcss.all, sty.svg__yqHmc)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__m4QM,
                      {
                        [sty.textstepscharg_step1__m4QMQKzi3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        )
                      }
                    )}
                  >
                    {"\u0642\u0628\u0636 \u062c\u062f\u06cc\u062f"}
                  </div>
                </Button>
                {(
                  hasVariant($state, "stepscharg", "step2")
                    ? true
                    : hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <Button
                    data-plasmic-name={"step2Next"}
                    data-plasmic-override={overrides.step2Next}
                    className={classNames("__wab_instance", sty.step2Next, {
                      [sty.step2Nextstepscharg_step1]: hasVariant(
                        $state,
                        "stepscharg",
                        "step1"
                      ),
                      [sty.step2Nextstepscharg_step2]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.step2Nextstepscharg_step3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    color={"green"}
                    isDisabled={(() => {
                      try {
                        return $state.fragmentInput2.value.length <= 3;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loadingviow={generateStateValueProp($state, [
                      "step2Next",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateAmont"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["amont"]
                              },
                              operation: 0,
                              value: parseInt($state.amont)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateAmont"] != null &&
                        typeof $steps["updateAmont"] === "object" &&
                        typeof $steps["updateAmont"].then === "function"
                      ) {
                        $steps["updateAmont"] = await $steps["updateAmont"];
                      }

                      $steps["updateUnnamedVariant2"] = (() => {
                        if (
                          $state.operators2[$state.operatorselect].chargeRange
                        ) {
                          if ($state.operatorselect == 1) {
                            return $state.amont % 1000 === 0;
                          }
                          if (
                            $state.amont >=
                              $state.operators2[$state.operatorselect]
                                .chargeRange.min &&
                            $state.amont <=
                              $state.operators2[$state.operatorselect]
                                .chargeRange.max
                          ) {
                            return true;
                          } else {
                            return false;
                          }
                        } else return true;
                      })()
                        ? (() => {
                            const actionArgs = {
                              vgroup: "stepscharg",
                              operation: 0,
                              value: "step3"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUnnamedVariant2"] != null &&
                        typeof $steps["updateUnnamedVariant2"] === "object" &&
                        typeof $steps["updateUnnamedVariant2"].then ===
                          "function"
                      ) {
                        $steps["updateUnnamedVariant2"] = await $steps[
                          "updateUnnamedVariant2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = (() => {
                        if (
                          $state.operators2[$state.operatorselect].chargeRange
                        ) {
                          if ($state.operatorselect == 1) {
                            return $state.amont % 1000 != 0;
                          }
                          if (
                            $state.amont >=
                              $state.operators2[$state.operatorselect]
                                .chargeRange.min &&
                            $state.amont <=
                              $state.operators2[$state.operatorselect]
                                .chargeRange.max
                          ) {
                            return false;
                          } else {
                            return true;
                          }
                        } else return false;
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return (() => {
                                      if ($state.operatorselect == 1) {
                                        if ($state.amont % 1000 != 0)
                                          return "مبلغ باید ضریبی از 1000 باشد.";
                                      }
                                      return (
                                        "مبلغ باید بین " +
                                        $state.operators2[
                                          $state.operatorselect
                                        ].chargeRange.min.toLocaleString("en") +
                                        " تومان تا " +
                                        $state.operators2[
                                          $state.operatorselect
                                        ].chargeRange.max.toLocaleString("en") +
                                        " تومان باشد."
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "step2Next",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kiHcI
                      )}
                    >
                      {"\u0627\u062f\u0627\u0645\u0647"}
                    </div>
                  </Button>
                ) : null}
                {(
                  hasVariant($state, "stepscharg", "step3")
                    ? true
                    : hasVariant($state, "stepscharg", "step2")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w1QNb,
                      {
                        [sty.textstepscharg_step1__w1QNbqKzi3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.textstepscharg_step2__w1QNbAvykh]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.textstepscharg_step3__w1QNbTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToChargeStep1"] = true
                        ? (() => {
                            const actionArgs = { destination: `/charging` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToChargeStep1"] != null &&
                        typeof $steps["goToChargeStep1"] === "object" &&
                        typeof $steps["goToChargeStep1"].then === "function"
                      ) {
                        $steps["goToChargeStep1"] = await $steps[
                          "goToChargeStep1"
                        ];
                      }
                    }}
                  >
                    {"\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"}
                  </div>
                ) : null}
              </Stack__>
            </section>
            <AntdModal
              data-plasmic-name={"modal"}
              data-plasmic-override={overrides.modal}
              className={classNames("__wab_instance", sty.modal, {
                [sty.modalstepscharg_step3]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              modalContentClassName={classNames({
                [sty["pcls_6NI2307KYZcD"]]: true,
                [sty["pcls_NKAphPI2eLLI"]]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
              modalScopeClassName={sty["modal__modal"]}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["modal", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["modal", "open"])}
              title={null}
              trigger={null}
            >
              <div className={classNames(projectcss.all, sty.freeBox___4JLbG)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vj7Hx
                  )}
                >
                  {
                    "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062e\u0631\u06cc\u062f \u0634\u0627\u0631\u0698"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lxAiN
                  )}
                >
                  {
                    "\u06af\u0627\u0645 \u0647\u0627\u06cc \u062e\u0631\u06cc\u062f \u0634\u0627\u0631\u0698:"
                  }
                </div>
                <Stack__
                  as={"ul"}
                  data-plasmic-name={"ul"}
                  data-plasmic-override={overrides.ul}
                  hasGap={true}
                  className={classNames(projectcss.all, projectcss.ul, sty.ul)}
                >
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      sty.li___1IMaD
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zBbMa)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bK9Xs
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f ."
                        }
                      </div>
                    </div>
                  </li>
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      sty.li__xmp5S
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ckCby)}
                    >
                      <div
                        data-plasmic-name={
                          "\u0627\u067e\u0631\u0627\u062a\u0648\u0631"
                        }
                        data-plasmic-override={overrides.اپراتور}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.اپراتور
                        )}
                      >
                        {
                          "\u0627\u067e\u0631\u0627\u062a\u0648\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                        }
                      </div>
                    </div>
                  </li>
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      sty.li__tcg2R
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__k2MpI)}
                    >
                      <div
                        data-plasmic-name={
                          "\u0627\u067e\u0631\u0627\u062a\u0648\u06312"
                        }
                        data-plasmic-override={overrides.اپراتور2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.اپراتور2
                        )}
                      >
                        {
                          "\u0637\u0631\u062d \u062f\u0644 \u062e\u0648\u0627\u0647 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                        }
                      </div>
                    </div>
                  </li>
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      sty.li__lVZc
                    )}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rXXgZ)}
                    >
                      <div
                        data-plasmic-name={
                          "\u0627\u067e\u0631\u0627\u062a\u0648\u06313"
                        }
                        data-plasmic-override={overrides.اپراتور3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.اپراتور3
                        )}
                      >
                        {
                          "\u0645\u0628\u0644\u063a \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                        }
                      </div>
                    </div>
                  </li>
                </Stack__>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"green"}
                  loadingviow={generateStateValueProp($state, [
                    "button",
                    "loadingviow"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }}
                  onLoadingviowChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button",
                        "loadingviow"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  {"\u0645\u062a\u0648\u062c\u0647 \u0634\u062f\u0645"}
                </Button>
              </div>
            </AntdModal>
            <AntdModal
              data-plasmic-name={"modal2"}
              data-plasmic-override={overrides.modal2}
              className={classNames("__wab_instance", sty.modal2, {
                [sty.modal2stepscharg_step3]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens
              )}
              hideFooter={true}
              maskClosable={
                hasVariant($state, "stepscharg", "step3") ? false : undefined
              }
              modalContentClassName={classNames({
                [sty["pcls_DtItj8IdhTGF"]]: true,
                [sty["pcls_Mr6A7xh9Aj74"]]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                ),
                [sty["pcls_qae-Jrm_X0Mi"]]:
                  hasVariant($state, "stepscharg", "step3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
              })}
              modalScopeClassName={sty["modal2__modal"]}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["modal2", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["modal2", "open"])}
              title={null}
              trigger={null}
              width={
                hasVariant($state, "stepscharg", "step3") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "100vw"
                  : hasVariant($state, "stepscharg", "step3")
                  ? "520"
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "100%"
                  : "55%"
              }
              wrapClassName={classNames({
                [sty["pcls_0k-yhts48o-i"]]:
                  hasVariant($state, "stepscharg", "step3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly"),
                [sty["pcls_F3Iu59MAWK3q"]]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__mSuI, {
                  [sty.freeBoxstepscharg_step3__mSuITqZTv]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <LottieWrapper
                  data-plasmic-name={"lottie"}
                  data-plasmic-override={overrides.lottie}
                  animationData={{
                    v: "4.10.1",
                    fr: 30,
                    ip: 0,
                    op: 40,
                    w: 80,
                    h: 80,
                    nm: "Success Checkmark",
                    ddd: 0,
                    assets: [],
                    layers: [
                      {
                        ddd: 0,
                        ind: 1,
                        ty: 4,
                        nm: "Check Mark",
                        sr: 1,
                        ks: {
                          o: { a: 0, k: 100, ix: 11 },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [40, 40, 0], ix: 2 },
                          a: { a: 0, k: [-1.312, 6, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 }
                        },
                        ao: 0,
                        shapes: [
                          {
                            ty: "gr",
                            it: [
                              {
                                ind: 0,
                                ty: "sh",
                                ix: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-15.75, 8],
                                      [-8, 16],
                                      [13.125, -4]
                                    ],
                                    c: false
                                  },
                                  ix: 2
                                },
                                nm: "Path 1",
                                mn: "ADBE Vector Shape - Group",
                                hd: false
                              },
                              {
                                ty: "tm",
                                s: {
                                  a: 1,
                                  k: [
                                    {
                                      i: { x: [0.667], y: [1] },
                                      o: { x: [0.333], y: [0] },
                                      n: ["0p667_1_0p333_0"],
                                      t: 25,
                                      s: [0],
                                      e: [100]
                                    },
                                    { t: 33 }
                                  ],
                                  ix: 1
                                },
                                e: { a: 0, k: 0, ix: 2 },
                                o: { a: 0, k: 0, ix: 3 },
                                m: 1,
                                ix: 2,
                                nm: "Trim Paths 1",
                                mn: "ADBE Vector Filter - Trim",
                                hd: false
                              },
                              {
                                ty: "st",
                                c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                o: { a: 0, k: 100, ix: 4 },
                                w: { a: 0, k: 3, ix: 5 },
                                lc: 2,
                                lj: 2,
                                nm: "Stroke 1",
                                mn: "ADBE Vector Graphic - Stroke",
                                hd: false
                              },
                              {
                                ty: "tr",
                                p: { a: 0, k: [0, 0], ix: 2 },
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                r: { a: 0, k: 0, ix: 6 },
                                o: { a: 0, k: 100, ix: 7 },
                                sk: { a: 0, k: 0, ix: 4 },
                                sa: { a: 0, k: 0, ix: 5 },
                                nm: "Transform"
                              }
                            ],
                            nm: "Shape 1",
                            np: 3,
                            cix: 2,
                            ix: 1,
                            mn: "ADBE Vector Group",
                            hd: false
                          }
                        ],
                        ip: 0,
                        op: 40,
                        st: 0,
                        bm: 0
                      },
                      {
                        ddd: 0,
                        ind: 2,
                        ty: 4,
                        nm: "Circle Flash",
                        sr: 1,
                        ks: {
                          o: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.833], y: [0.833] },
                                o: { x: [0.167], y: [0.167] },
                                n: ["0p833_0p833_0p167_0p167"],
                                t: 25,
                                s: [0],
                                e: [98]
                              },
                              {
                                i: { x: [0.833], y: [0.833] },
                                o: { x: [0.167], y: [0.167] },
                                n: ["0p833_0p833_0p167_0p167"],
                                t: 30,
                                s: [98],
                                e: [0]
                              },
                              { t: 38 }
                            ],
                            ix: 11
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [40, 40, 0], ix: 2 },
                          a: { a: 0, k: [0, 0, 0], ix: 1 },
                          s: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                n: [
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0"
                                ],
                                t: 25,
                                s: [0, 0, 100],
                                e: [100, 100, 100]
                              },
                              { t: 30 }
                            ],
                            ix: 6
                          }
                        },
                        ao: 0,
                        shapes: [
                          {
                            d: 1,
                            ty: "el",
                            s: { a: 0, k: [64, 64], ix: 2 },
                            p: { a: 0, k: [0, 0], ix: 3 },
                            nm: "Ellipse Path 1",
                            mn: "ADBE Vector Shape - Ellipse",
                            hd: false
                          },
                          {
                            ty: "fl",
                            c: {
                              a: 0,
                              k: [
                                0.529866635799, 0.961458325386, 0.448091417551,
                                1
                              ],
                              ix: 4
                            },
                            o: { a: 0, k: 100, ix: 5 },
                            r: 1,
                            nm: "Fill 1",
                            mn: "ADBE Vector Graphic - Fill",
                            hd: false
                          }
                        ],
                        ip: 0,
                        op: 40,
                        st: 0,
                        bm: 0
                      },
                      {
                        ddd: 0,
                        ind: 3,
                        ty: 4,
                        nm: "Circle Stroke",
                        sr: 1,
                        ks: {
                          o: { a: 0, k: 100, ix: 11 },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [39.022, 39.022, 0], ix: 2 },
                          a: { a: 0, k: [0, 0, 0], ix: 1 },
                          s: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                n: [
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0"
                                ],
                                t: 16,
                                s: [100, 100, 100],
                                e: [80, 80, 100]
                              },
                              {
                                i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                n: [
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0"
                                ],
                                t: 22,
                                s: [80, 80, 100],
                                e: [120, 120, 100]
                              },
                              {
                                i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                n: [
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0"
                                ],
                                t: 25,
                                s: [120, 120, 100],
                                e: [100, 100, 100]
                              },
                              { t: 29 }
                            ],
                            ix: 6
                          }
                        },
                        ao: 0,
                        shapes: [
                          {
                            ty: "gr",
                            it: [
                              {
                                d: 1,
                                ty: "el",
                                s: { a: 0, k: [60, 60], ix: 2 },
                                p: { a: 0, k: [0, 0], ix: 3 },
                                nm: "Ellipse Path 1",
                                mn: "ADBE Vector Shape - Ellipse",
                                hd: false
                              },
                              {
                                ty: "tm",
                                s: {
                                  a: 1,
                                  k: [
                                    {
                                      i: { x: [0.667], y: [1] },
                                      o: { x: [0.333], y: [0] },
                                      n: ["0p667_1_0p333_0"],
                                      t: 0,
                                      s: [0],
                                      e: [100]
                                    },
                                    { t: 16 }
                                  ],
                                  ix: 1
                                },
                                e: { a: 0, k: 0, ix: 2 },
                                o: { a: 0, k: 0, ix: 3 },
                                m: 1,
                                ix: 2,
                                nm: "Trim Paths 1",
                                mn: "ADBE Vector Filter - Trim",
                                hd: false
                              },
                              {
                                ty: "st",
                                c: {
                                  a: 0,
                                  k: [
                                    0.427450984716, 0.800000011921,
                                    0.35686275363, 1
                                  ],
                                  ix: 3
                                },
                                o: { a: 0, k: 100, ix: 4 },
                                w: { a: 0, k: 3, ix: 5 },
                                lc: 2,
                                lj: 2,
                                nm: "Stroke 1",
                                mn: "ADBE Vector Graphic - Stroke",
                                hd: false
                              },
                              {
                                ty: "tr",
                                p: { a: 0, k: [0.978, 0.978], ix: 2 },
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                r: { a: 0, k: 0, ix: 6 },
                                o: { a: 0, k: 100, ix: 7 },
                                sk: { a: 0, k: 0, ix: 4 },
                                sa: { a: 0, k: 0, ix: 5 },
                                nm: "Transform"
                              }
                            ],
                            nm: "Ellipse 1",
                            np: 3,
                            cix: 2,
                            ix: 1,
                            mn: "ADBE Vector Group",
                            hd: false
                          }
                        ],
                        ip: 0,
                        op: 40,
                        st: 0,
                        bm: 0
                      },
                      {
                        ddd: 0,
                        ind: 4,
                        ty: 4,
                        nm: "Circle Green Fill",
                        sr: 1,
                        ks: {
                          o: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.833], y: [0.833] },
                                o: { x: [0.167], y: [0.167] },
                                n: ["0p833_0p833_0p167_0p167"],
                                t: 21,
                                s: [0],
                                e: [98]
                              },
                              { t: 28 }
                            ],
                            ix: 11
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [40, 40, 0], ix: 2 },
                          a: { a: 0, k: [0, 0, 0], ix: 1 },
                          s: {
                            a: 1,
                            k: [
                              {
                                i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                n: [
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0",
                                  "0p667_1_0p333_0"
                                ],
                                t: 21,
                                s: [0, 0, 100],
                                e: [100, 100, 100]
                              },
                              { t: 28 }
                            ],
                            ix: 6
                          }
                        },
                        ao: 0,
                        shapes: [
                          {
                            d: 1,
                            ty: "el",
                            s: { a: 0, k: [64, 64], ix: 2 },
                            p: { a: 0, k: [0, 0], ix: 3 },
                            nm: "Ellipse Path 1",
                            mn: "ADBE Vector Shape - Ellipse",
                            hd: false
                          },
                          {
                            ty: "fl",
                            c: {
                              a: 0,
                              k: [
                                0.427450984716, 0.800000011921, 0.35686275363, 1
                              ],
                              ix: 4
                            },
                            o: { a: 0, k: 100, ix: 5 },
                            r: 1,
                            nm: "Fill 1",
                            mn: "ADBE Vector Graphic - Fill",
                            hd: false
                          }
                        ],
                        ip: 0,
                        op: 40,
                        st: 0,
                        bm: 0
                      }
                    ]
                  }}
                  className={classNames("__wab_instance", sty.lottie, {
                    [sty.lottiestepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  loop={true}
                  preview={true}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rdyig,
                    {
                      [sty.textstepscharg_step3__rdyigTqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    }
                  )}
                >
                  {
                    "\u062e\u0631\u06cc\u062f \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                  }
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__b3PlE, {
                    [sty.freeBoxstepscharg_step3__b3PlETqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jy5E
                    )}
                  >
                    {
                      "\u0634\u0645\u0627\u0631\u0647 \u067e\u06cc\u06af\u06cc\u0631\u06cc"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lwChV,
                      {
                        [sty.textstepscharg_step3__lwChVTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "stepscharg", "step3") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.infopardakt.ref_code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      "4458748475"
                    )}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__bdsVf)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t7EKw
                    )}
                  >
                    {
                      "\u0634\u0646\u0627\u0633\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__re4RM,
                      {
                        [sty.textstepscharg_step3__re4RMTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "stepscharg", "step3") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.infopardakt.trans_id;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "445874888475";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      "445874888475"
                    )}
                  </div>
                </div>
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2, {
                    [sty.button2stepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  color={"green"}
                  loadingviow={generateStateValueProp($state, [
                    "button2",
                    "loadingviow"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal2", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  }}
                  onLoadingviowChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button2",
                        "loadingviow"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oybpF
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
              </div>
            </AntdModal>
          </div>
        </section>
        <ApiRequest
          data-plasmic-name={"commissionBabarkat"}
          data-plasmic-override={overrides.commissionBabarkat}
          className={classNames("__wab_instance", sty.commissionBabarkat)}
          errorDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lziw4
              )}
            >
              {"Error fetching data"}
            </div>
          }
          loadingDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cdzoN
              )}
            >
              {"Loading..."}
            </div>
          }
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "commissionBabarkat",
              "error"
            ]).apply(null, eventArgs);
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "commissionBabarkat",
              "loading"
            ]).apply(null, eventArgs);
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "commissionBabarkat",
              "data"
            ]).apply(null, eventArgs);
          }}
          url={"https://n8n.babarkat.com/webhook/CommissionBabarkat"}
        />

        <AntdModal
          data-plasmic-name={"type2"}
          data-plasmic-override={overrides.type2}
          className={classNames("__wab_instance", sty.type2, {
            [sty.type2stepscharg_step1]: hasVariant(
              $state,
              "stepscharg",
              "step1"
            ),
            [sty.type2stepscharg_step2]: hasVariant(
              $state,
              "stepscharg",
              "step2"
            ),
            [sty.type2stepscharg_step3]: hasVariant(
              $state,
              "stepscharg",
              "step3"
            )
          })}
          closeButtonClassName={classNames({
            [sty["pcls_tLh61HApRqL2"]]: true
          })}
          closeIcon={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3Rci
              )}
            >
              {"\n"}
            </div>
          }
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          modalContentClassName={classNames({
            [sty["pcls_YtBcDOhT8Nb2"]]: true
          })}
          modalScopeClassName={sty["type2__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["type2", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["type2", "open"])}
          title={null}
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "700"
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__t1LUa)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ed21)}
            >
              <Icon78Icon
                className={classNames(projectcss.all, sty.svg__sa9Dm)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__negJw
                )}
              >
                {"\u0642\u0628\u0636 \u062c\u062f\u06cc\u062f"}
              </div>
            </Stack__>
            <Icon89Icon
              className={classNames(projectcss.all, sty.svg__ga3J)}
              onClick={async event => {
                const $steps = {};

                $steps["updateModal3Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type2", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModal3Open"] != null &&
                  typeof $steps["updateModal3Open"] === "object" &&
                  typeof $steps["updateModal3Open"].then === "function"
                ) {
                  $steps["updateModal3Open"] = await $steps["updateModal3Open"];
                }
              }}
              role={"img"}
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox___5Y91O)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon13"}
              data-plasmic-override={overrides.comingSoon13}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon13)}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "elec"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type2", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon98Icon
                className={classNames(projectcss.all, sty.svg__m6Gu)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jUaG
                )}
              >
                {"\u0642\u0628\u0636 \u0628\u0631\u0642"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon14"}
              data-plasmic-override={overrides.comingSoon14}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon14)}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "gas"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type2", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon99Icon
                className={classNames(projectcss.all, sty.svg__e7Uyj)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qrGph
                )}
              >
                {"\u0642\u0628\u0636 \u06af\u0627\u0632"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon15"}
              data-plasmic-override={overrides.comingSoon15}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon15)}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "water"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type2", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon100Icon
                className={classNames(projectcss.all, sty.svg__cinl7)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p06Xn
                )}
              >
                {"\u0642\u0628\u0636 \u0622\u0628"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon16"}
              data-plasmic-override={overrides.comingSoon16}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon16, {
                [sty.comingSoon16stepscharg_step1]: hasVariant(
                  $state,
                  "stepscharg",
                  "step1"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "phone"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type2", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon101Icon
                className={classNames(projectcss.all, sty.svg__bspv6)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eNoYa
                )}
              >
                {
                  "\u0642\u0628\u0636 \u062a\u0644\u0641\u0646 \u062b\u0627\u0628\u062a"
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon17"}
              data-plasmic-override={overrides.comingSoon17}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon17)}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "mobile"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type2", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon102Icon
                className={classNames(projectcss.all, sty.svg__mfcag)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__poCsS
                )}
              >
                {
                  "\u0642\u0628\u0636 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a \u062f\u0627\u0626\u0645\u06cc"
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon18"}
              data-plasmic-override={overrides.comingSoon18}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon18)}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "other"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type2", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon104Icon
                className={classNames(projectcss.all, sty.svg__lh4Av)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rQrWl
                )}
              >
                {"\u0633\u0627\u06cc\u0631 \u0642\u0628\u0636 \u0647\u0627"}
              </div>
            </Stack__>
          </div>
        </AntdModal>
        <AntdModal
          data-plasmic-name={"edit"}
          data-plasmic-override={overrides.edit}
          className={classNames("__wab_instance", sty.edit, {
            [sty.editstepscharg_step1]: hasVariant(
              $state,
              "stepscharg",
              "step1"
            ),
            [sty.editstepscharg_step2]: hasVariant(
              $state,
              "stepscharg",
              "step2"
            ),
            [sty.editstepscharg_step3]: hasVariant(
              $state,
              "stepscharg",
              "step3"
            )
          })}
          closeButtonClassName={classNames({
            [sty["pcls_wITa0eALGpmY"]]: true
          })}
          closeIcon={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jwCo
              )}
            >
              {"\n"}
            </div>
          }
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          modalContentClassName={classNames({
            [sty["pcls_CK3nty3nJh4l"]]: true
          })}
          modalScopeClassName={sty["edit__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["edit", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["edit", "open"])}
          title={null}
          trigger={null}
          width={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "700"
          }
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__x7Zc)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qIl1O)}
            >
              <Icon78Icon
                className={classNames(projectcss.all, sty.svg__pIJcv)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___48JFk
                )}
              >
                {"\u0642\u0628\u0636 \u062c\u062f\u06cc\u062f"}
              </div>
            </Stack__>
            <Icon89Icon
              className={classNames(projectcss.all, sty.svg__aInt1)}
              onClick={async event => {
                const $steps = {};

                $steps["updateModal3Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["edit", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModal3Open"] != null &&
                  typeof $steps["updateModal3Open"] === "object" &&
                  typeof $steps["updateModal3Open"].then === "function"
                ) {
                  $steps["updateModal3Open"] = await $steps["updateModal3Open"];
                }
              }}
              role={"img"}
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__hbYsR)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon19"}
              data-plasmic-override={overrides.comingSoon19}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon19)}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "elec"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["edit", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon98Icon
                className={classNames(projectcss.all, sty.svg__m66Ty)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ffXXd
                )}
              >
                {"\u0642\u0628\u0636 \u0628\u0631\u0642"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon20"}
              data-plasmic-override={overrides.comingSoon20}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon20)}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "gas"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["edit", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon99Icon
                className={classNames(projectcss.all, sty.svg__ukAsz)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hf0IK
                )}
              >
                {"\u0642\u0628\u0636 \u06af\u0627\u0632"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon21"}
              data-plasmic-override={overrides.comingSoon21}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon21)}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "water"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["edit", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon100Icon
                className={classNames(projectcss.all, sty.svg__cgbB0)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vwiSs
                )}
              >
                {"\u0642\u0628\u0636 \u0622\u0628"}
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon22"}
              data-plasmic-override={overrides.comingSoon22}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon22, {
                [sty.comingSoon22stepscharg_step1]: hasVariant(
                  $state,
                  "stepscharg",
                  "step1"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "phone"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["edit", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon101Icon
                className={classNames(projectcss.all, sty.svg__zyWbs)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e7Vl2
                )}
              >
                {
                  "\u0642\u0628\u0636 \u062a\u0644\u0641\u0646 \u062b\u0627\u0628\u062a"
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon23"}
              data-plasmic-override={overrides.comingSoon23}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon23)}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "mobile"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["edit", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon102Icon
                className={classNames(projectcss.all, sty.svg__opwjB)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aLahs
                )}
              >
                {
                  "\u0642\u0628\u0636 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a \u062f\u0627\u0626\u0645\u06cc"
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"comingSoon24"}
              data-plasmic-override={overrides.comingSoon24}
              hasGap={true}
              className={classNames(projectcss.all, sty.comingSoon24)}
              onClick={async event => {
                const $steps = {};

                $steps["updateType"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["type"]
                        },
                        operation: 0,
                        value: "other"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType"] != null &&
                  typeof $steps["updateType"] === "object" &&
                  typeof $steps["updateType"].then === "function"
                ) {
                  $steps["updateType"] = await $steps["updateType"];
                }

                $steps["updateStepscharg"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "stepscharg",
                        operation: 0,
                        value: "step1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStepscharg"] != null &&
                  typeof $steps["updateStepscharg"] === "object" &&
                  typeof $steps["updateStepscharg"].then === "function"
                ) {
                  $steps["updateStepscharg"] = await $steps["updateStepscharg"];
                }

                $steps["updateType2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["edit", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateType2Open"] != null &&
                  typeof $steps["updateType2Open"] === "object" &&
                  typeof $steps["updateType2Open"].then === "function"
                ) {
                  $steps["updateType2Open"] = await $steps["updateType2Open"];
                }
              }}
            >
              <Icon104Icon
                className={classNames(projectcss.all, sty.svg__wg5)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9CPCw
                )}
              >
                {"\u0633\u0627\u06cc\u0631 \u0642\u0628\u0636 \u0647\u0627"}
              </div>
            </Stack__>
          </div>
        </AntdModal>
        {(hasVariant($state, "stepscharg", "step3") ? true : false) ? (
          <AntdModal
            data-plasmic-name={"info"}
            data-plasmic-override={overrides.info}
            className={classNames("__wab_instance", sty.info, {
              [sty.infostepscharg_step1]: hasVariant(
                $state,
                "stepscharg",
                "step1"
              ),
              [sty.infostepscharg_step2]: hasVariant(
                $state,
                "stepscharg",
                "step2"
              ),
              [sty.infostepscharg_step3]: hasVariant(
                $state,
                "stepscharg",
                "step3"
              )
            })}
            closeButtonClassName={classNames({
              [sty["pcls_akIea5mb1GCq"]]: true
            })}
            closeIcon={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xmBrc
                )}
              >
                {"\n"}
              </div>
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_hp7nxg5nVJhv"]]: true
            })}
            modalScopeClassName={sty["info__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["info", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["info", "open"])}
            title={null}
            trigger={null}
            width={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100%"
                : "700"
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dVyng)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ktIJh)}
              >
                <Icon78Icon
                  className={classNames(projectcss.all, sty.svg__tbeWj)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5Fzdx
                  )}
                >
                  {"\u062c\u0632\u06cc\u06cc\u0627\u062a \u0642\u0628\u0636 "}
                </div>
              </Stack__>
              <Icon89Icon
                className={classNames(projectcss.all, sty.svg__dHnji)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModal3Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["info", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModal3Open"] != null &&
                    typeof $steps["updateModal3Open"] === "object" &&
                    typeof $steps["updateModal3Open"].then === "function"
                  ) {
                    $steps["updateModal3Open"] = await $steps[
                      "updateModal3Open"
                    ];
                  }
                }}
                role={"img"}
              />
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__cbBbD)}>
              <div className={classNames(projectcss.all, sty.freeBox__sLIwM)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3RGYi
                  )}
                >
                  {"\u0646\u0627\u0645"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yft0R
                  )}
                >
                  {
                    "\u0627\u0644\u0647\u0647 \u0627\u0645\u06cc\u0631 \u0639\u0628\u0627\u0633\u06cc"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__akfwM)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oYPkj
                  )}
                >
                  {"\u0646\u0627\u0645"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hZfA
                  )}
                >
                  {
                    "\u0627\u0644\u0647\u0647 \u0627\u0645\u06cc\u0631 \u0639\u0628\u0627\u0633\u06cc"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__eh2T)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__waO4H
                  )}
                >
                  {"\u0646\u0627\u0645"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cqbqL
                  )}
                >
                  {
                    "\u0627\u0644\u0647\u0647 \u0627\u0645\u06cc\u0631 \u0639\u0628\u0627\u0633\u06cc"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___4YSc)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___5AZ1I
                  )}
                >
                  {"\u0646\u0627\u0645"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l6Ied
                  )}
                >
                  {
                    "\u0627\u0644\u0647\u0647 \u0627\u0645\u06cc\u0631 \u0639\u0628\u0627\u0633\u06cc"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hDPtx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rUr63
                  )}
                >
                  {"\u0646\u0627\u0645"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tzV
                  )}
                >
                  {
                    "\u0627\u0644\u0647\u0647 \u0627\u0645\u06cc\u0631 \u0639\u0628\u0627\u0633\u06cc"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wTtD)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pJryb
                  )}
                >
                  {"\u0646\u0627\u0645"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b6Cev
                  )}
                >
                  {
                    "\u0627\u0644\u0647\u0647 \u0627\u0645\u06cc\u0631 \u0639\u0628\u0627\u0633\u06cc"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__t7MCp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ujnaY
                  )}
                >
                  {"\u0646\u0627\u0645"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n0JgA
                  )}
                >
                  {
                    "\u0627\u0644\u0647\u0647 \u0627\u0645\u06cc\u0631 \u0639\u0628\u0627\u0633\u06cc"
                  }
                </div>
              </div>
            </div>
          </AntdModal>
        ) : null}
        <Loading
          data-plasmic-name={"loading"}
          data-plasmic-override={overrides.loading}
          className={classNames("__wab_instance", sty.loading, {
            [sty.loadingstepscharg_step1]: hasVariant(
              $state,
              "stepscharg",
              "step1"
            )
          })}
          load={generateStateValueProp($state, ["loading", "load"])}
          onLoadChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["loading", "load"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        />

        <AntdModal
          data-plasmic-name={"exitModal"}
          data-plasmic-override={overrides.exitModal}
          className={classNames("__wab_instance", sty.exitModal)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          hideFooter={true}
          maskClosable={true}
          modalContentClassName={classNames({
            [sty["pcls_efKvMPcSmgkK"]]: true
          })}
          modalScopeClassName={sty["exitModal__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["exitModal", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["exitModal", "open"])}
          title={null}
          trigger={null}
          width={"520"}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jn4WF)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ok7Yk
              )}
            >
              {
                "\u0627\u0632 \u062d\u0630\u0641 \u0642\u0628\u0636 \u0627\u0637\u0645\u06cc\u0646\u0627\u0646 \u062f\u0627\u0631\u06cc\u062f\u061f"
              }
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___1GZtL)}
          >
            <Button
              data-plasmic-name={"button5"}
              data-plasmic-override={overrides.button5}
              className={classNames("__wab_instance", sty.button5)}
              color={"red"}
              loadingviow={generateStateValueProp($state, [
                "button5",
                "loadingviow"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.billsdata.splice($state.selectBill.id, 1);
                            return window.localStorage.setItem(
                              "bills",
                              JSON.stringify($state.billsdata)
                            );
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateExitModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["exitModal", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateExitModalOpen"] != null &&
                  typeof $steps["updateExitModalOpen"] === "object" &&
                  typeof $steps["updateExitModalOpen"].then === "function"
                ) {
                  $steps["updateExitModalOpen"] = await $steps[
                    "updateExitModalOpen"
                  ];
                }
              }}
              onLoadingviowChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "loadingviow"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              {"\u0628\u0644\u0647"}
            </Button>
            <Button
              data-plasmic-name={"button6"}
              data-plasmic-override={overrides.button6}
              className={classNames("__wab_instance", sty.button6)}
              color={"sand"}
              loadingviow={generateStateValueProp($state, [
                "button6",
                "loadingviow"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["updateModal3Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["exitModal", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModal3Open"] != null &&
                  typeof $steps["updateModal3Open"] === "object" &&
                  typeof $steps["updateModal3Open"].then === "function"
                ) {
                  $steps["updateModal3Open"] = await $steps["updateModal3Open"];
                }
              }}
              onLoadingviowChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button6", "loadingviow"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              {"\u0627\u0646\u0635\u0631\u0627\u0641"}
            </Button>
          </Stack__>
        </AntdModal>
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect, {
            [sty.sideEffectstepscharg_step1]: hasVariant(
              $state,
              "stepscharg",
              "step1"
            ),
            [sty.sideEffectstepscharg_step2]: hasVariant(
              $state,
              "stepscharg",
              "step2"
            )
          })}
          onMount={async () => {
            const $steps = {};

            $steps["updateType"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["type"]
                    },
                    operation: 0,
                    value:
                      $ctx.query.type ||
                      new URLSearchParams(window.location.search).urlParams.get(
                        "type"
                      )
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateType"] != null &&
              typeof $steps["updateType"] === "object" &&
              typeof $steps["updateType"].then === "function"
            ) {
              $steps["updateType"] = await $steps["updateType"];
            }

            $steps["updateStepscharg"] =
              $state.type != ""
                ? (() => {
                    const actionArgs = {
                      vgroup: "stepscharg",
                      operation: 0,
                      value: "step1"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateStepscharg"] != null &&
              typeof $steps["updateStepscharg"] === "object" &&
              typeof $steps["updateStepscharg"].then === "function"
            ) {
              $steps["updateStepscharg"] = await $steps["updateStepscharg"];
            }
          }}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  chargeStep1: [
    "chargeStep1",
    "header",
    "reveal",
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "radioButton",
    "fragmentInput3",
    "fragmentInput4",
    "fragmentInput5",
    "billId",
    "idinput",
    "billId3",
    "idinput3",
    "billId2",
    "idinput2",
    "fragmentInput2",
    "operators",
    "boxselect",
    "operators3",
    "boxselect3",
    "nobill",
    "bills",
    "popover",
    "button3",
    "button4",
    "backstep3",
    "step1Next2",
    "step1Next",
    "backstep2",
    "addBill",
    "step2Next",
    "modal",
    "ul",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u0631",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06312",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06313",
    "button",
    "modal2",
    "lottie",
    "button2",
    "commissionBabarkat",
    "type2",
    "comingSoon13",
    "comingSoon14",
    "comingSoon15",
    "comingSoon16",
    "comingSoon17",
    "comingSoon18",
    "edit",
    "comingSoon19",
    "comingSoon20",
    "comingSoon21",
    "comingSoon22",
    "comingSoon23",
    "comingSoon24",
    "info",
    "loading",
    "exitModal",
    "button5",
    "button6",
    "sideEffect"
  ],
  header: ["header"],
  reveal: [
    "reveal",
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "radioButton",
    "fragmentInput3",
    "fragmentInput4",
    "fragmentInput5",
    "billId",
    "idinput",
    "billId3",
    "idinput3",
    "billId2",
    "idinput2",
    "fragmentInput2",
    "operators",
    "boxselect",
    "operators3",
    "boxselect3",
    "nobill",
    "bills",
    "popover",
    "button3",
    "button4"
  ],
  wallet: [
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "radioButton",
    "fragmentInput3",
    "fragmentInput4",
    "fragmentInput5",
    "billId",
    "idinput",
    "billId3",
    "idinput3",
    "billId2",
    "idinput2",
    "fragmentInput2"
  ],
  steps: [
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2"
  ],
  مشخصات: ["\u0645\u0634\u062e\u0635\u0627\u062a", "selected"],
  selected: ["selected"],
  مبلغشارژ: ["\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698", "unselected"],
  unselected: ["unselected"],
  تاییدخرید: [
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2"
  ],
  unselected2: ["unselected2"],
  radioButton: ["radioButton"],
  fragmentInput3: ["fragmentInput3"],
  fragmentInput4: ["fragmentInput4"],
  fragmentInput5: ["fragmentInput5"],
  billId: ["billId", "idinput"],
  idinput: ["idinput"],
  billId3: ["billId3", "idinput3"],
  idinput3: ["idinput3"],
  billId2: ["billId2", "idinput2"],
  idinput2: ["idinput2"],
  fragmentInput2: ["fragmentInput2"],
  operators: ["operators", "boxselect"],
  boxselect: ["boxselect"],
  operators3: ["operators3", "boxselect3"],
  boxselect3: ["boxselect3"],
  nobill: ["nobill"],
  bills: ["bills", "popover", "button3", "button4"],
  popover: ["popover", "button3", "button4"],
  button3: ["button3"],
  button4: ["button4"],
  backstep3: ["backstep3"],
  step1Next2: ["step1Next2"],
  step1Next: ["step1Next"],
  backstep2: ["backstep2"],
  addBill: ["addBill"],
  step2Next: ["step2Next"],
  modal: [
    "modal",
    "ul",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u0631",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06312",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06313",
    "button"
  ],
  ul: [
    "ul",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u0631",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06312",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06313"
  ],
  اپراتور: ["\u0627\u067e\u0631\u0627\u062a\u0648\u0631"],
  اپراتور2: ["\u0627\u067e\u0631\u0627\u062a\u0648\u06312"],
  اپراتور3: ["\u0627\u067e\u0631\u0627\u062a\u0648\u06313"],
  button: ["button"],
  modal2: ["modal2", "lottie", "button2"],
  lottie: ["lottie"],
  button2: ["button2"],
  commissionBabarkat: ["commissionBabarkat"],
  type2: [
    "type2",
    "comingSoon13",
    "comingSoon14",
    "comingSoon15",
    "comingSoon16",
    "comingSoon17",
    "comingSoon18"
  ],
  comingSoon13: ["comingSoon13"],
  comingSoon14: ["comingSoon14"],
  comingSoon15: ["comingSoon15"],
  comingSoon16: ["comingSoon16"],
  comingSoon17: ["comingSoon17"],
  comingSoon18: ["comingSoon18"],
  edit: [
    "edit",
    "comingSoon19",
    "comingSoon20",
    "comingSoon21",
    "comingSoon22",
    "comingSoon23",
    "comingSoon24"
  ],
  comingSoon19: ["comingSoon19"],
  comingSoon20: ["comingSoon20"],
  comingSoon21: ["comingSoon21"],
  comingSoon22: ["comingSoon22"],
  comingSoon23: ["comingSoon23"],
  comingSoon24: ["comingSoon24"],
  info: ["info"],
  loading: ["loading"],
  exitModal: ["exitModal", "button5", "button6"],
  button5: ["button5"],
  button6: ["button6"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  chargeStep1: "div";
  header: "div";
  reveal: typeof Reveal;
  wallet: "div";
  steps: "div";
  مشخصات: "div";
  selected: "svg";
  مبلغشارژ: "div";
  unselected: "svg";
  تاییدخرید: "div";
  unselected2: "svg";
  radioButton: typeof RadioButton;
  fragmentInput3: typeof Input;
  fragmentInput4: typeof Input;
  fragmentInput5: typeof Input;
  billId: "div";
  idinput: typeof Input;
  billId3: "div";
  idinput3: typeof Input;
  billId2: "div";
  idinput2: typeof Input;
  fragmentInput2: typeof Input;
  operators: "div";
  boxselect: typeof Boxselect;
  operators3: "div";
  boxselect3: typeof Boxselect;
  nobill: "div";
  bills: "div";
  popover: typeof AntdPopover;
  button3: typeof Button;
  button4: typeof Button;
  backstep3: typeof Button;
  step1Next2: typeof Button;
  step1Next: typeof Button;
  backstep2: typeof Button;
  addBill: typeof Button;
  step2Next: typeof Button;
  modal: typeof AntdModal;
  ul: "ul";
  اپراتور: "div";
  اپراتور2: "div";
  اپراتور3: "div";
  button: typeof Button;
  modal2: typeof AntdModal;
  lottie: typeof LottieWrapper;
  button2: typeof Button;
  commissionBabarkat: typeof ApiRequest;
  type2: typeof AntdModal;
  comingSoon13: "div";
  comingSoon14: "div";
  comingSoon15: "div";
  comingSoon16: "div";
  comingSoon17: "div";
  comingSoon18: "div";
  edit: typeof AntdModal;
  comingSoon19: "div";
  comingSoon20: "div";
  comingSoon21: "div";
  comingSoon22: "div";
  comingSoon23: "div";
  comingSoon24: "div";
  info: typeof AntdModal;
  loading: typeof Loading;
  exitModal: typeof AntdModal;
  button5: typeof Button;
  button6: typeof Button;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBill__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBill__VariantsArgs;
    args?: PlasmicBill__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBill__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBill__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBill__ArgProps,
          internalVariantPropNames: PlasmicBill__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBill__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "chargeStep1") {
    func.displayName = "PlasmicBill";
  } else {
    func.displayName = `PlasmicBill.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sZQMbqXz9utLNaTnNb3uss"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicBill = Object.assign(
  // Top-level PlasmicBill renders the root element
  withUsePlasmicAuth(makeNodeComponent("chargeStep1")),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    reveal: makeNodeComponent("reveal"),
    wallet: makeNodeComponent("wallet"),
    steps: makeNodeComponent("steps"),
    مشخصات: makeNodeComponent("\u0645\u0634\u062e\u0635\u0627\u062a"),
    selected: makeNodeComponent("selected"),
    مبلغشارژ: makeNodeComponent(
      "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698"
    ),
    unselected: makeNodeComponent("unselected"),
    تاییدخرید: makeNodeComponent(
      "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f"
    ),
    unselected2: makeNodeComponent("unselected2"),
    radioButton: makeNodeComponent("radioButton"),
    fragmentInput3: makeNodeComponent("fragmentInput3"),
    fragmentInput4: makeNodeComponent("fragmentInput4"),
    fragmentInput5: makeNodeComponent("fragmentInput5"),
    billId: makeNodeComponent("billId"),
    idinput: makeNodeComponent("idinput"),
    billId3: makeNodeComponent("billId3"),
    idinput3: makeNodeComponent("idinput3"),
    billId2: makeNodeComponent("billId2"),
    idinput2: makeNodeComponent("idinput2"),
    fragmentInput2: makeNodeComponent("fragmentInput2"),
    operators: makeNodeComponent("operators"),
    boxselect: makeNodeComponent("boxselect"),
    operators3: makeNodeComponent("operators3"),
    boxselect3: makeNodeComponent("boxselect3"),
    nobill: makeNodeComponent("nobill"),
    bills: makeNodeComponent("bills"),
    popover: makeNodeComponent("popover"),
    button3: makeNodeComponent("button3"),
    button4: makeNodeComponent("button4"),
    backstep3: makeNodeComponent("backstep3"),
    step1Next2: makeNodeComponent("step1Next2"),
    step1Next: makeNodeComponent("step1Next"),
    backstep2: makeNodeComponent("backstep2"),
    addBill: makeNodeComponent("addBill"),
    step2Next: makeNodeComponent("step2Next"),
    modal: makeNodeComponent("modal"),
    ul: makeNodeComponent("ul"),
    اپراتور: makeNodeComponent("\u0627\u067e\u0631\u0627\u062a\u0648\u0631"),
    اپراتور2: makeNodeComponent("\u0627\u067e\u0631\u0627\u062a\u0648\u06312"),
    اپراتور3: makeNodeComponent("\u0627\u067e\u0631\u0627\u062a\u0648\u06313"),
    button: makeNodeComponent("button"),
    modal2: makeNodeComponent("modal2"),
    lottie: makeNodeComponent("lottie"),
    button2: makeNodeComponent("button2"),
    commissionBabarkat: makeNodeComponent("commissionBabarkat"),
    type2: makeNodeComponent("type2"),
    comingSoon13: makeNodeComponent("comingSoon13"),
    comingSoon14: makeNodeComponent("comingSoon14"),
    comingSoon15: makeNodeComponent("comingSoon15"),
    comingSoon16: makeNodeComponent("comingSoon16"),
    comingSoon17: makeNodeComponent("comingSoon17"),
    comingSoon18: makeNodeComponent("comingSoon18"),
    edit: makeNodeComponent("edit"),
    comingSoon19: makeNodeComponent("comingSoon19"),
    comingSoon20: makeNodeComponent("comingSoon20"),
    comingSoon21: makeNodeComponent("comingSoon21"),
    comingSoon22: makeNodeComponent("comingSoon22"),
    comingSoon23: makeNodeComponent("comingSoon23"),
    comingSoon24: makeNodeComponent("comingSoon24"),
    info: makeNodeComponent("info"),
    loading: makeNodeComponent("loading"),
    exitModal: makeNodeComponent("exitModal"),
    button5: makeNodeComponent("button5"),
    button6: makeNodeComponent("button6"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicBill
    internalVariantProps: PlasmicBill__VariantProps,
    internalArgProps: PlasmicBill__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "بابرکت",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBill;
/* prettier-ignore-end */
