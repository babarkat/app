/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: b-NdD4-urlc5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import Boxselect from "../../Boxselect"; // plasmic-import: zrEzOXBZcn1e/component
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: OG1SoduAPhRs/codeComponent
import Loading from "../../Loading"; // plasmic-import: LqAqGtGaA2Da/component

import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicBill.module.css"; // plasmic-import: b-NdD4-urlc5/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dXgXrJG5lp3Z/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: ABwvUbBMtZqM/icon
import Icon61Icon from "./icons/PlasmicIcon__Icon61"; // plasmic-import: 6aKHa8qmDKOv/icon
import RadioButtonCheckedSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__RadioButtonCheckedSvgrepoCom2Svg"; // plasmic-import: txDOSA20FGud/icon
import CheckCircleSvgrepoComSvgIcon from "./icons/PlasmicIcon__CheckCircleSvgrepoComSvg"; // plasmic-import: 3lQ_sc0p8wap/icon
import LineXlSvgrepoComSvgIcon from "./icons/PlasmicIcon__LineXlSvgrepoComSvg"; // plasmic-import: PKDhRR5tO_9t/icon
import Group4SvgIcon from "./icons/PlasmicIcon__Group4Svg"; // plasmic-import: 8w6sGTNqgCIT/icon
import Group7SvgIcon from "./icons/PlasmicIcon__Group7Svg"; // plasmic-import: o5fEPeaAf9nA/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jg6gpiNRWEQd/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon95Icon from "./icons/PlasmicIcon__Icon95"; // plasmic-import: IThJ_Rij_EiI/icon
import Icon92Icon from "./icons/PlasmicIcon__Icon92"; // plasmic-import: SowHoWtrM2eF/icon
import Icon78Icon from "./icons/PlasmicIcon__Icon78"; // plasmic-import: Yub8sXrIQi2p/icon
import Icon89Icon from "./icons/PlasmicIcon__Icon89"; // plasmic-import: 1mHusOdupjsZ/icon
import Icon93Icon from "./icons/PlasmicIcon__Icon93"; // plasmic-import: H9ZR0vqaPIx2/icon
import Icon94Icon from "./icons/PlasmicIcon__Icon94"; // plasmic-import: _0EJmP7Ze04b/icon

import { v4 as __lib_uuid__v4 } from "uuid";

createPlasmicElementProxy;

export type PlasmicBill__VariantMembers = {
  stepscharg: "step2" | "step3" | "step1";
};
export type PlasmicBill__VariantsArgs = {
  stepscharg?: SingleChoiceArg<"step2" | "step3" | "step1">;
};
type VariantPropType = keyof PlasmicBill__VariantsArgs;
export const PlasmicBill__VariantProps = new Array<VariantPropType>(
  "stepscharg"
);

export type PlasmicBill__ArgsType = {};
type ArgPropType = keyof PlasmicBill__ArgsType;
export const PlasmicBill__ArgProps = new Array<ArgPropType>();

export type PlasmicBill__OverridesType = {
  chargeStep1?: Flex__<"div">;
  header?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  wallet?: Flex__<"div">;
  steps?: Flex__<"div">;
  مشخصات?: Flex__<"div">;
  selected?: Flex__<"svg">;
  مبلغشارژ?: Flex__<"div">;
  unselected?: Flex__<"svg">;
  تاییدخرید?: Flex__<"div">;
  unselected2?: Flex__<"svg">;
  fragmentInput3?: Flex__<typeof Input>;
  fragmentInput4?: Flex__<typeof Input>;
  idinput?: Flex__<typeof Input>;
  fragmentInput2?: Flex__<typeof Input>;
  operators?: Flex__<"div">;
  boxselect?: Flex__<typeof Boxselect>;
  operators3?: Flex__<"div">;
  boxselect3?: Flex__<typeof Boxselect>;
  chargeType?: Flex__<"div">;
  boxselect2?: Flex__<typeof Boxselect>;
  backstep2?: Flex__<typeof Button>;
  backstep3?: Flex__<typeof Button>;
  step1Next?: Flex__<typeof Button>;
  step1Next2?: Flex__<typeof Button>;
  embedHtml?: Flex__<typeof Embed>;
  addBill?: Flex__<typeof Button>;
  step2Next?: Flex__<typeof Button>;
  modal?: Flex__<typeof AntdModal>;
  ul?: Flex__<"ul">;
  اپراتور?: Flex__<"div">;
  اپراتور2?: Flex__<"div">;
  اپراتور3?: Flex__<"div">;
  modal2?: Flex__<typeof AntdModal>;
  lottie?: Flex__<typeof LottieWrapper>;
  commissionBabarkat?: Flex__<typeof ApiRequest>;
  type2?: Flex__<typeof AntdModal>;
  comingSoon12?: Flex__<"div">;
  comingSoon13?: Flex__<"div">;
  loading?: Flex__<typeof Loading>;
};

export interface DefaultBillProps {}

const $$ = {
  uuid: {
    v4: __lib_uuid__v4
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBill__RenderFunc(props: {
  variants: PlasmicBill__VariantsArgs;
  args: PlasmicBill__ArgsType;
  overrides: PlasmicBill__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "idinput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "operators2",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            name: "MTN",
            nameop: "Irancell",
            description:
              "\u0634\u0627\u0631\u0698 \u0627\u06cc\u0631\u0627\u0646\u0633\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image19.svg",
            codes: [
              "0900",
              "0901",
              "0902",
              "0903",
              "0904",
              "0905",
              "0930",
              "0933",
              "0935",
              "0936",
              "0937",
              "0938",
              "0939",
              "0941"
            ],
            chargeRange: { min: 1000, max: 100000, customAmounts: true },
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [5000, 10000, 20000, 50000, 100000]
              },
              {
                type: "amazing",
                text: "\u0634\u06af\u0641\u062a\u200c\u0627\u0646\u06af\u06cc\u0632",
                chargeAmounts: [5000, 10000, 20000, 30000]
              }
            ]
          },
          {
            name: "MCI",
            nameop: "hamrah_Aval",
            description:
              "\u0634\u0627\u0631\u0698 \u0647\u0645\u0631\u0627\u0647 \u0627\u0648\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image20.svg",
            codes: [
              "0910",
              "0911",
              "0912",
              "0913",
              "0914",
              "0915",
              "0916",
              "0917",
              "0918",
              "0919",
              "0990",
              "0991",
              "0992",
              "0993",
              "0994",
              "0996"
            ],
            chargeRange: {
              min: 1000,
              max: 100000,
              customAmounts: false,
              amountStep: 1000
            },
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [5000, 10000, 20000, 50000, 100000]
              }
            ]
          },
          {
            name: "RTL",
            nameop: "RighTel ",
            description:
              "\u0634\u0627\u0631\u0698 \u0631\u0627\u06cc\u062a\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image22.svg",
            codes: ["0920", "0921", "0922", "0923"],
            chargeRange: { min: 1000, max: 100000, customAmounts: true },
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [5000, 10000, 20000, 50000, 100000]
              },
              {
                type: "amazing",
                text: "\u0634\u06af\u0641\u062a\u200c\u0627\u0646\u06af\u06cc\u0632",
                chargeAmounts: [2000, 5000, 10000, 20000, 50000]
              }
            ]
          },
          {
            name: "SHT",
            nameop: "Shatel",
            description:
              "\u0634\u0627\u0631\u0698 \u0634\u0627\u062a\u0644 \u0645\u0648\u0628\u0627\u06cc\u0644",
            logoUrl:
              "https://app.babarkat.com/plasmic/babarkat/images/image21.svg",
            codes: ["0998", "0999"],
            services: [
              {
                type: "normal",
                text: "\u0645\u0639\u0645\u0648\u0644\u06cc",
                chargeAmounts: [1090, 2180, 5450, 10900, 21800, 54500]
              }
            ]
          }
        ]
      },
      {
        path: "operatorselect",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => -1
      },
      {
        path: "boxselect[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "boxselect2[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "typecharge",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "boxselect[].disable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "boxselect2[].disable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "chargeType2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "fragmentInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "stepscharg", "step2") ? `` : ""
      },
      {
        path: "boxselect3[].select",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "boxselect3[].disable2",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "amont",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "stepscharg",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stepscharg
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mojody",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userinfo.toman;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "uuid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "stepscharg", "step3") ? false : false
      },
      {
        path: "infopardakt",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "userinfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userbabarcat");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pardakhtid",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(sessionStorage.getItem("userbabarcatToken"))
                .value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "commissionBabarkat.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commissionBabarkat.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "commissionBabarkat.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "type2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "id"
      },
      {
        path: "fragmentInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "fragmentInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loading.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsosEvNkdp6Zt6()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBill.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBill.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBill.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"chargeStep1"}
          data-plasmic-override={overrides.chargeStep1}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.chargeStep1,
            hasVariant($state, "stepscharg", "step3") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
              ? "page"
              : hasVariant($state, "stepscharg", "step3")
              ? "page"
              : undefined,
            {
              [sty.chargeStep1stepscharg_step1]: hasVariant(
                $state,
                "stepscharg",
                "step1"
              ),
              [sty.chargeStep1stepscharg_step2]: hasVariant(
                $state,
                "stepscharg",
                "step2"
              ),
              [sty.chargeStep1stepscharg_step3]: hasVariant(
                $state,
                "stepscharg",
                "step3"
              )
            }
          )}
        >
          <section className={classNames(projectcss.all, sty.section___1Mdb)}>
            <div
              className={classNames(projectcss.all, sty.freeBox__mpDk, {
                [sty.freeBoxstepscharg_step2__mpDkAvykh]: hasVariant(
                  $state,
                  "stepscharg",
                  "step2"
                ),
                [sty.freeBoxstepscharg_step3__mpDkTqZTv]: hasVariant(
                  $state,
                  "stepscharg",
                  "step3"
                )
              })}
            >
              <div
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames(projectcss.all, sty.header, {
                  [sty.headerstepscharg_step2]: hasVariant(
                    $state,
                    "stepscharg",
                    "step2"
                  ),
                  [sty.headerstepscharg_step3]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon10Icon
                      : Icon3Icon
                  }
                  className={classNames(projectcss.all, sty.svg__qGyiK, {
                    [sty.svgstepscharg_step2__qGyiKAvykh]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.svgstepscharg_step3__qGyiKTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9DAgr
                  )}
                >
                  {"\u0642\u0628\u0636"}
                </div>
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon9Icon
                      : Icon9Icon
                  }
                  className={classNames(projectcss.all, sty.svg__pqJFh, {
                    [sty.svgstepscharg_step3__pqJFhTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }}
                  role={"img"}
                />
              </div>
              <Reveal
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                cascade={false}
                className={classNames("__wab_instance", sty.reveal, {
                  [sty.revealstepscharg_step2]: hasVariant(
                    $state,
                    "stepscharg",
                    "step2"
                  )
                })}
                duration={
                  hasVariant($state, "stepscharg", "step2") ? 2000 : undefined
                }
                effect={
                  hasVariant($state, "stepscharg", "step2") ? "fade" : "fade"
                }
                reverse={
                  hasVariant($state, "stepscharg", "step2") ? false : undefined
                }
                triggerOnce={true}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"wallet"}
                  data-plasmic-override={overrides.wallet}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.wallet, {
                    [sty.walletstepscharg_step1]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.walletstepscharg_step2]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.walletstepscharg_step3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <Icon61Icon
                    className={classNames(projectcss.all, sty.svg__yjxOe, {
                      [sty.svgstepscharg_step2__yjxOeAvykh]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.svgstepscharg_step3__yjxOeTqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"steps"}
                    data-plasmic-override={overrides.steps}
                    className={classNames(projectcss.all, sty.steps, {
                      [sty.stepsstepscharg_step2]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.stepsstepscharg_step3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    <div
                      data-plasmic-name={"\u0645\u0634\u062e\u0635\u0627\u062a"}
                      data-plasmic-override={overrides.مشخصات}
                      className={classNames(projectcss.all, sty.مشخصات)}
                    >
                      <PlasmicIcon__
                        data-plasmic-name={"selected"}
                        data-plasmic-override={overrides.selected}
                        PlasmicIconType={
                          hasVariant($state, "stepscharg", "step3")
                            ? CheckCircleSvgrepoComSvgIcon
                            : hasVariant($state, "stepscharg", "step2")
                            ? CheckCircleSvgrepoComSvgIcon
                            : RadioButtonCheckedSvgrepoCom2SvgIcon
                        }
                        className={classNames(projectcss.all, sty.selected, {
                          [sty.selectedstepscharg_step2]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.selectedstepscharg_step3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dr5Sp,
                          {
                            [sty.textstepscharg_step2__dr5SpAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3__dr5SpTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {"\u0645\u0634\u062e\u0635\u0627\u062a"}
                      </div>
                    </div>
                    <LineXlSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__wWiHf)}
                      role={"img"}
                    />

                    <div
                      data-plasmic-name={
                        "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698"
                      }
                      data-plasmic-override={overrides.مبلغشارژ}
                      className={classNames(projectcss.all, sty.مبلغشارژ)}
                    >
                      <PlasmicIcon__
                        data-plasmic-name={"unselected"}
                        data-plasmic-override={overrides.unselected}
                        PlasmicIconType={
                          hasVariant($state, "stepscharg", "step3")
                            ? CheckCircleSvgrepoComSvgIcon
                            : RadioButtonCheckedSvgrepoCom2SvgIcon
                        }
                        className={classNames(projectcss.all, sty.unselected, {
                          [sty.unselectedstepscharg_step2]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.unselectedstepscharg_step3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7Mhfp,
                          {
                            [sty.textstepscharg_step2___7MhfpAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3___7MhfpTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {"\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698"}
                      </div>
                    </div>
                    <LineXlSvgrepoComSvgIcon
                      className={classNames(projectcss.all, sty.svg__sNzY)}
                      role={"img"}
                    />

                    <div
                      data-plasmic-name={
                        "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f"
                      }
                      data-plasmic-override={overrides.تاییدخرید}
                      className={classNames(projectcss.all, sty.تاییدخرید, {
                        [sty.تاییدخریدstepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        )
                      })}
                    >
                      <RadioButtonCheckedSvgrepoCom2SvgIcon
                        data-plasmic-name={"unselected2"}
                        data-plasmic-override={overrides.unselected2}
                        className={classNames(projectcss.all, sty.unselected2, {
                          [sty.unselected2stepscharg_step2]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.unselected2stepscharg_step3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dPYdD,
                          {
                            [sty.textstepscharg_step2__dPYdDAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3__dPYdDTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u062a\u0627\u06cc\u06cc\u062f \u062e\u0631\u06cc\u062f"
                          : "\u062a\u0627\u0626\u06cc\u062f \u062e\u0631\u06cc\u062f"}
                      </div>
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__c6PsJ, {
                      [sty.freeBoxstepscharg_step2__c6PsJAvykh]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.freeBoxstepscharg_step3__c6PsJTqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ovHho,
                        {
                          [sty.textstepscharg_step1__ovHhoqKzi3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          ),
                          [sty.textstepscharg_step2__ovHhoAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.textstepscharg_step3__ovHhoTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "stepscharg", "step3")
                        ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                        : hasVariant($state, "stepscharg", "step2")
                        ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                        : "\u0634\u0646\u0627\u0633\u0647 \u0642\u0628\u0636 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__z1Dcz,
                        {
                          [sty.freeBoxstepscharg_step2__z1DczAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.freeBoxstepscharg_step3__z1DczTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a161,
                            {
                              [sty.textstepscharg_step2__a161Avykh]: hasVariant(
                                $state,
                                "stepscharg",
                                "step2"
                              ),
                              [sty.textstepscharg_step3__a161TqZTv]: hasVariant(
                                $state,
                                "stepscharg",
                                "step3"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u0639\u0646\u0648\u0627\u0646 \u067e\u0631\u062f\u0627\u062e\u062a"
                            : hasVariant($state, "stepscharg", "step2")
                            ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                            : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gTc8C,
                            {
                              [sty.textstepscharg_step2__gTc8CAvykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__gTc8CTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $state.operators2[$state.operatorselect]
                                      .description +
                                    " " +
                                    $state.operators2[$state.operatorselect]
                                      .services[$state.typecharge].text
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0639\u0646\u0648\u0627\u0646 \u067e\u0631\u062f\u0627\u062e\u062a";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : hasVariant($state, "stepscharg", "step2") ? (
                            "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          ) : (
                            "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          )}
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__okEke,
                        {
                          [sty.freeBoxstepscharg_step2__okEkeAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.freeBoxstepscharg_step3__okEkeTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__my9Y4,
                            {
                              [sty.textstepscharg_step2__my9Y4Avykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__my9Y4TqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                            : hasVariant($state, "stepscharg", "step2")
                            ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                            : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0JTo9,
                            {
                              [sty.textstepscharg_step2___0JTo9Avykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3___0JTo9TqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.number;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : hasVariant($state, "stepscharg", "step2") ? (
                            "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          ) : (
                            "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          )}
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__eJoqq,
                        {
                          [sty.freeBoxstepscharg_step2__eJoqqAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.freeBoxstepscharg_step3__eJoqqTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r4Xam,
                            {
                              [sty.textstepscharg_step2__r4XamAvykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__r4XamTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a"
                            : hasVariant($state, "stepscharg", "step2")
                            ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                            : "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."}
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "stepscharg", "step3") ? true : false
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5AQQ,
                            {
                              [sty.textstepscharg_step2___5AQQAvykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3___5AQQTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    (
                                      parseInt($state.amont) +
                                      parseInt($state.amont) *
                                        (($state.commissionBabarkat.data
                                          .babrkat +
                                          $state.commissionBabarkat.data
                                            .saraf) /
                                          100)
                                    ).toLocaleString("en") + " تومان "
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0628\u0644\u063a \u0646\u0647\u0627\u06cc\u06cc";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : hasVariant($state, "stepscharg", "step2") ? (
                            "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          ) : (
                            "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u06af\u06cc\u0631\u0646\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          )}
                        </div>
                      ) : null}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lP6JV, {
                      [sty.freeBoxstepscharg_step2__lP6JVAvykh]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__aci6W,
                        {
                          [sty.freeBoxstepscharg_step1__aci6WqKzi3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tz4Bs,
                          {
                            [sty.textstepscharg_step1__tz4BsqKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.textstepscharg_step2__tz4BsAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.textstepscharg_step3__tz4BsTqZTv]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step3")
                          ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                          : hasVariant($state, "stepscharg", "step2")
                          ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                          : "\u0646\u0627\u0645 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
                      </div>
                      <Input
                        data-plasmic-name={"fragmentInput3"}
                        data-plasmic-override={overrides.fragmentInput3}
                        className={classNames(
                          "__wab_instance",
                          sty.fragmentInput3,
                          {
                            [sty.fragmentInput3stepscharg_step2]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.fragmentInput3stepscharg_step3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "fragmentInput3",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        placeholder={
                          "\u0645\u0627\u0646\u0646\u062f: \u062e\u0627\u0646\u0647 ( \u0627\u062e\u062a\u06cc\u0627\u0631\u06cc )"
                        }
                        type={"text"}
                        value={generateStateValueProp($state, [
                          "fragmentInput3",
                          "value"
                        ])}
                      />
                    </div>
                    {(
                      hasVariant($state, "stepscharg", "step1")
                        ? (() => {
                            try {
                              return $state.type == "mobile";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kAcN3,
                          {
                            [sty.freeBoxstepscharg_step1__kAcN3QKzi3]:
                              hasVariant($state, "stepscharg", "step1")
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__o8Bft,
                            {
                              [sty.textstepscharg_step1__o8BftQKzi3]:
                                hasVariant($state, "stepscharg", "step1"),
                              [sty.textstepscharg_step2__o8BftAvykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__o8BftTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                            : hasVariant($state, "stepscharg", "step2")
                            ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                            : "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 \u06cc\u0627 \u062b\u0627\u0628\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
                        </div>
                        <Input
                          data-plasmic-name={"fragmentInput4"}
                          data-plasmic-override={overrides.fragmentInput4}
                          className={classNames(
                            "__wab_instance",
                            sty.fragmentInput4,
                            {
                              [sty.fragmentInput4stepscharg_step2]: hasVariant(
                                $state,
                                "stepscharg",
                                "step2"
                              ),
                              [sty.fragmentInput4stepscharg_step3]: hasVariant(
                                $state,
                                "stepscharg",
                                "step3"
                              )
                            }
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "fragmentInput4",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          placeholder={
                            "\u0645\u0627\u0646\u0646\u062f: 09121234567"
                          }
                          type={"tel"}
                          value={generateStateValueProp($state, [
                            "fragmentInput4",
                            "value"
                          ])}
                        />
                      </div>
                    ) : null}
                    {(
                      hasVariant($state, "stepscharg", "step1")
                        ? (() => {
                            try {
                              return $state.type == "id";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sZy8D,
                          {
                            [sty.freeBoxstepscharg_step1__sZy8DQKzi3]:
                              hasVariant($state, "stepscharg", "step1")
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wuKnw,
                            {
                              [sty.textstepscharg_step1__wuKnwQKzi3]:
                                hasVariant($state, "stepscharg", "step1"),
                              [sty.textstepscharg_step2__wuKnwAvykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__wuKnwTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                            : hasVariant($state, "stepscharg", "step2")
                            ? "\u0645\u0628\u0644\u063a \u0634\u0627\u0631\u0698 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f(\u062a\u0648\u0645\u0627\u0646)."
                            : "\u0634\u0646\u0627\u0633\u0647 \u0642\u0628\u0636 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."}
                        </div>
                        <Input
                          data-plasmic-name={"idinput"}
                          data-plasmic-override={overrides.idinput}
                          className={classNames("__wab_instance", sty.idinput, {
                            [sty.idinputstepscharg_step2]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.idinputstepscharg_step3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          })}
                          name={"idNumber"}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "idinput",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          placeholder={
                            "\u0645\u0627\u0646\u0646\u062f: 12345678"
                          }
                          type={"tel"}
                          value={generateStateValueProp($state, [
                            "idinput",
                            "value"
                          ])}
                        />
                      </div>
                    ) : null}
                  </Stack__>
                  {(
                    hasVariant($state, "stepscharg", "step2") ? true : false
                  ) ? (
                    <Input
                      data-plasmic-name={"fragmentInput2"}
                      data-plasmic-override={overrides.fragmentInput2}
                      className={classNames(
                        "__wab_instance",
                        sty.fragmentInput2,
                        {
                          [sty.fragmentInput2stepscharg_step1]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          ),
                          [sty.fragmentInput2stepscharg_step2]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.fragmentInput2stepscharg_step3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                      disabled={
                        hasVariant($state, "stepscharg", "step2") &&
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? (() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          : hasVariant($state, "stepscharg", "step2")
                          ? (() => {
                              try {
                                return (
                                  $state.typecharge == 1 ||
                                  $state.operatorselect == 3
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          : undefined
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "fragmentInput2",
                          "value"
                        ]).apply(null, eventArgs);

                        (async value => {
                          const $steps = {};

                          $steps["updateAmont"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["amont"]
                                  },
                                  operation: 0,
                                  value: parseInt($state.fragmentInput2.value)
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateAmont"] != null &&
                            typeof $steps["updateAmont"] === "object" &&
                            typeof $steps["updateAmont"].then === "function"
                          ) {
                            $steps["updateAmont"] = await $steps["updateAmont"];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={"\u062a\u0648\u0645\u0627\u0646"}
                      type={
                        hasVariant($state, "stepscharg", "step2")
                          ? "number"
                          : "number"
                      }
                      value={generateStateValueProp($state, [
                        "fragmentInput2",
                        "value"
                      ])}
                    />
                  ) : null}
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__i7Zny, {
                    [sty.freeBoxstepscharg_step2__i7ZnyAvykh]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.freeBoxstepscharg_step3__i7ZnyTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rrNu,
                      {
                        [sty.textstepscharg_step2__rrNuAvykh]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        )
                      }
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0627\u067e\u0631\u0627\u062a\u0648\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                      : "\u0627\u067e\u0631\u0627\u062a\u0648\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"operators"}
                    data-plasmic-override={overrides.operators}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.operators, {
                      [sty.operatorsstepscharg_step2]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      )
                    })}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.operators2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const operatoritem = __plasmic_item_0;
                      const operatorIndex = __plasmic_idx_0;
                      return (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.boxselect
                          ),
                          disable2: generateStateValueProp($state, [
                            "boxselect",
                            __plasmic_idx_0,
                            "disable2"
                          ]),
                          key: operatorIndex,
                          onClick: async event => {
                            const $steps = {};

                            $steps["runCode"] = !$state.boxselect[0].disable2
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        for (
                                          let i = 0;
                                          i < $state.boxselect.length;
                                          i++
                                        ) {
                                          $state.boxselect[i].select = false;
                                        }
                                        $state.boxselect[operatorIndex].select =
                                          true;
                                        $state.boxselect2[0].select = true;
                                        $state.operatorselect = operatorIndex;
                                        for (
                                          let i = 0;
                                          i < $state.boxselect2.length;
                                          i++
                                        ) {
                                          $state.boxselect2[i].select = false;
                                        }
                                        $state.boxselect2[0].select = true;
                                        return ($state.typecharge = 0);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          },
                          onDisable2Change: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "boxselect",
                              __plasmic_idx_0,
                              "disable2"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          onSelectChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "boxselect",
                              __plasmic_idx_0,
                              "select"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          select: generateStateValueProp($state, [
                            "boxselect",
                            __plasmic_idx_0,
                            "select"
                          ])
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "boxselect[].select",
                              initFunc: ({ $props, $state, $queries }) =>
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? false
                                  : false
                            },
                            {
                              name: "boxselect[].disable2",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return $state.idinput.value.length != 11;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Boxselect
                            data-plasmic-name={"boxselect"}
                            data-plasmic-override={overrides.boxselect}
                            {...child$Props}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__d8XkB, {
                                [sty.imgstepscharg_step3__d8XkBTqZTv]:
                                  hasVariant($state, "stepscharg", "step3")
                              })}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "50px"
                                  : "60px"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={(() => {
                                try {
                                  return operatoritem.logoUrl;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </Boxselect>
                        );
                      })();
                    })}
                  </Stack__>
                </div>
                {(hasVariant($state, "stepscharg", "step2") ? true : false) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__e9MOi, {
                      [sty.freeBoxstepscharg_step2__e9MOiAvykh]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.freeBoxstepscharg_step3__e9MOiTqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__riyhU,
                        {
                          [sty.textstepscharg_step2__riyhUAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.textstepscharg_step3__riyhUTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "stepscharg", "step3")
                        ? "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u062f\u0627\u062e\u062a"
                        : hasVariant($state, "stepscharg", "step2")
                        ? "\u0645\u0628\u0644\u063a \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u06cc (\u062a\u0648\u0645\u0627\u0646)"
                        : ""}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"operators3"}
                      data-plasmic-override={overrides.operators3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.operators3, {
                        [sty.operators3stepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.operators3stepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.operators2[$state.operatorselect]
                              .services[$state.typecharge].chargeAmounts;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const amonttem = __plasmic_item_0;
                        const amontIndex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.boxselect3,
                              {
                                [sty.boxselect3stepscharg_step2]: hasVariant(
                                  $state,
                                  "stepscharg",
                                  "step2"
                                ),
                                [sty.boxselect3stepscharg_step3]: hasVariant(
                                  $state,
                                  "stepscharg",
                                  "step3"
                                )
                              }
                            ),
                            disable2: generateStateValueProp($state, [
                              "boxselect3",
                              __plasmic_idx_0,
                              "disable2"
                            ]),
                            key: amontIndex,
                            onClick: async event => {
                              const $steps = {};

                              $steps["runCode"] = !$state.boxselect3[0].disable2
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          for (
                                            let i = 0;
                                            i < $state.boxselect3.length;
                                            i++
                                          ) {
                                            $state.boxselect3[i].select = false;
                                          }
                                          $state.boxselect3[amontIndex].select =
                                            true;
                                          $state.amont = amonttem;
                                          return ($state.fragmentInput2.value =
                                            amonttem);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            },
                            onDisable2Change: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "boxselect3",
                                __plasmic_idx_0,
                                "disable2"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onSelectChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "boxselect3",
                                __plasmic_idx_0,
                                "select"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            select: generateStateValueProp($state, [
                              "boxselect3",
                              __plasmic_idx_0,
                              "select"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "boxselect3[].select",
                                initFunc: ({ $props, $state, $queries }) =>
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? false
                                    : false
                              },
                              {
                                name: "boxselect3[].disable2",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return $state.idinput.value.length != 11;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Boxselect
                              data-plasmic-name={"boxselect3"}
                              data-plasmic-override={overrides.boxselect3}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pw8Om,
                                  {
                                    [sty.freeBoxstepscharg_step2__pw8OmAvykh]:
                                      hasVariant($state, "stepscharg", "step2")
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___05Xh4,
                                    {
                                      [sty.textstepscharg_step2___05Xh4Avykh]:
                                        hasVariant(
                                          $state,
                                          "stepscharg",
                                          "step2"
                                        )
                                    }
                                  )}
                                >
                                  {hasVariant($state, "stepscharg", "step2") ? (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            amonttem.toLocaleString("en-US") +
                                            " تومان"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  ) : (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return amonttem.toLocaleString(
                                            "en-US"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  )}
                                </div>
                              </div>
                            </Boxselect>
                          );
                        })();
                      })}
                    </Stack__>
                  </div>
                ) : null}
                {(
                  hasVariant($state, "stepscharg", "step3")
                    ? true
                    : hasVariant($state, "stepscharg", "step2")
                    ? true
                    : (() => {
                        try {
                          return $state.operatorselect >= 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nXbG, {
                      [sty.freeBoxstepscharg_step2__nXbGAvykh]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.freeBoxstepscharg_step3__nXbGTqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fuH9,
                        {
                          [sty.textstepscharg_step3__fuH9TqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "\u0646\u0648\u0639 \u0634\u0627\u0631\u0698 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                        : "\u0646\u0648\u0639 \u0634\u0627\u0631\u0698 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"chargeType"}
                      data-plasmic-override={overrides.chargeType}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.chargeType)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.operators2[$state.operatorselect]
                              .services;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const typeitem = __plasmic_item_0;
                        const typeindex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.boxselect2,
                              {
                                [sty.boxselect2stepscharg_step2]: hasVariant(
                                  $state,
                                  "stepscharg",
                                  "step2"
                                )
                              }
                            ),
                            disable2: generateStateValueProp($state, [
                              "boxselect2",
                              __plasmic_idx_0,
                              "disable2"
                            ]),
                            key: typeindex,
                            onClick: async event => {
                              const $steps = {};

                              $steps["runCode"] = !$state.boxselect2[0].disable2
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          for (
                                            let i = 0;
                                            i < $state.boxselect2.length;
                                            i++
                                          ) {
                                            $state.boxselect2[i].select = false;
                                          }
                                          $state.boxselect2[typeindex].select =
                                            true;
                                          return ($state.typecharge =
                                            typeindex);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            },
                            onDisable2Change: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "boxselect2",
                                __plasmic_idx_0,
                                "disable2"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onSelectChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "boxselect2",
                                __plasmic_idx_0,
                                "select"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            select: generateStateValueProp($state, [
                              "boxselect2",
                              __plasmic_idx_0,
                              "select"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "boxselect2[].select",
                                initFunc: ({ $props, $state, $queries }) =>
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? false
                                    : false
                              },
                              {
                                name: "boxselect2[].disable2",
                                initFunc: ({ $props, $state, $queries }) =>
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? (() => {
                                        try {
                                          return (
                                            $state.idinput.value.length != 11
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()
                                    : (() => {
                                        try {
                                          return (
                                            $state.idinput.value.length != 11
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Boxselect
                              data-plasmic-name={"boxselect2"}
                              data-plasmic-override={overrides.boxselect2}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mYlgP,
                                  {
                                    [sty.freeBoxstepscharg_step2__mYlgPAvykh]:
                                      hasVariant($state, "stepscharg", "step2")
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xcP2K
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return typeitem.text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </Boxselect>
                          );
                        })();
                      })}
                    </Stack__>
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jipZs, {
                    [sty.freeBoxstepscharg_step1__jipZsqKzi3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.freeBoxstepscharg_step2__jipZsAvykh]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.freeBoxstepscharg_step3__jipZsTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "stepscharg", "step3")
                      ? (() => {
                          try {
                            return !$state.disable;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__nwPxR,
                        {
                          [sty.freeBoxstepscharg_step3__nwPxRTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDisable"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["disable"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDisable"] != null &&
                          typeof $steps["updateDisable"] === "object" &&
                          typeof $steps["updateDisable"].then === "function"
                        ) {
                          $steps["updateDisable"] = await $steps[
                            "updateDisable"
                          ];
                        }

                        $steps["updateUuid"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["uuid"]
                                },
                                operation: 0,
                                value: $$.uuid.v4().replace(/[^0-9]/g, "")
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUuid"] != null &&
                          typeof $steps["updateUuid"] === "object" &&
                          typeof $steps["updateUuid"].then === "function"
                        ) {
                          $steps["updateUuid"] = await $steps["updateUuid"];
                        }

                        $steps["invokeGlobalAction4"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.babarkat.com/webhook/Babarkat/transaction",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        type: "iran_charging",
                                        mobile: $state.number,
                                        price: $state.amont,
                                        origin:
                                          $state.operators2[
                                            $state.operatorselect
                                          ].nameop + "_charge",
                                        originId: $state.uuid + "",
                                        priceType: "toman",
                                        userToken: $state.token
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction4"] != null &&
                          typeof $steps["invokeGlobalAction4"] === "object" &&
                          typeof $steps["invokeGlobalAction4"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction4"] = await $steps[
                            "invokeGlobalAction4"
                          ];
                        }

                        $steps["updatePardakhtid"] =
                          $steps.invokeGlobalAction4?.data[0]?.success == true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["pardakhtid"]
                                  },
                                  operation: 0,
                                  value: $steps.invokeGlobalAction4.data[0].id
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updatePardakhtid"] != null &&
                          typeof $steps["updatePardakhtid"] === "object" &&
                          typeof $steps["updatePardakhtid"].then === "function"
                        ) {
                          $steps["updatePardakhtid"] = await $steps[
                            "updatePardakhtid"
                          ];
                        }

                        $steps["invokeGlobalAction"] =
                          $steps.invokeGlobalAction4?.data[0]?.success == true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.babarkat.com/webhook/babarkat/service",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          method: "topup",
                                          operator:
                                            $state.operators2[
                                              $state.operatorselect
                                            ].name,
                                          amount: $state.amont,
                                          mobile: $state.number,
                                          charge_type:
                                            $state.operators2[
                                              $state.operatorselect
                                            ].services[$state.typecharge].type,
                                          order_id: $state.uuid,
                                          pay_type: "credit"
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["updateInfopardakt"] = (
                          $steps.invokeGlobalAction?.data ? true : false
                        )
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["infopardakt"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateInfopardakt"] != null &&
                          typeof $steps["updateInfopardakt"] === "object" &&
                          typeof $steps["updateInfopardakt"].then === "function"
                        ) {
                          $steps["updateInfopardakt"] = await $steps[
                            "updateInfopardakt"
                          ];
                        }

                        $steps["invokeGlobalAction5"] =
                          $steps.invokeGlobalAction4?.data[0]?.success == true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "PUT",
                                    "https://n8n.babarkat.com/webhook/Babarkat/transaction",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          id: $state.pardakhtid,
                                          trackingId:
                                            $state.infopardakt?.code == 1
                                              ? $state.infopardakt.ref_code
                                              : -1,
                                          userToken: $state.token
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction5"] != null &&
                          typeof $steps["invokeGlobalAction5"] === "object" &&
                          typeof $steps["invokeGlobalAction5"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction5"] = await $steps[
                            "invokeGlobalAction5"
                          ];
                        }

                        $steps["updateModal2Open"] = (
                          $state.infopardakt?.code
                            ? $state.infopardakt?.code == 1
                            : false
                        )
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["modal2", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateModal2Open"] != null &&
                          typeof $steps["updateModal2Open"] === "object" &&
                          typeof $steps["updateModal2Open"].then === "function"
                        ) {
                          $steps["updateModal2Open"] = await $steps[
                            "updateModal2Open"
                          ];
                        }

                        $steps["invokeGlobalAction3"] = (
                          $state.infopardakt?.code
                            ? $state.infopardakt?.code != 1
                            : false
                        )
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  (() => {
                                    try {
                                      return $state.infopardakt.msg
                                        ? $state.infopardakt.msg
                                        : "مشکلی رخ داده است مجدد تلاش کنید.";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  "top-left",
                                  5000
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction3"] != null &&
                          typeof $steps["invokeGlobalAction3"] === "object" &&
                          typeof $steps["invokeGlobalAction3"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction3"] = await $steps[
                            "invokeGlobalAction3"
                          ];
                        }

                        $steps["updateError"] =
                          $steps.invokeGlobalAction4?.data[0]?.success ==
                            false &&
                          $steps.invokeGlobalAction4?.data[0]?.message
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["error"]
                                  },
                                  operation: 0,
                                  value:
                                    $steps.invokeGlobalAction4?.data[0].message
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateError"] != null &&
                          typeof $steps["updateError"] === "object" &&
                          typeof $steps["updateError"].then === "function"
                        ) {
                          $steps["updateError"] = await $steps["updateError"];
                        }

                        $steps["invokeGlobalAction6"] =
                          $steps.invokeGlobalAction4?.data[0]?.success ==
                            false &&
                          $steps.invokeGlobalAction4?.data[0]?.message
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    (() => {
                                      try {
                                        return (() => {
                                          if ($state.error.includes("صراف")) {
                                            return ($state.error =
                                              $state.error.replace(
                                                "صراف",
                                                "امانتدار"
                                              ));
                                          } else return $state.error;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction6"] != null &&
                          typeof $steps["invokeGlobalAction6"] === "object" &&
                          typeof $steps["invokeGlobalAction6"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction6"] = await $steps[
                            "invokeGlobalAction6"
                          ];
                        }

                        $steps["updateDisable2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["disable"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDisable2"] != null &&
                          typeof $steps["updateDisable2"] === "object" &&
                          typeof $steps["updateDisable2"].then === "function"
                        ) {
                          $steps["updateDisable2"] = await $steps[
                            "updateDisable2"
                          ];
                        }
                      }}
                    >
                      <Group4SvgIcon
                        className={classNames(projectcss.all, sty.svg__ah7QR, {
                          [sty.svgstepscharg_step3__ah7QRTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__g2MR, {
                          [sty.imgstepscharg_step3__g2MRTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/babarkat/images/image6.svg",
                          fullWidth: 58,
                          fullHeight: 62,
                          aspectRatio: 0.935484
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nrhnT,
                          {
                            [sty.freeBoxstepscharg_step3__nrhnTTqZTv]:
                              hasVariant($state, "stepscharg", "step3")
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sVxBl,
                            {
                              [sty.textstepscharg_step3__sVxBlTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                            : "Enter some text"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j5Hde,
                            {
                              [sty.textstepscharg_step2__j5HdeAvykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__j5HdeTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "موجودی :" +
                                    parseInt(
                                      $state.mojody.toFixed(0)
                                    ).toLocaleString() +
                                    " تومان "
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0648\u062c\u0648\u062f\u06cc : 150000 \u062a\u0648\u0645\u0627\u0646";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            "Enter some text"
                          )}
                        </div>
                      </div>
                      <Group7SvgIcon
                        className={classNames(projectcss.all, sty.svg__owa0Y, {
                          [sty.svgstepscharg_step3__owa0YTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step3")
                      ? (() => {
                          try {
                            return $state.disable;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : false
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__bWutK,
                        {
                          [sty.freeBoxstepscharg_step3__bWutKTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    >
                      <Group4SvgIcon
                        className={classNames(projectcss.all, sty.svg__sKdZf, {
                          [sty.svgstepscharg_step3__sKdZfTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__v1Auz, {
                          [sty.imgstepscharg_step3__v1AuzTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/babarkat/images/image6.svg",
                          fullWidth: 58,
                          fullHeight: 62,
                          aspectRatio: 0.935484
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wtxJh,
                          {
                            [sty.freeBoxstepscharg_step3__wtxJhTqZTv]:
                              hasVariant($state, "stepscharg", "step3")
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8DpNg,
                            {
                              [sty.textstepscharg_step3___8DpNgTqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3")
                            ? "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                            : "Enter some text"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jib07,
                            {
                              [sty.textstepscharg_step2__jib07Avykh]:
                                hasVariant($state, "stepscharg", "step2"),
                              [sty.textstepscharg_step3__jib07TqZTv]:
                                hasVariant($state, "stepscharg", "step3")
                            }
                          )}
                        >
                          {hasVariant($state, "stepscharg", "step3") ? (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return "موجودی :" + $state.mojody + " تومان ";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0648\u062c\u0648\u062f\u06cc : 150000 \u062a\u0648\u0645\u0627\u0646";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          ) : (
                            "Enter some text"
                          )}
                        </div>
                      </div>
                      <Group7SvgIcon
                        className={classNames(projectcss.all, sty.svg__mh5Dm, {
                          [sty.svgstepscharg_step3__mh5DmTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        })}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e4WiS,
                          {
                            [sty.freeBoxstepscharg_step3__e4WiSTqZTv]:
                              hasVariant($state, "stepscharg", "step3")
                          }
                        )}
                      >
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg__fSVaq,
                            {
                              [sty.svgstepscharg_step3__fSVaqTqZTv]: hasVariant(
                                $state,
                                "stepscharg",
                                "step3"
                              )
                            }
                          )}
                          role={"img"}
                        />
                      </div>
                    </div>
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yvidq, {
                    [sty.freeBoxstepscharg_step1__yvidqQKzi3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.freeBoxstepscharg_step2__yvidqAvykh]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.freeBoxstepscharg_step3__yvidqTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___6RNoo, {
                      [sty.imgstepscharg_step1___6RNooQKzi3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step1"
                      )
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"150px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/babarkat/images/image12.png",
                      fullWidth: 450,
                      fullHeight: 450,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eDrsD,
                      {
                        [sty.textstepscharg_step1__eDrsDqKzi3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        )
                      }
                    )}
                  >
                    {
                      "\u0642\u0628\u0636\u06cc \u0646\u062f\u0627\u0634\u062a\u06cc\u062f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rkOf7
                    )}
                  >
                    {
                      "\u0627\u0648\u0644\u06cc\u0646 \u0642\u0628\u0636 \u062e\u0648\u062f \u0631\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u06a9\u0646\u06cc\u062f"
                    }
                  </div>
                </Stack__>
              </Reveal>
              <section
                className={classNames(projectcss.all, sty.section__bZv3S)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___0UoW, {
                    [sty.freeBoxstepscharg_step1___0UoWQKzi3]: hasVariant(
                      $state,
                      "stepscharg",
                      "step1"
                    ),
                    [sty.freeBoxstepscharg_step2___0UoWAvykh]: hasVariant(
                      $state,
                      "stepscharg",
                      "step2"
                    ),
                    [sty.freeBoxstepscharg_step3___0UoWTqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "stepscharg", "step2")
                      ? true
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <Button
                      data-plasmic-name={"backstep2"}
                      data-plasmic-override={overrides.backstep2}
                      className={classNames("__wab_instance", sty.backstep2, {
                        [sty.backstep2stepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.backstep2stepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      color={
                        hasVariant($state, "stepscharg", "step2")
                          ? "softGreen"
                          : "green"
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateUnnamedVariant"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "stepscharg",
                                operation: 1
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUnnamedVariant"] != null &&
                          typeof $steps["updateUnnamedVariant"] === "object" &&
                          typeof $steps["updateUnnamedVariant"].then ===
                            "function"
                        ) {
                          $steps["updateUnnamedVariant"] = await $steps[
                            "updateUnnamedVariant"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bcqup,
                          {
                            [sty.textstepscharg_step2__bcqupAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step2")
                          ? "\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"
                          : "\u0627\u062f\u0627\u0645\u0647"}
                      </div>
                    </Button>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step3")
                      ? true
                      : hasVariant($state, "stepscharg", "step2")
                      ? true
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <Button
                      data-plasmic-name={"backstep3"}
                      data-plasmic-override={overrides.backstep3}
                      className={classNames("__wab_instance", sty.backstep3, {
                        [sty.backstep3stepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.backstep3stepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      color={
                        hasVariant($state, "stepscharg", "step2")
                          ? "softGreen"
                          : "softGreen"
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateUnnamedVariant2"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: "stepscharg",
                                operation: 0,
                                value: "step2"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUnnamedVariant2"] != null &&
                          typeof $steps["updateUnnamedVariant2"] === "object" &&
                          typeof $steps["updateUnnamedVariant2"].then ===
                            "function"
                        ) {
                          $steps["updateUnnamedVariant2"] = await $steps[
                            "updateUnnamedVariant2"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ujQjf,
                          {
                            [sty.textstepscharg_step2__ujQjfAvykh]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "stepscharg", "step2")
                          ? "\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"
                          : "\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"}
                      </div>
                    </Button>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hztXs, {
                      [sty.freeBoxstepscharg_step1__hztXsQKzi3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step1"
                      )
                    })}
                  >
                    <Button
                      data-plasmic-name={"step1Next"}
                      data-plasmic-override={overrides.step1Next}
                      className={classNames("__wab_instance", sty.step1Next, {
                        [sty.step1Nextstepscharg_step1]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.step1Nextstepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.step1Nextstepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      color={"green"}
                      isDisabled={(() => {
                        try {
                          return $state.idinput.value.length != 11;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateNumber"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["number"]
                                },
                                operation: 0,
                                value: $state.idinput.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateNumber"] != null &&
                          typeof $steps["updateNumber"] === "object" &&
                          typeof $steps["updateNumber"].then === "function"
                        ) {
                          $steps["updateNumber"] = await $steps["updateNumber"];
                        }

                        $steps["updateUnnamedVariant"] = (() => {
                          const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                          return phoneRegex.test($state.number);
                        })()
                          ? (() => {
                              const actionArgs = {
                                vgroup: "stepscharg",
                                operation: 0,
                                value: "step2"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUnnamedVariant"] != null &&
                          typeof $steps["updateUnnamedVariant"] === "object" &&
                          typeof $steps["updateUnnamedVariant"].then ===
                            "function"
                        ) {
                          $steps["updateUnnamedVariant"] = await $steps[
                            "updateUnnamedVariant"
                          ];
                        }

                        $steps["invokeGlobalAction"] = (() => {
                          const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                          return !phoneRegex.test($state.number);
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0634\u0645\u0627\u0631\u0647\u200c\u06cc \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0645\u0639\u062a\u0628\u0631 \u0646\u06cc\u0633\u062a.",
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___34Uvn
                        )}
                      >
                        {"\u0627\u062f\u0627\u0645\u0647"}
                      </div>
                    </Button>
                    {(
                      hasVariant($state, "stepscharg", "step1")
                        ? (() => {
                            try {
                              return (
                                $state.type == "id" &&
                                $state.idinput.value?.length == 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "stepscharg", "step3")
                        ? true
                        : hasVariant($state, "stepscharg", "step2")
                        ? true
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : false
                    ) ? (
                      <Button
                        data-plasmic-name={"step1Next2"}
                        data-plasmic-override={overrides.step1Next2}
                        className={classNames(
                          "__wab_instance",
                          sty.step1Next2,
                          {
                            [sty.step1Next2stepscharg_step1]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            ),
                            [sty.step1Next2stepscharg_step2]: hasVariant(
                              $state,
                              "stepscharg",
                              "step2"
                            ),
                            [sty.step1Next2stepscharg_step3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step3"
                            )
                          }
                        )}
                        color={"softGreen"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return window.document
                                      .getElementById("imageInput")
                                      .click();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        showStartIcon={true}
                        startIcon={
                          <Icon95Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zOhx
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5OyPr
                          )}
                        >
                          {
                            "\u0627\u0633\u06a9\u0646 \u0628\u0627\u0631\u06a9\u062f \u0642\u0628\u0636"
                          }
                        </div>
                      </Button>
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jBkqJ,
                        {
                          [sty.textstepscharg_step1__jBkqJqKzi3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          )
                        }
                      )}
                      id={"barcode_error"}
                      {...{ "id ": "barcode_error" }}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u0646\u062a\u0648\u0627\u0646\u0633\u062a\u06cc\u0645 \u0634\u0646\u0627\u0633\u0647 \u0642\u0628\u0636 \u0631\u0627 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u0646\u06cc\u0645.",
                                  undefined,
                                  5,
                                  "bottom"
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      {""}
                    </div>
                    {(
                      hasVariant($state, "stepscharg", "step1") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bE0T7,
                          {
                            [sty.textstepscharg_step1__bE0T7QKzi3]: hasVariant(
                              $state,
                              "stepscharg",
                              "step1"
                            )
                          }
                        )}
                        id={"loadingImage"}
                        {...{ "id ": "loadingImage" }}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateLoadingLoad"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loading", "load"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadingLoad"] != null &&
                            typeof $steps["updateLoadingLoad"] === "object" &&
                            typeof $steps["updateLoadingLoad"].then ===
                              "function"
                          ) {
                            $steps["updateLoadingLoad"] = await $steps[
                              "updateLoadingLoad"
                            ];
                          }
                        }}
                      >
                        {""}
                      </div>
                    ) : null}
                    <Embed
                      data-plasmic-name={"embedHtml"}
                      data-plasmic-override={overrides.embedHtml}
                      className={classNames("__wab_instance", sty.embedHtml, {
                        [sty.embedHtmlstepscharg_step1]: hasVariant(
                          $state,
                          "stepscharg",
                          "step1"
                        ),
                        [sty.embedHtmlstepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      code={
                        hasVariant($state, "stepscharg", "step1")
                          ? '<input type="file" id="imageInput" accept="image/*" capture="environment" style="display:none">\r\n<canvas id="canvas" style="display: none;"></canvas>\r\n\r\n<!-- \u06a9\u062a\u0627\u0628\u062e\u0627\u0646\u0647\u200c\u0647\u0627\u06cc \u0645\u0648\u0631\u062f \u0646\u06cc\u0627\u0632 -->\r\n<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>\r\n<script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>\r\n\r\n<script>\r\n  let barcodeErrorClicked = false; // \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0627\u062c\u0631\u0627\u06cc \u0686\u0646\u062f\u0628\u0627\u0631\u0647 \u062e\u0637\u0627\r\n\r\n  document.getElementById("imageInput").addEventListener("change", function(event) {\r\n      window.document.getElementById("loadingImage").click();\r\n\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n\r\n      const canvas = document.getElementById("canvas");\r\n      const context = canvas.getContext("2d");\r\n      const img = new Image();\r\n\r\n      img.onload = function() {\r\n          window.document.getElementById("loadingImage").click();\r\n\r\n          // \u062a\u0646\u0638\u06cc\u0645 \u0627\u0646\u062f\u0627\u0632\u0647 \u06a9\u0627\u0646\u0648\u0627\u0633 \u0648 \u0631\u0633\u0645 \u062a\u0635\u0648\u06cc\u0631\r\n          canvas.width = img.width;\r\n          canvas.height = img.height;\r\n          context.drawImage(img, 0, 0, img.width, img.height);\r\n\r\n          // \u0627\u0633\u06a9\u0646 QR \u06a9\u062f\r\n          scanQRCode(canvas);\r\n\r\n          // \u0627\u0633\u06a9\u0646 \u0628\u0627\u0631\u06a9\u062f\r\n          scanBarcode(canvas);\r\n      };\r\n\r\n      img.src = URL.createObjectURL(file);\r\n  });\r\n\r\n  function scanQRCode(canvas) {\r\n      const context = canvas.getContext("2d");\r\n      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n      const code = jsQR(imageData.data, imageData.width, imageData.height);\r\n\r\n      if (code) {\r\n          document.getElementsByName("idNumber")[0].value = code.data;\r\n      } else {\r\n          triggerBarcodeError(); // \u062e\u0637\u0627 \u0641\u0642\u0637 \u06cc\u06a9 \u0628\u0627\u0631 \u0627\u062c\u0631\u0627 \u0634\u0648\u062f\r\n      }\r\n  }\r\n\r\n  function scanBarcode(canvas) {\r\n      const imageData = canvas.toDataURL("image/jpeg");\r\n\r\n      Quagga.decodeSingle({\r\n          decoder: {\r\n              readers: ["code_128_reader", "ean_reader", "ean_8_reader", "code_39_reader", "upc_reader"]\r\n          },\r\n          locate: true,\r\n          src: imageData\r\n      }, function(result) {\r\n          if (result && result.codeResult) {\r\n              document.getElementsByName("idNumber")[0].value = result.codeResult.code;\r\n          } else {\r\n              triggerBarcodeError(); // \u062e\u0637\u0627 \u0641\u0642\u0637 \u06cc\u06a9 \u0628\u0627\u0631 \u0627\u062c\u0631\u0627 \u0634\u0648\u062f\r\n          }\r\n      });\r\n  }\r\n\r\n  function triggerBarcodeError() {\r\n      if (!barcodeErrorClicked) {\r\n          window.document.getElementById("barcode_error").click();\r\n          barcodeErrorClicked = true; // \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0627\u062c\u0631\u0627\u06cc \u0645\u062c\u062f\u062f\r\n      }\r\n  }\r\n</script>'
                          : '<input type="file" id="imageInput" accept="image/*" capture="environment" style="display:none">\r\n<canvas id="canvas" style="display: none;"></canvas>\r\n\r\n<!-- \u06a9\u062a\u0627\u0628\u062e\u0627\u0646\u0647\u200c\u0647\u0627\u06cc \u0645\u0648\u0631\u062f \u0646\u06cc\u0627\u0632 -->\r\n<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>\r\n<script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>\r\n\r\n<script>\r\n  document.getElementById("imageInput").addEventListener("change", function(event) {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n    \r\n    const canvas = document.getElementById("canvas");\r\n    //const canvas = document.getElementById("barcode_error");\r\n    const context = canvas.getContext("2d");\r\n    const img = new Image();\r\n    \r\n    img.onload = function() {\r\n      // \u062a\u0646\u0638\u06cc\u0645 \u0627\u0646\u062f\u0627\u0632\u0647 \u06a9\u0627\u0646\u0648\u0627\u0633 \u0648 \u0631\u0633\u0645 \u062a\u0635\u0648\u06cc\u0631\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      context.drawImage(img, 0, 0, img.width, img.height);\r\n      \r\n      // \u0627\u0633\u06a9\u0646 QR \u06a9\u062f\r\n      scanQRCode(canvas);\r\n      \r\n      // \u0627\u0633\u06a9\u0646 \u0628\u0627\u0631\u06a9\u062f\r\n      scanBarcode(canvas);\r\n    };\r\n    \r\n    img.src = URL.createObjectURL(file);\r\n  });\r\n\r\n  function scanQRCode(canvas) {\r\n    const context = canvas.getContext("2d");\r\n    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n    const code = jsQR(imageData.data, imageData.width, imageData.height);\r\n    \r\n    if (code) {\r\n              document.getElementsByName("idNumber")[0].value=code.data;\r\n    } else {\r\n      window.document.getElementById("barcode_error").click();\r\n    }\r\n  }\r\n\r\n  function scanBarcode(canvas) {\r\n    const imageData = canvas.toDataURL("image/jpeg");\r\n    \r\n    Quagga.decodeSingle({\r\n      decoder: {\r\n        readers: ["code_128_reader", "ean_reader", "ean_8_reader", "code_39_reader", "upc_reader"]\r\n      },\r\n      locate: true,\r\n      src: imageData\r\n    }, function(result) {\r\n      if (result && result.codeResult) {\r\n        document.getElementsByName("idNumber")[0].value=result.codeResult.code;\r\n      } else {\r\n        window.document.getElementById("barcode_error").click();\r\n      }\r\n    });\r\n  }\r\n</script>'
                      }
                    />
                  </div>
                  <Button
                    data-plasmic-name={"addBill"}
                    data-plasmic-override={overrides.addBill}
                    className={classNames("__wab_instance", sty.addBill, {
                      [sty.addBillstepscharg_step1]: hasVariant(
                        $state,
                        "stepscharg",
                        "step1"
                      ),
                      [sty.addBillstepscharg_step2]: hasVariant(
                        $state,
                        "stepscharg",
                        "step2"
                      ),
                      [sty.addBillstepscharg_step3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    color={"green"}
                    endIcon={
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg___7Ya0M)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "isDisabled";
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateType2Open"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["type2", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateType2Open"] != null &&
                        typeof $steps["updateType2Open"] === "object" &&
                        typeof $steps["updateType2Open"].then === "function"
                      ) {
                        $steps["updateType2Open"] = await $steps[
                          "updateType2Open"
                        ];
                      }
                    }}
                    shape={"rounded"}
                    showStartIcon={true}
                    startIcon={
                      <Icon92Icon
                        className={classNames(projectcss.all, sty.svg__yqHmc)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m4QM
                      )}
                    >
                      {"\u0642\u0628\u0636 \u062c\u062f\u0628\u062f"}
                    </div>
                  </Button>
                  {(
                    hasVariant($state, "stepscharg", "step2")
                      ? true
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <Button
                      data-plasmic-name={"step2Next"}
                      data-plasmic-override={overrides.step2Next}
                      className={classNames("__wab_instance", sty.step2Next, {
                        [sty.step2Nextstepscharg_step2]: hasVariant(
                          $state,
                          "stepscharg",
                          "step2"
                        ),
                        [sty.step2Nextstepscharg_step3]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      })}
                      color={"green"}
                      isDisabled={(() => {
                        try {
                          return $state.fragmentInput2.value.length <= 3;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateAmont"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["amont"]
                                },
                                operation: 0,
                                value: parseInt($state.amont)
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAmont"] != null &&
                          typeof $steps["updateAmont"] === "object" &&
                          typeof $steps["updateAmont"].then === "function"
                        ) {
                          $steps["updateAmont"] = await $steps["updateAmont"];
                        }

                        $steps["updateUnnamedVariant2"] = (() => {
                          if (
                            $state.operators2[$state.operatorselect].chargeRange
                          ) {
                            if ($state.operatorselect == 1) {
                              return $state.amont % 1000 === 0;
                            }
                            if (
                              $state.amont >=
                                $state.operators2[$state.operatorselect]
                                  .chargeRange.min &&
                              $state.amont <=
                                $state.operators2[$state.operatorselect]
                                  .chargeRange.max
                            ) {
                              return true;
                            } else {
                              return false;
                            }
                          } else return true;
                        })()
                          ? (() => {
                              const actionArgs = {
                                vgroup: "stepscharg",
                                operation: 0,
                                value: "step3"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                $stateSet($state, vgroup, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUnnamedVariant2"] != null &&
                          typeof $steps["updateUnnamedVariant2"] === "object" &&
                          typeof $steps["updateUnnamedVariant2"].then ===
                            "function"
                        ) {
                          $steps["updateUnnamedVariant2"] = await $steps[
                            "updateUnnamedVariant2"
                          ];
                        }

                        $steps["invokeGlobalAction"] = (() => {
                          if (
                            $state.operators2[$state.operatorselect].chargeRange
                          ) {
                            if ($state.operatorselect == 1) {
                              return $state.amont % 1000 != 0;
                            }
                            if (
                              $state.amont >=
                                $state.operators2[$state.operatorselect]
                                  .chargeRange.min &&
                              $state.amont <=
                                $state.operators2[$state.operatorselect]
                                  .chargeRange.max
                            ) {
                              return false;
                            } else {
                              return true;
                            }
                          } else return false;
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($state.operatorselect == 1) {
                                          if ($state.amont % 1000 != 0)
                                            return "مبلغ باید ضریبی از 1000 باشد.";
                                        }
                                        return (
                                          "مبلغ باید بین " +
                                          $state.operators2[
                                            $state.operatorselect
                                          ].chargeRange.min.toLocaleString(
                                            "en"
                                          ) +
                                          " تومان تا " +
                                          $state.operators2[
                                            $state.operatorselect
                                          ].chargeRange.max.toLocaleString(
                                            "en"
                                          ) +
                                          " تومان باشد."
                                        );
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kiHcI
                        )}
                      >
                        {"\u0627\u062f\u0627\u0645\u0647"}
                      </div>
                    </Button>
                  ) : null}
                  {(
                    hasVariant($state, "stepscharg", "step3")
                      ? true
                      : hasVariant($state, "stepscharg", "step2")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w1QNb,
                        {
                          [sty.textstepscharg_step1__w1QNbqKzi3]: hasVariant(
                            $state,
                            "stepscharg",
                            "step1"
                          ),
                          [sty.textstepscharg_step2__w1QNbAvykh]: hasVariant(
                            $state,
                            "stepscharg",
                            "step2"
                          ),
                          [sty.textstepscharg_step3__w1QNbTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToChargeStep1"] = true
                          ? (() => {
                              const actionArgs = { destination: `/charging` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToChargeStep1"] != null &&
                          typeof $steps["goToChargeStep1"] === "object" &&
                          typeof $steps["goToChargeStep1"].then === "function"
                        ) {
                          $steps["goToChargeStep1"] = await $steps[
                            "goToChargeStep1"
                          ];
                        }
                      }}
                    >
                      {"\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"}
                    </div>
                  ) : null}
                </Stack__>
              </section>
              <AntdModal
                data-plasmic-name={"modal"}
                data-plasmic-override={overrides.modal}
                className={classNames("__wab_instance", sty.modal, {
                  [sty.modalstepscharg_step3]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                hideFooter={true}
                modalContentClassName={classNames({
                  [sty["pcls_6NI2307KYZcD"]]: true,
                  [sty["pcls_NKAphPI2eLLI"]]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
                modalScopeClassName={sty["modal__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["modal", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["modal", "open"])}
                title={null}
                trigger={null}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___4JLbG)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vj7Hx
                    )}
                  >
                    {
                      "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062e\u0631\u06cc\u062f \u0634\u0627\u0631\u0698"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lxAiN
                    )}
                  >
                    {
                      "\u06af\u0627\u0645 \u0647\u0627\u06cc \u062e\u0631\u06cc\u062f \u0634\u0627\u0631\u0698:"
                    }
                  </div>
                  <Stack__
                    as={"ul"}
                    data-plasmic-name={"ul"}
                    data-plasmic-override={overrides.ul}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.ul,
                      sty.ul
                    )}
                  >
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        sty.li___1IMaD
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zBbMa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bK9Xs
                          )}
                        >
                          {
                            "\u0634\u0645\u0627\u0631\u0647 \u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f ."
                          }
                        </div>
                      </div>
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        sty.li__xmp5S
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ckCby
                        )}
                      >
                        <div
                          data-plasmic-name={
                            "\u0627\u067e\u0631\u0627\u062a\u0648\u0631"
                          }
                          data-plasmic-override={overrides.اپراتور}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.اپراتور
                          )}
                        >
                          {
                            "\u0627\u067e\u0631\u0627\u062a\u0648\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                      </div>
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        sty.li__tcg2R
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__k2MpI
                        )}
                      >
                        <div
                          data-plasmic-name={
                            "\u0627\u067e\u0631\u0627\u062a\u0648\u06312"
                          }
                          data-plasmic-override={overrides.اپراتور2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.اپراتور2
                          )}
                        >
                          {
                            "\u0637\u0631\u062d \u062f\u0644 \u062e\u0648\u0627\u0647 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                      </div>
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        sty.li__lVZc
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rXXgZ
                        )}
                      >
                        <div
                          data-plasmic-name={
                            "\u0627\u067e\u0631\u0627\u062a\u0648\u06313"
                          }
                          data-plasmic-override={overrides.اپراتور3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.اپراتور3
                          )}
                        >
                          {
                            "\u0645\u0628\u0644\u063a \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                      </div>
                    </li>
                  </Stack__>
                  <Button
                    className={classNames("__wab_instance", sty.button__sGoWw)}
                    color={"green"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen"] != null &&
                        typeof $steps["updateModalOpen"] === "object" &&
                        typeof $steps["updateModalOpen"].then === "function"
                      ) {
                        $steps["updateModalOpen"] = await $steps[
                          "updateModalOpen"
                        ];
                      }
                    }}
                  >
                    {"\u0645\u062a\u0648\u062c\u0647 \u0634\u062f\u0645"}
                  </Button>
                </div>
              </AntdModal>
              <AntdModal
                data-plasmic-name={"modal2"}
                data-plasmic-override={overrides.modal2}
                className={classNames("__wab_instance", sty.modal2, {
                  [sty.modal2stepscharg_step3]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens
                )}
                hideFooter={true}
                maskClosable={
                  hasVariant($state, "stepscharg", "step3") ? false : undefined
                }
                modalContentClassName={classNames({
                  [sty["pcls_DtItj8IdhTGF"]]: true,
                  [sty["pcls_Mr6A7xh9Aj74"]]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  ),
                  [sty["pcls_qae-Jrm_X0Mi"]]:
                    hasVariant($state, "stepscharg", "step3") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                })}
                modalScopeClassName={sty["modal2__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["modal2", "open"]).apply(
                    null,
                    eventArgs
                  );
                }}
                open={generateStateValueProp($state, ["modal2", "open"])}
                title={null}
                trigger={null}
                width={
                  hasVariant($state, "stepscharg", "step3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "100vw"
                    : hasVariant($state, "stepscharg", "step3")
                    ? "55%"
                    : hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "100%"
                    : "55%"
                }
                wrapClassName={classNames({
                  [sty["pcls_0k-yhts48o-i"]]:
                    hasVariant($state, "stepscharg", "step3") &&
                    hasVariant(globalVariants, "screen", "mobileOnly"),
                  [sty["pcls_F3Iu59MAWK3q"]]: hasVariant(
                    $state,
                    "stepscharg",
                    "step3"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__mSuI, {
                    [sty.freeBoxstepscharg_step3__mSuITqZTv]: hasVariant(
                      $state,
                      "stepscharg",
                      "step3"
                    )
                  })}
                >
                  <LottieWrapper
                    data-plasmic-name={"lottie"}
                    data-plasmic-override={overrides.lottie}
                    animationData={{
                      v: "4.10.1",
                      fr: 30,
                      ip: 0,
                      op: 40,
                      w: 80,
                      h: 80,
                      nm: "Success Checkmark",
                      ddd: 0,
                      assets: [],
                      layers: [
                        {
                          ddd: 0,
                          ind: 1,
                          ty: 4,
                          nm: "Check Mark",
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [40, 40, 0], ix: 2 },
                            a: { a: 0, k: [-1.312, 6, 0], ix: 1 },
                            s: { a: 0, k: [100, 100, 100], ix: 6 }
                          },
                          ao: 0,
                          shapes: [
                            {
                              ty: "gr",
                              it: [
                                {
                                  ind: 0,
                                  ty: "sh",
                                  ix: 1,
                                  ks: {
                                    a: 0,
                                    k: {
                                      i: [
                                        [0, 0],
                                        [0, 0],
                                        [0, 0]
                                      ],
                                      o: [
                                        [0, 0],
                                        [0, 0],
                                        [0, 0]
                                      ],
                                      v: [
                                        [-15.75, 8],
                                        [-8, 16],
                                        [13.125, -4]
                                      ],
                                      c: false
                                    },
                                    ix: 2
                                  },
                                  nm: "Path 1",
                                  mn: "ADBE Vector Shape - Group",
                                  hd: false
                                },
                                {
                                  ty: "tm",
                                  s: {
                                    a: 1,
                                    k: [
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        n: ["0p667_1_0p333_0"],
                                        t: 25,
                                        s: [0],
                                        e: [100]
                                      },
                                      { t: 33 }
                                    ],
                                    ix: 1
                                  },
                                  e: { a: 0, k: 0, ix: 2 },
                                  o: { a: 0, k: 0, ix: 3 },
                                  m: 1,
                                  ix: 2,
                                  nm: "Trim Paths 1",
                                  mn: "ADBE Vector Filter - Trim",
                                  hd: false
                                },
                                {
                                  ty: "st",
                                  c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                                  o: { a: 0, k: 100, ix: 4 },
                                  w: { a: 0, k: 3, ix: 5 },
                                  lc: 2,
                                  lj: 2,
                                  nm: "Stroke 1",
                                  mn: "ADBE Vector Graphic - Stroke",
                                  hd: false
                                },
                                {
                                  ty: "tr",
                                  p: { a: 0, k: [0, 0], ix: 2 },
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  o: { a: 0, k: 100, ix: 7 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  nm: "Transform"
                                }
                              ],
                              nm: "Shape 1",
                              np: 3,
                              cix: 2,
                              ix: 1,
                              mn: "ADBE Vector Group",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 40,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 2,
                          ty: 4,
                          nm: "Circle Flash",
                          sr: 1,
                          ks: {
                            o: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.833], y: [0.833] },
                                  o: { x: [0.167], y: [0.167] },
                                  n: ["0p833_0p833_0p167_0p167"],
                                  t: 25,
                                  s: [0],
                                  e: [98]
                                },
                                {
                                  i: { x: [0.833], y: [0.833] },
                                  o: { x: [0.167], y: [0.167] },
                                  n: ["0p833_0p833_0p167_0p167"],
                                  t: 30,
                                  s: [98],
                                  e: [0]
                                },
                                { t: 38 }
                              ],
                              ix: 11
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [40, 40, 0], ix: 2 },
                            a: { a: 0, k: [0, 0, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                  o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                  n: [
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0"
                                  ],
                                  t: 25,
                                  s: [0, 0, 100],
                                  e: [100, 100, 100]
                                },
                                { t: 30 }
                              ],
                              ix: 6
                            }
                          },
                          ao: 0,
                          shapes: [
                            {
                              d: 1,
                              ty: "el",
                              s: { a: 0, k: [64, 64], ix: 2 },
                              p: { a: 0, k: [0, 0], ix: 3 },
                              nm: "Ellipse Path 1",
                              mn: "ADBE Vector Shape - Ellipse",
                              hd: false
                            },
                            {
                              ty: "fl",
                              c: {
                                a: 0,
                                k: [
                                  0.529866635799, 0.961458325386,
                                  0.448091417551, 1
                                ],
                                ix: 4
                              },
                              o: { a: 0, k: 100, ix: 5 },
                              r: 1,
                              nm: "Fill 1",
                              mn: "ADBE Vector Graphic - Fill",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 40,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 3,
                          ty: 4,
                          nm: "Circle Stroke",
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [39.022, 39.022, 0], ix: 2 },
                            a: { a: 0, k: [0, 0, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                  o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                  n: [
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0"
                                  ],
                                  t: 16,
                                  s: [100, 100, 100],
                                  e: [80, 80, 100]
                                },
                                {
                                  i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                  o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                  n: [
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0"
                                  ],
                                  t: 22,
                                  s: [80, 80, 100],
                                  e: [120, 120, 100]
                                },
                                {
                                  i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                  o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                  n: [
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0"
                                  ],
                                  t: 25,
                                  s: [120, 120, 100],
                                  e: [100, 100, 100]
                                },
                                { t: 29 }
                              ],
                              ix: 6
                            }
                          },
                          ao: 0,
                          shapes: [
                            {
                              ty: "gr",
                              it: [
                                {
                                  d: 1,
                                  ty: "el",
                                  s: { a: 0, k: [60, 60], ix: 2 },
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  nm: "Ellipse Path 1",
                                  mn: "ADBE Vector Shape - Ellipse",
                                  hd: false
                                },
                                {
                                  ty: "tm",
                                  s: {
                                    a: 1,
                                    k: [
                                      {
                                        i: { x: [0.667], y: [1] },
                                        o: { x: [0.333], y: [0] },
                                        n: ["0p667_1_0p333_0"],
                                        t: 0,
                                        s: [0],
                                        e: [100]
                                      },
                                      { t: 16 }
                                    ],
                                    ix: 1
                                  },
                                  e: { a: 0, k: 0, ix: 2 },
                                  o: { a: 0, k: 0, ix: 3 },
                                  m: 1,
                                  ix: 2,
                                  nm: "Trim Paths 1",
                                  mn: "ADBE Vector Filter - Trim",
                                  hd: false
                                },
                                {
                                  ty: "st",
                                  c: {
                                    a: 0,
                                    k: [
                                      0.427450984716, 0.800000011921,
                                      0.35686275363, 1
                                    ],
                                    ix: 3
                                  },
                                  o: { a: 0, k: 100, ix: 4 },
                                  w: { a: 0, k: 3, ix: 5 },
                                  lc: 2,
                                  lj: 2,
                                  nm: "Stroke 1",
                                  mn: "ADBE Vector Graphic - Stroke",
                                  hd: false
                                },
                                {
                                  ty: "tr",
                                  p: { a: 0, k: [0.978, 0.978], ix: 2 },
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  o: { a: 0, k: 100, ix: 7 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  nm: "Transform"
                                }
                              ],
                              nm: "Ellipse 1",
                              np: 3,
                              cix: 2,
                              ix: 1,
                              mn: "ADBE Vector Group",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 40,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 4,
                          ty: 4,
                          nm: "Circle Green Fill",
                          sr: 1,
                          ks: {
                            o: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.833], y: [0.833] },
                                  o: { x: [0.167], y: [0.167] },
                                  n: ["0p833_0p833_0p167_0p167"],
                                  t: 21,
                                  s: [0],
                                  e: [98]
                                },
                                { t: 28 }
                              ],
                              ix: 11
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [40, 40, 0], ix: 2 },
                            a: { a: 0, k: [0, 0, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.667, 0.667, 0.667], y: [1, 1, 1] },
                                  o: { x: [0.333, 0.333, 0.333], y: [0, 0, 0] },
                                  n: [
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0",
                                    "0p667_1_0p333_0"
                                  ],
                                  t: 21,
                                  s: [0, 0, 100],
                                  e: [100, 100, 100]
                                },
                                { t: 28 }
                              ],
                              ix: 6
                            }
                          },
                          ao: 0,
                          shapes: [
                            {
                              d: 1,
                              ty: "el",
                              s: { a: 0, k: [64, 64], ix: 2 },
                              p: { a: 0, k: [0, 0], ix: 3 },
                              nm: "Ellipse Path 1",
                              mn: "ADBE Vector Shape - Ellipse",
                              hd: false
                            },
                            {
                              ty: "fl",
                              c: {
                                a: 0,
                                k: [
                                  0.427450984716, 0.800000011921, 0.35686275363,
                                  1
                                ],
                                ix: 4
                              },
                              o: { a: 0, k: 100, ix: 5 },
                              r: 1,
                              nm: "Fill 1",
                              mn: "ADBE Vector Graphic - Fill",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 40,
                          st: 0,
                          bm: 0
                        }
                      ]
                    }}
                    className={classNames("__wab_instance", sty.lottie, {
                      [sty.lottiestepscharg_step3]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    loop={true}
                    preview={true}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rdyig,
                      {
                        [sty.textstepscharg_step3__rdyigTqZTv]: hasVariant(
                          $state,
                          "stepscharg",
                          "step3"
                        )
                      }
                    )}
                  >
                    {
                      "\u062e\u0631\u06cc\u062f \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__b3PlE, {
                      [sty.freeBoxstepscharg_step3__b3PlETqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jy5E
                      )}
                    >
                      {
                        "\u0634\u0645\u0627\u0631\u0647 \u067e\u06cc\u06af\u06cc\u0631\u06cc"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lwChV,
                        {
                          [sty.textstepscharg_step3__lwChVTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "stepscharg", "step3") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.infopardakt.ref_code;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        "4458748475"
                      )}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bdsVf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t7EKw
                      )}
                    >
                      {
                        "\u0634\u0646\u0627\u0633\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__re4RM,
                        {
                          [sty.textstepscharg_step3__re4RMTqZTv]: hasVariant(
                            $state,
                            "stepscharg",
                            "step3"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "stepscharg", "step3") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.infopardakt.trans_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "445874888475";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        "445874888475"
                      )}
                    </div>
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__aLsbM, {
                      [sty.buttonstepscharg_step3__aLsbMTqZTv]: hasVariant(
                        $state,
                        "stepscharg",
                        "step3"
                      )
                    })}
                    color={"green"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal2", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen"] != null &&
                        typeof $steps["updateModalOpen"] === "object" &&
                        typeof $steps["updateModalOpen"].then === "function"
                      ) {
                        $steps["updateModalOpen"] = await $steps[
                          "updateModalOpen"
                        ];
                      }

                      $steps["goToHomepage"] = true
                        ? (() => {
                            const actionArgs = { destination: `/` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHomepage"] != null &&
                        typeof $steps["goToHomepage"] === "object" &&
                        typeof $steps["goToHomepage"].then === "function"
                      ) {
                        $steps["goToHomepage"] = await $steps["goToHomepage"];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oybpF
                      )}
                    >
                      {"\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                  </Button>
                </div>
              </AntdModal>
            </div>
          </section>
          <ApiRequest
            data-plasmic-name={"commissionBabarkat"}
            data-plasmic-override={overrides.commissionBabarkat}
            className={classNames("__wab_instance", sty.commissionBabarkat)}
            errorDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lziw4
                )}
              >
                {"Error fetching data"}
              </div>
            }
            loadingDisplay={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cdzoN
                )}
              >
                {"Loading..."}
              </div>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "commissionBabarkat",
                "error"
              ]).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "commissionBabarkat",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "commissionBabarkat",
                "data"
              ]).apply(null, eventArgs);
            }}
            url={"https://n8n.babarkat.com/webhook/CommissionBabarkat"}
          />

          <AntdModal
            data-plasmic-name={"type2"}
            data-plasmic-override={overrides.type2}
            className={classNames("__wab_instance", sty.type2)}
            closeButtonClassName={classNames({
              [sty["pcls_tLh61HApRqL2"]]: true
            })}
            closeIcon={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3Rci
                )}
              >
                {"\n"}
              </div>
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_YtBcDOhT8Nb2"]]: true
            })}
            modalScopeClassName={sty["type2__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["type2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["type2", "open"])}
            title={null}
            trigger={null}
            width={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100%"
                : "700"
            }
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__t1LUa)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ed21)}
              >
                <Icon78Icon
                  className={classNames(projectcss.all, sty.svg__sa9Dm)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__negJw
                  )}
                >
                  {"\u0642\u0628\u0636 \u062c\u062f\u06cc\u062f"}
                </div>
              </Stack__>
              <Icon89Icon
                className={classNames(projectcss.all, sty.svg__ga3J)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModal3Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["type2", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModal3Open"] != null &&
                    typeof $steps["updateModal3Open"] === "object" &&
                    typeof $steps["updateModal3Open"].then === "function"
                  ) {
                    $steps["updateModal3Open"] = await $steps[
                      "updateModal3Open"
                    ];
                  }
                }}
                role={"img"}
              />
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox___5Y91O)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"comingSoon12"}
                data-plasmic-override={overrides.comingSoon12}
                hasGap={true}
                className={classNames(projectcss.all, sty.comingSoon12)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateType"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["type"]
                          },
                          operation: 0,
                          value: "id"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateType"] != null &&
                    typeof $steps["updateType"] === "object" &&
                    typeof $steps["updateType"].then === "function"
                  ) {
                    $steps["updateType"] = await $steps["updateType"];
                  }

                  $steps["updateStepscharg"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "stepscharg",
                          operation: 0,
                          value: "step1"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStepscharg"] != null &&
                    typeof $steps["updateStepscharg"] === "object" &&
                    typeof $steps["updateStepscharg"].then === "function"
                  ) {
                    $steps["updateStepscharg"] = await $steps[
                      "updateStepscharg"
                    ];
                  }

                  $steps["updateType2Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["type2", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateType2Open"] != null &&
                    typeof $steps["updateType2Open"] === "object" &&
                    typeof $steps["updateType2Open"].then === "function"
                  ) {
                    $steps["updateType2Open"] = await $steps["updateType2Open"];
                  }
                }}
              >
                <Icon93Icon
                  className={classNames(projectcss.all, sty.svg__aaPl7)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__an7Br
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0645\u06cc\u0632\u0628\u0627\u0646"
                    : "\u0622\u0628 | \u0628\u0631\u0642 | \u06af\u0627\u0632 | \u062c\u0631\u06cc\u0645\u0647 \u062e\u0648\u062f\u0631\u0648 "}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"comingSoon13"}
                data-plasmic-override={overrides.comingSoon13}
                hasGap={true}
                className={classNames(projectcss.all, sty.comingSoon13)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateType"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["type"]
                          },
                          operation: 0,
                          value: "mobile"
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateType"] != null &&
                    typeof $steps["updateType"] === "object" &&
                    typeof $steps["updateType"].then === "function"
                  ) {
                    $steps["updateType"] = await $steps["updateType"];
                  }

                  $steps["updateStepscharg"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "stepscharg",
                          operation: 0,
                          value: "step1"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStepscharg"] != null &&
                    typeof $steps["updateStepscharg"] === "object" &&
                    typeof $steps["updateStepscharg"].then === "function"
                  ) {
                    $steps["updateStepscharg"] = await $steps[
                      "updateStepscharg"
                    ];
                  }

                  $steps["updateType2Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["type2", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateType2Open"] != null &&
                    typeof $steps["updateType2Open"] === "object" &&
                    typeof $steps["updateType2Open"].then === "function"
                  ) {
                    $steps["updateType2Open"] = await $steps["updateType2Open"];
                  }
                }}
              >
                <Icon94Icon
                  className={classNames(projectcss.all, sty.svg__nnekT)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t5AvW
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0645\u06cc\u0632\u0628\u0627\u0646"
                    : "\u062a\u0644\u0641\u0646 \u062b\u0627\u0628\u062a | \u0647\u0645\u0631\u0627\u0647"}
                </div>
              </Stack__>
            </div>
          </AntdModal>
          <Loading
            data-plasmic-name={"loading"}
            data-plasmic-override={overrides.loading}
            className={classNames("__wab_instance", sty.loading)}
            load={generateStateValueProp($state, ["loading", "load"])}
            onLoadChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["loading", "load"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  chargeStep1: [
    "chargeStep1",
    "header",
    "reveal",
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "fragmentInput3",
    "fragmentInput4",
    "idinput",
    "fragmentInput2",
    "operators",
    "boxselect",
    "operators3",
    "boxselect3",
    "chargeType",
    "boxselect2",
    "backstep2",
    "backstep3",
    "step1Next",
    "step1Next2",
    "embedHtml",
    "addBill",
    "step2Next",
    "modal",
    "ul",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u0631",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06312",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06313",
    "modal2",
    "lottie",
    "commissionBabarkat",
    "type2",
    "comingSoon12",
    "comingSoon13",
    "loading"
  ],
  header: ["header"],
  reveal: [
    "reveal",
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "fragmentInput3",
    "fragmentInput4",
    "idinput",
    "fragmentInput2",
    "operators",
    "boxselect",
    "operators3",
    "boxselect3",
    "chargeType",
    "boxselect2"
  ],
  wallet: [
    "wallet",
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2",
    "fragmentInput3",
    "fragmentInput4",
    "idinput",
    "fragmentInput2"
  ],
  steps: [
    "steps",
    "\u0645\u0634\u062e\u0635\u0627\u062a",
    "selected",
    "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698",
    "unselected",
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2"
  ],
  مشخصات: ["\u0645\u0634\u062e\u0635\u0627\u062a", "selected"],
  selected: ["selected"],
  مبلغشارژ: ["\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698", "unselected"],
  unselected: ["unselected"],
  تاییدخرید: [
    "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f",
    "unselected2"
  ],
  unselected2: ["unselected2"],
  fragmentInput3: ["fragmentInput3"],
  fragmentInput4: ["fragmentInput4"],
  idinput: ["idinput"],
  fragmentInput2: ["fragmentInput2"],
  operators: ["operators", "boxselect"],
  boxselect: ["boxselect"],
  operators3: ["operators3", "boxselect3"],
  boxselect3: ["boxselect3"],
  chargeType: ["chargeType", "boxselect2"],
  boxselect2: ["boxselect2"],
  backstep2: ["backstep2"],
  backstep3: ["backstep3"],
  step1Next: ["step1Next"],
  step1Next2: ["step1Next2"],
  embedHtml: ["embedHtml"],
  addBill: ["addBill"],
  step2Next: ["step2Next"],
  modal: [
    "modal",
    "ul",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u0631",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06312",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06313"
  ],
  ul: [
    "ul",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u0631",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06312",
    "\u0627\u067e\u0631\u0627\u062a\u0648\u06313"
  ],
  اپراتور: ["\u0627\u067e\u0631\u0627\u062a\u0648\u0631"],
  اپراتور2: ["\u0627\u067e\u0631\u0627\u062a\u0648\u06312"],
  اپراتور3: ["\u0627\u067e\u0631\u0627\u062a\u0648\u06313"],
  modal2: ["modal2", "lottie"],
  lottie: ["lottie"],
  commissionBabarkat: ["commissionBabarkat"],
  type2: ["type2", "comingSoon12", "comingSoon13"],
  comingSoon12: ["comingSoon12"],
  comingSoon13: ["comingSoon13"],
  loading: ["loading"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  chargeStep1: "div";
  header: "div";
  reveal: typeof Reveal;
  wallet: "div";
  steps: "div";
  مشخصات: "div";
  selected: "svg";
  مبلغشارژ: "div";
  unselected: "svg";
  تاییدخرید: "div";
  unselected2: "svg";
  fragmentInput3: typeof Input;
  fragmentInput4: typeof Input;
  idinput: typeof Input;
  fragmentInput2: typeof Input;
  operators: "div";
  boxselect: typeof Boxselect;
  operators3: "div";
  boxselect3: typeof Boxselect;
  chargeType: "div";
  boxselect2: typeof Boxselect;
  backstep2: typeof Button;
  backstep3: typeof Button;
  step1Next: typeof Button;
  step1Next2: typeof Button;
  embedHtml: typeof Embed;
  addBill: typeof Button;
  step2Next: typeof Button;
  modal: typeof AntdModal;
  ul: "ul";
  اپراتور: "div";
  اپراتور2: "div";
  اپراتور3: "div";
  modal2: typeof AntdModal;
  lottie: typeof LottieWrapper;
  commissionBabarkat: typeof ApiRequest;
  type2: typeof AntdModal;
  comingSoon12: "div";
  comingSoon13: "div";
  loading: typeof Loading;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBill__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBill__VariantsArgs;
    args?: PlasmicBill__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBill__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBill__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBill__ArgProps,
          internalVariantPropNames: PlasmicBill__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBill__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "chargeStep1") {
    func.displayName = "PlasmicBill";
  } else {
    func.displayName = `PlasmicBill.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sZQMbqXz9utLNaTnNb3uss"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicBill = Object.assign(
  // Top-level PlasmicBill renders the root element
  withUsePlasmicAuth(makeNodeComponent("chargeStep1")),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    reveal: makeNodeComponent("reveal"),
    wallet: makeNodeComponent("wallet"),
    steps: makeNodeComponent("steps"),
    مشخصات: makeNodeComponent("\u0645\u0634\u062e\u0635\u0627\u062a"),
    selected: makeNodeComponent("selected"),
    مبلغشارژ: makeNodeComponent(
      "\u0645\u0628\u0644\u063a\u0634\u0627\u0631\u0698"
    ),
    unselected: makeNodeComponent("unselected"),
    تاییدخرید: makeNodeComponent(
      "\u062a\u0627\u06cc\u06cc\u062f\u062e\u0631\u06cc\u062f"
    ),
    unselected2: makeNodeComponent("unselected2"),
    fragmentInput3: makeNodeComponent("fragmentInput3"),
    fragmentInput4: makeNodeComponent("fragmentInput4"),
    idinput: makeNodeComponent("idinput"),
    fragmentInput2: makeNodeComponent("fragmentInput2"),
    operators: makeNodeComponent("operators"),
    boxselect: makeNodeComponent("boxselect"),
    operators3: makeNodeComponent("operators3"),
    boxselect3: makeNodeComponent("boxselect3"),
    chargeType: makeNodeComponent("chargeType"),
    boxselect2: makeNodeComponent("boxselect2"),
    backstep2: makeNodeComponent("backstep2"),
    backstep3: makeNodeComponent("backstep3"),
    step1Next: makeNodeComponent("step1Next"),
    step1Next2: makeNodeComponent("step1Next2"),
    embedHtml: makeNodeComponent("embedHtml"),
    addBill: makeNodeComponent("addBill"),
    step2Next: makeNodeComponent("step2Next"),
    modal: makeNodeComponent("modal"),
    ul: makeNodeComponent("ul"),
    اپراتور: makeNodeComponent("\u0627\u067e\u0631\u0627\u062a\u0648\u0631"),
    اپراتور2: makeNodeComponent("\u0627\u067e\u0631\u0627\u062a\u0648\u06312"),
    اپراتور3: makeNodeComponent("\u0627\u067e\u0631\u0627\u062a\u0648\u06313"),
    modal2: makeNodeComponent("modal2"),
    lottie: makeNodeComponent("lottie"),
    commissionBabarkat: makeNodeComponent("commissionBabarkat"),
    type2: makeNodeComponent("type2"),
    comingSoon12: makeNodeComponent("comingSoon12"),
    comingSoon13: makeNodeComponent("comingSoon13"),
    loading: makeNodeComponent("loading"),

    // Metadata about props expected for PlasmicBill
    internalVariantProps: PlasmicBill__VariantProps,
    internalArgProps: PlasmicBill__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "بابرکت",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBill;
/* prettier-ignore-end */
