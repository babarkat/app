/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: q2bx0G2f_uvE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicChoice.module.css"; // plasmic-import: q2bx0G2f_uvE/css

createPlasmicElementProxy;

export type PlasmicChoice__VariantMembers = {
  amount: "charge1" | "charge2" | "charge3" | "cahrge4";
};
export type PlasmicChoice__VariantsArgs = {
  amount?: SingleChoiceArg<"charge1" | "charge2" | "charge3" | "cahrge4">;
};
type VariantPropType = keyof PlasmicChoice__VariantsArgs;
export const PlasmicChoice__VariantProps = new Array<VariantPropType>("amount");

export type PlasmicChoice__ArgsType = {};
type ArgPropType = keyof PlasmicChoice__ArgsType;
export const PlasmicChoice__ArgProps = new Array<ArgPropType>();

export type PlasmicChoice__OverridesType = {
  choice?: Flex__<"div">;
  confirm?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultChoiceProps {
  amount?: SingleChoiceArg<"charge1" | "charge2" | "charge3" | "cahrge4">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChoice__RenderFunc(props: {
  variants: PlasmicChoice__VariantsArgs;
  args: PlasmicChoice__ArgsType;
  overrides: PlasmicChoice__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "amount",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.amount
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"choice"}
      data-plasmic-override={overrides.choice}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.choice
      )}
    >
      <div
        data-plasmic-name={"confirm"}
        data-plasmic-override={overrides.confirm}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.confirm,
          {
            [sty.confirmamount_cahrge4]: hasVariant(
              $state,
              "amount",
              "cahrge4"
            ),
            [sty.confirmamount_charge1]: hasVariant(
              $state,
              "amount",
              "charge1"
            ),
            [sty.confirmamount_charge2]: hasVariant(
              $state,
              "amount",
              "charge2"
            ),
            [sty.confirmamount_charge3]: hasVariant($state, "amount", "charge3")
          }
        )}
      >
        {"\u062a\u0627\u0626\u06cc\u062f \u062e\u0631\u06cc\u062f"}
      </div>
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
        onClick={async event => {
          const $steps = {};

          $steps["goToChargeStep2"] = true
            ? (() => {
                const actionArgs = {};
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToChargeStep2"] != null &&
            typeof $steps["goToChargeStep2"] === "object" &&
            typeof $steps["goToChargeStep2"].then === "function"
          ) {
            $steps["goToChargeStep2"] = await $steps["goToChargeStep2"];
          }
        }}
      >
        {"\u0645\u0631\u062d\u0644\u0647 \u0642\u0628\u0644"}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  choice: ["choice", "confirm", "text"],
  confirm: ["confirm"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  choice: "div";
  confirm: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChoice__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChoice__VariantsArgs;
    args?: PlasmicChoice__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicChoice__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicChoice__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChoice__ArgProps,
          internalVariantPropNames: PlasmicChoice__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChoice__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "choice") {
    func.displayName = "PlasmicChoice";
  } else {
    func.displayName = `PlasmicChoice.${nodeName}`;
  }
  return func;
}

export const PlasmicChoice = Object.assign(
  // Top-level PlasmicChoice renders the root element
  makeNodeComponent("choice"),
  {
    // Helper components rendering sub-elements
    confirm: makeNodeComponent("confirm"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicChoice
    internalVariantProps: PlasmicChoice__VariantProps,
    internalArgProps: PlasmicChoice__ArgProps
  }
);

export default PlasmicChoice;
/* prettier-ignore-end */
