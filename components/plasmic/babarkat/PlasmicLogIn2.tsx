// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: f_2K-lwgshWK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import Editpass from "../../Editpass"; // plasmic-import: uj9U0aRqhjqk/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: OG1SoduAPhRs/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import {
  ExperimentValue,
  useExperiment
} from "./PlasmicGlobalVariant__Experiment"; // plasmic-import: 0yNpRAZ9BHRO/globalVariant
import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: 0yrtEc_Se3kZ/globalVariant
import {
  UnnamedGlobalGroupOfVariants2Value,
  useUnnamedGlobalGroupOfVariants2
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants2"; // plasmic-import: N3RmGzhPpcNq/globalVariant
import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicLogIn2.module.css"; // plasmic-import: f_2K-lwgshWK/css

import BabarkatlogoCopy2SvgIcon from "./icons/PlasmicIcon__BabarkatlogoCopy2Svg"; // plasmic-import: T8YZBqDbfTTx/icon
import Icon56Icon from "./icons/PlasmicIcon__Icon56"; // plasmic-import: CbXhIHUxIzPz/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon55Icon from "./icons/PlasmicIcon__Icon55"; // plasmic-import: pYVCSSEZE7RE/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dXgXrJG5lp3Z/icon
import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: T5qnRYhm3_iD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jg6gpiNRWEQd/icon
import LeftArrowBackSvgrepoComSvgIcon from "./icons/PlasmicIcon__LeftArrowBackSvgrepoComSvg"; // plasmic-import: LNmML4UO8Edb/icon

createPlasmicElementProxy;

export type PlasmicLogIn2__VariantMembers = {
  unnamedVariant: "unnamedVariant";
  slids: "unnamedVariant" | "unnamedVariant2" | "unnamedVariant3";
  unnamedVariant2: "unnamedVariant2";
  password: "password";
  loginByPassword: "loginByPassword";
  forgottenPassword: "forgottenPassword";
};
export type PlasmicLogIn2__VariantsArgs = {
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
  slids?: SingleChoiceArg<
    "unnamedVariant" | "unnamedVariant2" | "unnamedVariant3"
  >;
  unnamedVariant2?: SingleBooleanChoiceArg<"unnamedVariant2">;
  password?: SingleBooleanChoiceArg<"password">;
  loginByPassword?: SingleBooleanChoiceArg<"loginByPassword">;
  forgottenPassword?: SingleBooleanChoiceArg<"forgottenPassword">;
};
type VariantPropType = keyof PlasmicLogIn2__VariantsArgs;
export const PlasmicLogIn2__VariantProps = new Array<VariantPropType>(
  "unnamedVariant",
  "slids",
  "unnamedVariant2",
  "password",
  "loginByPassword",
  "forgottenPassword"
);

export type PlasmicLogIn2__ArgsType = {
  disabled?: boolean;
};
type ArgPropType = keyof PlasmicLogIn2__ArgsType;
export const PlasmicLogIn2__ArgProps = new Array<ArgPropType>("disabled");

export type PlasmicLogIn2__OverridesType = {
  root?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  fragmentInput?: Flex__<typeof Input>;
  fragmentInput3?: Flex__<typeof Input>;
  fragmentInput2?: Flex__<typeof Input>;
  timer?: Flex__<typeof Timer>;
  select?: Flex__<typeof AntdSelect>;
  btnNumber?: Flex__<typeof Button>;
  btnSaraf?: Flex__<typeof Button>;
  sendcode?: Flex__<typeof Button>;
  figmaPaste?: Flex__<"div">;
  group?: Flex__<"div">;
  group2?: Flex__<"div">;
  rectangle35?: Flex__<"div">;
  group3?: Flex__<"div">;
  group4?: Flex__<"div">;
  rectangle23?: Flex__<"div">;
  group5?: Flex__<"div">;
  rectangle24?: Flex__<"div">;
  group6?: Flex__<"div">;
  rectangle25?: Flex__<"div">;
  group7?: Flex__<"div">;
  rectangle?: Flex__<"div">;
  group8?: Flex__<"div">;
  group9?: Flex__<"div">;
  group10?: Flex__<"div">;
  editpass?: Flex__<typeof Editpass>;
  apiRequest?: Flex__<typeof ApiRequest>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultLogIn2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogIn2__RenderFunc(props: {
  variants: PlasmicLogIn2__VariantsArgs;
  args: PlasmicLogIn2__ArgsType;
  overrides: PlasmicLogIn2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.fragmentInput.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      },
      {
        path: "fragmentInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "time",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return 60;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 60;
              }
              throw e;
            }
          })()
      },
      {
        path: "loadedbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "code",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "slids",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.slids
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "saraf",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { label: "sjsjd1n", value: 101 },
          { label: "sjs2jdn", value: 102 },
          { label: "sjsj3dn", value: 103 },
          { label: "sjs4jdn", value: 104 }
        ]
      },
      {
        path: "unnamedVariant2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant2
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.saraf[0].value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 100;
                  }
                  throw e;
                }
              })()
            : hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.saraf[0].value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 100;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.saraf[0].value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 100;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "selectsaraf",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "password",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.password
      },
      {
        path: "pass",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loginByPassword",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loginByPassword
      },
      {
        path: "fragmentInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "pass1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "password"
      },
      {
        path: "forgottenPassword",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.forgottenPassword
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    experiment: useExperiment(),
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    unnamedGlobalGroupOfVariants2: useUnnamedGlobalGroupOfVariants2(),
    screen: useScreenVariantsosEvNkdp6Zt6()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicLogIn2.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLogIn2.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLogIn2.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicLogIn2.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicLogIn2.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root,
          {
            [sty.rootforgottenPassword]: hasVariant(
              $state,
              "forgottenPassword",
              "forgottenPassword"
            ),
            [sty.rootforgottenPassword_unnamedVariant]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "forgottenPassword", "forgottenPassword"),
            [sty.rootglobal_experiment_override]: hasVariant(
              globalVariants,
              "experiment",
              "override"
            ),
            [sty.rootglobal_unnamedGlobalGroupOfVariants2_unnamedVariant_global_unnamedGlobalGroupOfVariants_unnamedVariant]:
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants",
                "unnamedVariant"
              ) &&
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants2",
                "unnamedVariant"
              ),
            [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants",
                "unnamedVariant"
              ),
            [sty.rootloginByPassword]: hasVariant(
              $state,
              "loginByPassword",
              "loginByPassword"
            ),
            [sty.rootloginByPassword_password]:
              hasVariant($state, "password", "password") &&
              hasVariant($state, "loginByPassword", "loginByPassword"),
            [sty.rootloginByPassword_unnamedVariant]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "loginByPassword", "loginByPassword"),
            [sty.rootpassword]: hasVariant($state, "password", "password"),
            [sty.rootslids_unnamedVariant2]: hasVariant(
              $state,
              "slids",
              "unnamedVariant2"
            ),
            [sty.rootslids_unnamedVariant2_unnamedVariant]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "slids", "unnamedVariant2"),
            [sty.rootslids_unnamedVariant3]: hasVariant(
              $state,
              "slids",
              "unnamedVariant3"
            ),
            [sty.rootslids_unnamedVariant3_unnamedVariant]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "slids", "unnamedVariant3"),
            [sty.rootslids_unnamedVariant]: hasVariant(
              $state,
              "slids",
              "unnamedVariant"
            ),
            [sty.rootslids_unnamedVariant_unnamedVariant]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "slids", "unnamedVariant"),
            [sty.rootunnamedVariant2]: hasVariant(
              $state,
              "unnamedVariant2",
              "unnamedVariant2"
            ),
            [sty.rootunnamedVariant2_loginByPassword]:
              hasVariant($state, "loginByPassword", "loginByPassword") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
            [sty.rootunnamedVariant2_loginByPassword_password]:
              hasVariant($state, "loginByPassword", "loginByPassword") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
              hasVariant($state, "password", "password"),
            [sty.rootunnamedVariant2_loginByPassword_unnamedVariant]:
              hasVariant($state, "loginByPassword", "loginByPassword") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
              hasVariant($state, "unnamedVariant", "unnamedVariant"),
            [sty.rootunnamedVariant2_loginByPassword_unnamedVariant_password]:
              hasVariant($state, "loginByPassword", "loginByPassword") &&
              hasVariant($state, "password", "password") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
              hasVariant($state, "unnamedVariant", "unnamedVariant"),
            [sty.rootunnamedVariant2_password]:
              hasVariant($state, "password", "password") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
            [sty.rootunnamedVariant2_unnamedVariant]:
              hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
              hasVariant($state, "unnamedVariant", "unnamedVariant"),
            [sty.rootunnamedVariant2_unnamedVariant_password]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
              hasVariant($state, "password", "password"),
            [sty.rootunnamedVariant]: hasVariant(
              $state,
              "unnamedVariant",
              "unnamedVariant"
            ),
            [sty.rootunnamedVariant_password]:
              hasVariant($state, "password", "password") &&
              hasVariant($state, "unnamedVariant", "unnamedVariant")
          }
        )}
        onLoad={async event => {
          const $steps = {};
        }}
      >
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return !$state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            cascade={
              hasVariant($state, "slids", "unnamedVariant3")
                ? false
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? false
                : undefined
            }
            className={classNames("__wab_instance", sty.reveal, {
              [sty.revealloginByPassword]: hasVariant(
                $state,
                "loginByPassword",
                "loginByPassword"
              ),
              [sty.revealpassword]: hasVariant($state, "password", "password"),
              [sty.revealslids_unnamedVariant3]: hasVariant(
                $state,
                "slids",
                "unnamedVariant3"
              ),
              [sty.revealslids_unnamedVariant]: hasVariant(
                $state,
                "slids",
                "unnamedVariant"
              ),
              [sty.revealunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
            damping={
              hasVariant($state, "slids", "unnamedVariant3")
                ? 0.5
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? 0.5
                : undefined
            }
            direction={
              hasVariant($state, "loginByPassword", "loginByPassword")
                ? "left"
                : hasVariant($state, "password", "password")
                ? "left"
                : hasVariant($state, "slids", "unnamedVariant3")
                ? "left"
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? "left"
                : undefined
            }
            effect={
              hasVariant($state, "loginByPassword", "loginByPassword")
                ? "fade"
                : hasVariant($state, "password", "password")
                ? "fade"
                : hasVariant($state, "slids", "unnamedVariant3")
                ? "slide"
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? "slide"
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? "fade"
                : undefined
            }
            reverse={
              hasVariant($state, "slids", "unnamedVariant3")
                ? false
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? false
                : undefined
            }
            triggerOnce={true}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__jqZBj,
                hasVariant($state, "slids", "unnamedVariant3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "animate"
                  : hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "animate"
                  : undefined,
                {
                  [sty.freeBoxforgottenPassword__jqZBj6YjB]: hasVariant(
                    $state,
                    "forgottenPassword",
                    "forgottenPassword"
                  ),
                  [sty.freeBoxloginByPassword__jqZBjKmmKg]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.freeBoxpassword__jqZBjsXGy]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.freeBoxslids_unnamedVariant2__jqZBjOPnUz]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxslids_unnamedVariant3__jqZBjB31NR]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.freeBoxslids_unnamedVariant__jqZBjTxTxl]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxslids_unnamedVariant_unnamedVariant__jqZBjTxTxlQA83H]:
                    hasVariant($state, "slids", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant", "unnamedVariant"),
                  [sty.freeBoxunnamedVariant2__jqZBjJ9Exh]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxunnamedVariant2_unnamedVariant__jqZBjJ9ExhQA83H]:
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant($state, "unnamedVariant", "unnamedVariant"),
                  [sty.freeBoxunnamedVariant__jqZBjqA83H]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant_password__jqZBjqA83HSXGy]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "password", "password")
                }
              )}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__pscY8, {
                  [sty.freeBoxforgottenPassword__pscY86YjB]: hasVariant(
                    $state,
                    "forgottenPassword",
                    "forgottenPassword"
                  ),
                  [sty.freeBoxloginByPassword__pscY8KmmKg]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.freeBoxpassword__pscY8SXGy]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.freeBoxslids_unnamedVariant3__pscY8B31NR]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.freeBoxslids_unnamedVariant__pscY8TxTxl]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant2__pscY8J9Exh]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxunnamedVariant__pscY8QA83H]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant($state, "password", "password")
                      ? Icon56Icon
                      : BabarkatlogoCopy2SvgIcon
                  }
                  className={classNames(projectcss.all, sty.svg__k3KBk, ``, {
                    [sty.svgloginByPassword__k3KBkKmmKg]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.svgloginByPassword_password__k3KBkKmmKgSXGy]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) && hasVariant($state, "password", "password"),
                    [sty.svgpassword__k3KBksXGy]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.svgslids_unnamedVariant3__k3KBkB31NR]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.svgslids_unnamedVariant__k3KBkTxTxl]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant"
                    ),
                    [sty.svgunnamedVariant2__k3KBkJ9Exh]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.svgunnamedVariant2_loginByPassword_unnamedVariant_password__k3KBkJ9ExhKmmKgQA83HSXGy]:
                      hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.svgunnamedVariant2_password__k3KBkJ9ExhSXGy]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) && hasVariant($state, "password", "password"),
                    [sty.svgunnamedVariant2_unnamedVariant__k3KBkJ9ExhQA83H]:
                      hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.svgunnamedVariant2_unnamedVariant_password__k3KBkJ9ExhQA83HSXGy]:
                      hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "password", "password"),
                    [sty.svgunnamedVariant__k3KBkqA83H]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  id={"logoLogin"}
                  role={"img"}
                />

                {(
                  hasVariant($state, "slids", "unnamedVariant") ? true : false
                ) ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__iq2Sj, {
                      [sty.imgpassword__iq2SjsXGy]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.imgslids_unnamedVariant__iq2SjTxTxl]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "slids", "unnamedVariant") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : hasVariant($state, "slids", "unnamedVariant")
                        ? "100px"
                        : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant($state, "slids", "unnamedVariant") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : hasVariant($state, "slids", "unnamedVariant")
                        ? "100px"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/babarkat/images/image10.svg",
                      fullWidth: 100,
                      fullHeight: 100,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zuDjg, {
                  [sty.freeBoxforgottenPassword__zuDjg6YjB]: hasVariant(
                    $state,
                    "forgottenPassword",
                    "forgottenPassword"
                  ),
                  [sty.freeBoxloginByPassword__zuDjgKmmKg]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.freeBoxpassword__zuDjgsXGy]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.freeBoxslids_unnamedVariant3__zuDjgB31NR]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.freeBoxslids_unnamedVariant__zuDjgTxTxl]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant2__zuDjgJ9Exh]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxunnamedVariant__zuDjgqA83H]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__s5YdZ, {
                    [sty.freeBoxloginByPassword__s5YdZKmmKg]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.freeBoxslids_unnamedVariant3__s5YdZb31NR]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.freeBoxunnamedVariant__s5YdZqA83H]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eb4B,
                      {
                        [sty.textloginByPassword__eb4BKmmKg]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.textloginByPassword_unnamedVariant__eb4BKmmKgQA83H]:
                          hasVariant(
                            $state,
                            "loginByPassword",
                            "loginByPassword"
                          ) &&
                          hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          ),
                        [sty.textpassword__eb4BsXGy]: hasVariant(
                          $state,
                          "password",
                          "password"
                        ),
                        [sty.textslids_unnamedVariant3__eb4BB31NR]: hasVariant(
                          $state,
                          "slids",
                          "unnamedVariant3"
                        ),
                        [sty.textunnamedVariant2__eb4BJ9Exh]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.textunnamedVariant__eb4BqA83H]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "loginByPassword", "loginByPassword")
                      ? "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                      : hasVariant($state, "password", "password")
                      ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                      : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                      ? "\u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0645\u0627\u0646\u062a\u062f\u0627\u0631\u06cc"
                      : hasVariant($state, "slids", "unnamedVariant3")
                      ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                      : hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u062a\u0627\u06cc\u06cc\u062f \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 (\u0628\u0627\u0632\u06cc\u0627\u0628\u06cc \u0631\u0645\u0632 \u0639\u0628\u0648\u0631) "
                      : "\u062a\u0627\u06cc\u06cc\u062f \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 (\u0628\u0627\u0632\u06cc\u0627\u0628\u06cc \u0631\u0645\u0632 \u0639\u0628\u0648\u0631) "}
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__k3Gig, {
                      [sty.buttonloginByPassword__k3GigKmmKg]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.buttonloginByPassword_password__k3GigKmmKgSXGy]:
                        hasVariant($state, "password", "password") &&
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                      [sty.buttonpassword__k3GigsXGy]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.buttonunnamedVariant2__k3GigJ9Exh]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.buttonunnamedVariant2_password__k3GigJ9ExhSXGy]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) && hasVariant($state, "password", "password"),
                      [sty.buttonunnamedVariant2_unnamedVariant__k3GigJ9ExhQA83H]:
                        hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        ) &&
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                      [sty.buttonunnamedVariant__k3GigqA83H]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    })}
                    color={
                      hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? "softGreen"
                        : undefined
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateUnnamedVariant"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "unnamedVariant",
                              operation: 6
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, false);
                              return false;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUnnamedVariant"] != null &&
                        typeof $steps["updateUnnamedVariant"] === "object" &&
                        typeof $steps["updateUnnamedVariant"].then ===
                          "function"
                      ) {
                        $steps["updateUnnamedVariant"] = await $steps[
                          "updateUnnamedVariant"
                        ];
                      }
                    }}
                  >
                    {hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647"
                      : "Button"}
                  </Button>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iQc2N,
                    {
                      [sty.textloginByPassword__iQc2NKmmKg]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword__iQc2NsXGy]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textslids_unnamedVariant3__iQc2NB31NR]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.textunnamedVariant2__iQc2NJ9Exh]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant__iQc2NqA83H]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "unnamedVariant2", "unnamedVariant2") ? (
                    "\u06cc\u06a9\u06cc \u0627\u0632 \u0627\u0645\u0627\u0646\u062a\u062f\u0627\u0631\u06cc \u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0628\u0647 \u0622\u0646\u0647\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a\u06cc\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a\u0627\u0646 \u0628\u0647 \u0622\u0646 \u0645\u062a\u0635\u0644 \u0634\u0648\u062f."
                  ) : hasVariant($state, "slids", "unnamedVariant3") ? (
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (
                              "لطفا کد 4 رقمی ارسال شده به شماره <b style='color: #2DC57B;'>" +
                              $state.number +
                              "</b> را وارد نمایید."
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 09155113179 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  ) : hasVariant($state, "unnamedVariant", "unnamedVariant") ? (
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (
                              "لطفا کد 4 رقمی ارسال شده به شماره <b style='color: #2DC57B;'>" +
                              $state.number +
                              "</b> را وارد نمایید."
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 09155113179 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  ) : (
                    "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f. \u0633\u067e\u0633 \u06cc\u06a9 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0628\u0631\u0627\u06cc \u0627\u062d\u0631\u0627\u0632 \u0647\u0648\u06cc\u062a \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc \u0634\u0648\u062f"
                  )}
                </div>
                <Input
                  data-plasmic-name={"fragmentInput"}
                  data-plasmic-override={overrides.fragmentInput}
                  className={classNames("__wab_instance", sty.fragmentInput, {
                    [sty.fragmentInputforgottenPassword]: hasVariant(
                      $state,
                      "forgottenPassword",
                      "forgottenPassword"
                    ),
                    [sty.fragmentInputloginByPassword]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.fragmentInputloginByPassword_password]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.fragmentInputpassword]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.fragmentInputslids_unnamedVariant3]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.fragmentInputunnamedVariant2]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.fragmentInputunnamedVariant2_password]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) && hasVariant($state, "password", "password"),
                    [sty.fragmentInputunnamedVariant2_unnamedVariant]:
                      hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.fragmentInputunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  disabled={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? false
                      : undefined
                  }
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "fragmentInput",
                      "value"
                    ]).apply(null, eventArgs);

                    (async value => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  }}
                  placeholder={"09*********"}
                  type={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "tel"
                      : "tel"
                  }
                  value={generateStateValueProp($state, [
                    "fragmentInput",
                    "value"
                  ])}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vk1G7,
                    {
                      [sty.textloginByPassword__vk1G7KmmKg]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textloginByPassword_unnamedVariant__vk1G7KmmKgQA83H]:
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ) &&
                        hasVariant($state, "unnamedVariant", "unnamedVariant"),
                      [sty.textpassword__vk1G7SXGy]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textslids_unnamedVariant3__vk1G7B31NR]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.textunnamedVariant2__vk1G7J9Exh]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant__vk1G7QA83H]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "loginByPassword", "loginByPassword")
                    ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                    : hasVariant($state, "password", "password")
                    ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                    : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                    ? "\u0627\u0646\u062a\u062e\u0627\u0628 \u0635\u0631\u0627\u0641\u06cc"
                    : hasVariant($state, "slids", "unnamedVariant3")
                    ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                    : "\u062a\u0627\u06cc\u06cc\u062f \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gzzHh,
                    {
                      [sty.textloginByPassword__gzzHhKmmKg]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword__gzzHhsXGy]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textslids_unnamedVariant3__gzzHhB31NR]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.textunnamedVariant2__gzzHhJ9Exh]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant__gzzHhqA83H]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoginByPassword"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "loginByPassword",
                            operation: 4
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, true);
                            return true;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoginByPassword"] != null &&
                      typeof $steps["updateLoginByPassword"] === "object" &&
                      typeof $steps["updateLoginByPassword"].then === "function"
                    ) {
                      $steps["updateLoginByPassword"] = await $steps[
                        "updateLoginByPassword"
                      ];
                    }
                  }}
                >
                  {hasVariant($state, "unnamedVariant2", "unnamedVariant2") ? (
                    "\u06cc\u06a9\u06cc \u0627\u0632 \u0635\u0631\u0627\u0641\u06cc\u200c\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0628\u0647 \u0622\u0646\u0647\u0627 \u0645\u062a\u0635\u0644 \u0647\u0633\u062a\u06cc\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f \u062a\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644\u062a\u0627\u0646 \u0628\u0647 \u0622\u0646 \u0645\u062a\u0635\u0644 \u0634\u0648\u062f."
                  ) : hasVariant($state, "slids", "unnamedVariant3") ? (
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (
                              "لطفا کد 4 رقمی ارسال شده به شماره <b style='color: #2DC57B;'>" +
                              $state.number +
                              "</b> را وارد نمایید."
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 09155113179 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  ) : hasVariant($state, "unnamedVariant", "unnamedVariant") ? (
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (
                              "لطفا کد 4 رقمی ارسال شده به شماره <b style='color: #2DC57B;'>" +
                              $state.number +
                              "</b> را وارد نمایید."
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 09155113179 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  ) : (
                    "\u0648\u0631\u0648\u062f \u0628\u0627 \u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0648 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 "
                  )}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__pwNyH, {
                    [sty.freeBoxloginByPassword__pwNyHKmmKg]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.freeBoxpassword__pwNyHsXGy]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.freeBoxslids_unnamedVariant3__pwNyHb31NR]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.freeBoxunnamedVariant2__pwNyHj9Exh]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.freeBoxunnamedVariant__pwNyHqA83H]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <Input
                    data-plasmic-name={"fragmentInput3"}
                    data-plasmic-override={overrides.fragmentInput3}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentInput3,
                      {
                        [sty.fragmentInput3loginByPassword]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.fragmentInput3password]: hasVariant(
                          $state,
                          "password",
                          "password"
                        ),
                        [sty.fragmentInput3slids_unnamedVariant3]: hasVariant(
                          $state,
                          "slids",
                          "unnamedVariant3"
                        ),
                        [sty.fragmentInput3unnamedVariant2]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                        [sty.fragmentInput3unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput3",
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      hasVariant($state, "loginByPassword", "loginByPassword")
                        ? ``
                        : hasVariant($state, "password", "password")
                        ? ``
                        : "98+"
                    }
                    type={
                      hasVariant($state, "loginByPassword", "loginByPassword")
                        ? (() => {
                            try {
                              return $state.pass1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "password";
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "password", "password")
                        ? (() => {
                            try {
                              return $state.pass1;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "password";
                              }
                              throw e;
                            }
                          })()
                        : hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "tel"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput3",
                      "value"
                    ])}
                  />

                  <Icon55Icon
                    className={classNames(projectcss.all, sty.svg__l15Kr, {
                      [sty.svgloginByPassword__l15KrKmmKg]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.svgpassword__l15KrsXGy]: hasVariant(
                        $state,
                        "password",
                        "password"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updatePass1"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pass1"]
                              },
                              operation: 0,
                              value: "text"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePass1"] != null &&
                        typeof $steps["updatePass1"] === "object" &&
                        typeof $steps["updatePass1"].then === "function"
                      ) {
                        $steps["updatePass1"] = await $steps["updatePass1"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = { args: [1000] };
                            return $globalActions["Fragment.wait"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pass1"]
                              },
                              operation: 0,
                              value: "password"
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }
                    }}
                    role={"img"}
                  />
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__twKik, {
                    [sty.freeBoxslids_unnamedVariant3__twKikB31NR]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.freeBoxunnamedVariant__twKikqA83H]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <Input
                    data-plasmic-name={"fragmentInput2"}
                    data-plasmic-override={overrides.fragmentInput2}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentInput2,
                      {
                        [sty.fragmentInput2slids_unnamedVariant3]: hasVariant(
                          $state,
                          "slids",
                          "unnamedVariant3"
                        ),
                        [sty.fragmentInput2unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput2",
                        "value"
                      ]).apply(null, eventArgs);

                      (async value => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      hasVariant($state, "slids", "unnamedVariant3")
                        ? ``
                        : hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? ``
                        : "98+"
                    }
                    type={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "number"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput2",
                      "value"
                    ])}
                  />
                </Stack__>
                {(
                  hasVariant($state, "slids", "unnamedVariant3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "slids", "unnamedVariant3")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rxwkP,
                      {
                        [sty.textslids_unnamedVariant3__rxwkPb31NR]: hasVariant(
                          $state,
                          "slids",
                          "unnamedVariant3"
                        ),
                        [sty.textunnamedVariant2_unnamedVariant__rxwkPj9ExhQA83H]:
                          hasVariant(
                            $state,
                            "unnamedVariant2",
                            "unnamedVariant2"
                          ) &&
                          hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          ),
                        [sty.textunnamedVariant__rxwkPqA83H]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "slids", "unnamedVariant3") &&
                    hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (() => {
                                setInterval(() => {
                                  if ($state.time <= 0) {
                                  } else {
                                    $state.time--;
                                  }
                                }, 10000);
                                return (
                                  "ارسال مجدد پیامک  (" +
                                  "<b style='color: #2DC57B;'>" +
                                  $state.time +
                                  "</b>" +
                                  ")"
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : hasVariant($state, "slids", "unnamedVariant3") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (() => {
                                setInterval(() => {
                                  if ($state.time <= 0) {
                                  } else {
                                    $state.time--;
                                  }
                                }, 10000);
                                return (
                                  "ارسال مجدد پیامک  (" +
                                  "<b style='color: #2DC57B;'>" +
                                  $state.time +
                                  "</b>" +
                                  ")"
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ) &&
                      hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (
                                "ارسال مجدد پیامک  (" +
                                "<b style='color: #2DC57B;'>" +
                                $state.time +
                                "</b>" +
                                ")"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ) ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (
                                "ارسال مجدد پیامک  (" +
                                "<b style='color: #2DC57B;'>" +
                                $state.time +
                                "</b>" +
                                ")"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : (
                      "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)"
                    )}
                  </div>
                ) : null}
                <Timer
                  data-plasmic-name={"timer"}
                  data-plasmic-override={overrides.timer}
                  className={classNames("__wab_instance", sty.timer, {
                    [sty.timerpassword]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.timerunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  intervalSeconds={
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? 1
                      : undefined
                  }
                  isRunning={
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  }
                  onTick={async () => {
                    const $steps = {};

                    $steps["updateTime"] =
                      $state.time > 0
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["time"]
                              },
                              operation: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue - 1);
                              return oldValue - 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateTime"] != null &&
                      typeof $steps["updateTime"] === "object" &&
                      typeof $steps["updateTime"].then === "function"
                    ) {
                      $steps["updateTime"] = await $steps["updateTime"];
                    }
                  }}
                  runWhileEditing={
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? false
                      : false
                  }
                />

                {(
                  hasVariant($state, "slids", "unnamedVariant3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "slids", "unnamedVariant3")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : false
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e5SEx,
                      {
                        [sty.textslids_unnamedVariant3__e5SExB31NR]: hasVariant(
                          $state,
                          "slids",
                          "unnamedVariant3"
                        ),
                        [sty.textunnamedVariant__e5SExqA83H]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "GET",
                                "https://n8n.babarkat.com/webhook/Babarkat/login",
                                (() => {
                                  try {
                                    return { mobile: $state.number };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateTime"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["time"]
                              },
                              operation: 0,
                              value: 60
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTime"] != null &&
                        typeof $steps["updateTime"] === "object" &&
                        typeof $steps["updateTime"].then === "function"
                      ) {
                        $steps["updateTime"] = await $steps["updateTime"];
                      }
                    }}
                  >
                    {hasVariant($state, "slids", "unnamedVariant3")
                      ? "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9"
                      : hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9"
                      : "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)"}
                  </div>
                ) : null}
                <AntdSelect
                  data-plasmic-name={"select"}
                  data-plasmic-override={overrides.select}
                  className={classNames("__wab_instance", sty.select, {
                    [sty.selectunnamedVariant2]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.selectunnamedVariant2_unnamedVariant]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant"),
                    [sty.selectunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  defaultValue={
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.saraf[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 100;
                            }
                            throw e;
                          }
                        })()
                      : hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.saraf[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 100;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.saraf[0].value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return 100;
                            }
                            throw e;
                          }
                        })()
                  }
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select",
                      "value"
                    ]).apply(null, eventArgs);

                    (async (value, option) => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return $state.saraf;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [{ type: "option" }];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={null}
                  popupScopeClassName={sty["select__popup"]}
                  size={"large"}
                  suffixIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) && hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon37Icon
                          : Icon10Icon
                      }
                      className={classNames(projectcss.all, sty.svg__gvtNz, {
                        [sty.svgunnamedVariant2__gvtNzJ9Exh]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        )
                      })}
                      role={"img"}
                    />
                  }
                  value={generateStateValueProp($state, ["select", "value"])}
                />
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mhFz8,
                  {
                    [sty.textloginByPassword__mhFz8KmmKg]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.textpassword__mhFz8SXGy]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.textslids_unnamedVariant3__mhFz8B31NR]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.textunnamedVariant2__mhFz8J9Exh]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.textunnamedVariant__mhFz8QA83H]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updatePassword"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "password", operation: 6 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePassword"] != null &&
                    typeof $steps["updatePassword"] === "object" &&
                    typeof $steps["updatePassword"].then === "function"
                  ) {
                    $steps["updatePassword"] = await $steps["updatePassword"];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return localStorage.removeItem(
                                "userBabarkatPass"
                              );
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                {hasVariant($state, "loginByPassword", "loginByPassword")
                  ? "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
                  : hasVariant($state, "password", "password")
                  ? "\u0622\u06cc\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062e\u0648\u062f \u0631\u0627 \u0641\u0631\u0627\u0645\u0648\u0634 \u06a9\u0631\u062f\u0647\u200c\u0627\u06cc\u062f\u061f"
                  : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                  ? "\u0627\u0646\u062a\u062e\u0627\u0628 \u0635\u0631\u0627\u0641\u06cc"
                  : hasVariant($state, "slids", "unnamedVariant3")
                  ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                  : hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                  : "\u062a\u0627\u06cc\u06cc\u062f \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___36T9J, {
                  [sty.freeBoxforgottenPassword___36T9J6YjB]: hasVariant(
                    $state,
                    "forgottenPassword",
                    "forgottenPassword"
                  ),
                  [sty.freeBoxloginByPassword___36T9JKmmKg]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.freeBoxpassword___36T9JsXGy]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.freeBoxslids_unnamedVariant3___36T9JB31NR]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.freeBoxslids_unnamedVariant___36T9JTxTxl]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant2___36T9JJ9Exh]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxunnamedVariant___36T9JqA83H]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
              >
                <Button
                  data-plasmic-name={"btnNumber"}
                  data-plasmic-override={overrides.btnNumber}
                  className={classNames("__wab_instance", sty.btnNumber, {
                    [sty.btnNumberforgottenPassword]: hasVariant(
                      $state,
                      "forgottenPassword",
                      "forgottenPassword"
                    ),
                    [sty.btnNumberforgottenPassword_unnamedVariant]:
                      hasVariant(
                        $state,
                        "forgottenPassword",
                        "forgottenPassword"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant"),
                    [sty.btnNumberloginByPassword]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.btnNumberpassword]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.btnNumberslids_unnamedVariant3]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.btnNumberslids_unnamedVariant]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant"
                    ),
                    [sty.btnNumberunnamedVariant2]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.btnNumberunnamedVariant2_unnamedVariant]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant"),
                    [sty.btnNumberunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  color={"green"}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__zeFin)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return (
                        $state.fragmentInput.value.length != 11 ||
                        $state.loadedbtn
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["updateNumber"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["number"]
                            },
                            operation: 0,
                            value: $state.fragmentInput.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNumber"] != null &&
                      typeof $steps["updateNumber"] === "object" &&
                      typeof $steps["updateNumber"].then === "function"
                    ) {
                      $steps["updateNumber"] = await $steps["updateNumber"];
                    }

                    $steps["invokeGlobalAction"] = (() => {
                      const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                      return !phoneRegex.test($state.number);
                    })()
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0644\u0637\u0641\u0627\u064b \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647\u200c\u0637\u0648\u0631 \u0635\u062d\u06cc\u062d \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateFragmentInputValue"] = (() => {
                      const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                      return !phoneRegex.test($state.number);
                    })()
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["fragmentInput", "value"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue"] != null &&
                      typeof $steps["updateFragmentInputValue"] === "object" &&
                      typeof $steps["updateFragmentInputValue"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue"] = await $steps[
                        "updateFragmentInputValue"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = (() => {
                      const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                      return phoneRegex.test($state.number);
                    })()
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "GET",
                              "https://n8n.babarkat.com/webhook/Babarkat/login",
                              (() => {
                                try {
                                  return { mobile: $state.number };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              undefined
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["invokeGlobalAction3"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === false
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0634\u0645\u0627\u0631\u0647\u200c\u06cc \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0645\u0639\u062a\u0628\u0631 \u0646\u06cc\u0633\u062a.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateUnnamedVariant"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            vgroup: "unnamedVariant",
                            operation: 4
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, true);
                            return true;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUnnamedVariant"] != null &&
                      typeof $steps["updateUnnamedVariant"] === "object" &&
                      typeof $steps["updateUnnamedVariant"].then === "function"
                    ) {
                      $steps["updateUnnamedVariant"] = await $steps[
                        "updateUnnamedVariant"
                      ];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }

                    $steps["updateFragmentInputValue4"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["time"]
                            },
                            operation: 0,
                            value: 60
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue4"] != null &&
                      typeof $steps["updateFragmentInputValue4"] === "object" &&
                      typeof $steps["updateFragmentInputValue4"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue4"] = await $steps[
                        "updateFragmentInputValue4"
                      ];
                    }
                  }}
                  showEndIcon={(() => {
                    try {
                      return $state.loadedbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uAfTj
                    )}
                  >
                    {
                      "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"
                    }
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__s6R8L, {
                    [sty.buttonloginByPassword__s6R8LKmmKg]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.buttonloginByPassword_password__s6R8LKmmKgSXGy]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.buttonpassword__s6R8LsXGy]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.buttonslids_unnamedVariant3__s6R8Lb31NR]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.buttonslids_unnamedVariant__s6R8LTxTxl]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant"
                    ),
                    [sty.buttonunnamedVariant2__s6R8Lj9Exh]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.buttonunnamedVariant2_unnamedVariant__s6R8Lj9ExhQA83H]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant"),
                    [sty.buttonunnamedVariant__s6R8LqA83H]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  color={"green"}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__jVgb1)}
                      role={"img"}
                    />
                  }
                  isDisabled={
                    hasVariant($state, "loginByPassword", "loginByPassword")
                      ? (() => {
                          try {
                            return (
                              $state.fragmentInput.value.length != 11 ||
                              $state.fragmentInput3.value.length == 0 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "password", "password")
                      ? (() => {
                          try {
                            return (
                              $state.fragmentInput3.value.length == 0 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              $state.fragmentInput.value.length != 11 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/Babarkat/password",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    mobile: JSON.parse(
                                      localStorage.getItem("userbabarcat")
                                    ).mobile,
                                    password: $state.fragmentInput3.value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["invokeGlobalAction3"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === false
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0631\u0645\u0632 \u0646\u0627\u062f\u0631\u0633\u062a \u0627\u0633\u062a.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateFragmentInputValue2"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const item = {
                                  value:
                                    $steps.invokeGlobalAction2.data[0].data
                                      .token,
                                  expiration:
                                    new Date().getTime() + 10 * 60 * 1000
                                };
                                return sessionStorage.setItem(
                                  "userbabarcatToken",
                                  JSON.stringify(item)
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue2"] != null &&
                      typeof $steps["updateFragmentInputValue2"] === "object" &&
                      typeof $steps["updateFragmentInputValue2"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue2"] = await $steps[
                        "updateFragmentInputValue2"
                      ];
                    }

                    $steps["goToHomepage"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/users/logLaunch",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    type: "loginPassword",
                                    userToken: JSON.parse(
                                      sessionStorage.getItem(
                                        "userbabarcatToken"
                                      )
                                    ).value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }
                  }}
                  showEndIcon={(() => {
                    try {
                      return $state.loadedbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x5Flw,
                      {
                        [sty.textloginByPassword__x5FlwKmmKg]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.textpassword__x5FlWsXGy]: hasVariant(
                          $state,
                          "password",
                          "password"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "loginByPassword", "loginByPassword")
                      ? "\u0648\u0631\u0648\u062f"
                      : hasVariant($state, "password", "password")
                      ? "\u0648\u0631\u0648\u062f"
                      : "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__gYvww, {
                    [sty.buttonloginByPassword__gYvwwKmmKg]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.buttonloginByPassword_password__gYvwwKmmKgSXGy]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) && hasVariant($state, "password", "password"),
                    [sty.buttonpassword__gYvwwsXGy]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.buttonslids_unnamedVariant3__gYvwwB31NR]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.buttonslids_unnamedVariant__gYvwwTxTxl]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant"
                    ),
                    [sty.buttonunnamedVariant2__gYvwwJ9Exh]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.buttonunnamedVariant2_loginByPassword__gYvwwJ9ExhKmmKg]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.buttonunnamedVariant2_loginByPassword_password__gYvwwJ9ExhKmmKgSXGy]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) &&
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "password", "password"),
                    [sty.buttonunnamedVariant2_password__gYvwwJ9ExhSXGy]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) && hasVariant($state, "password", "password"),
                    [sty.buttonunnamedVariant2_unnamedVariant__gYvwwJ9ExhQA83H]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant"),
                    [sty.buttonunnamedVariant__gYvwwqA83H]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  color={"green"}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__lW2J4)}
                      role={"img"}
                    />
                  }
                  isDisabled={
                    hasVariant($state, "loginByPassword", "loginByPassword")
                      ? (() => {
                          try {
                            return (
                              $state.fragmentInput.value.length != 11 ||
                              $state.fragmentInput3.value.length == 0 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "password", "password")
                      ? (() => {
                          try {
                            return (
                              $state.fragmentInput3.value.length == 0 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              $state.fragmentInput.value.length != 11 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["updateNumber"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["number"]
                            },
                            operation: 0,
                            value: $state.fragmentInput.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNumber"] != null &&
                      typeof $steps["updateNumber"] === "object" &&
                      typeof $steps["updateNumber"].then === "function"
                    ) {
                      $steps["updateNumber"] = await $steps["updateNumber"];
                    }

                    $steps["invokeGlobalAction"] = (() => {
                      const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                      return !phoneRegex.test($state.number);
                    })()
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0644\u0637\u0641\u0627\u064b \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647\u200c\u0637\u0648\u0631 \u0635\u062d\u06cc\u062d \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateFragmentInputValue"] = (() => {
                      const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                      return !phoneRegex.test($state.number);
                    })()
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["fragmentInput", "value"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue"] != null &&
                      typeof $steps["updateFragmentInputValue"] === "object" &&
                      typeof $steps["updateFragmentInputValue"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue"] = await $steps[
                        "updateFragmentInputValue"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = (() => {
                      const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                      return phoneRegex.test($state.number);
                    })()
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/Babarkat/password",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    mobile: $state.number,
                                    password: $state.fragmentInput3.value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["invokeGlobalAction3"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === false
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0646\u0627\u062f\u0631\u0633\u062a \u0627\u0633\u062a.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateFragmentInputValue2"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                localStorage.setItem(
                                  "userbabarcat",
                                  JSON.stringify(
                                    $steps.invokeGlobalAction2.data[0].data
                                  )
                                );
                                const item = {
                                  value:
                                    $steps.invokeGlobalAction2.data[0].data
                                      .token,
                                  expiration:
                                    new Date().getTime() + 10 * 60 * 1000
                                };
                                return sessionStorage.setItem(
                                  "userbabarcatToken",
                                  JSON.stringify(item)
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue2"] != null &&
                      typeof $steps["updateFragmentInputValue2"] === "object" &&
                      typeof $steps["updateFragmentInputValue2"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue2"] = await $steps[
                        "updateFragmentInputValue2"
                      ];
                    }

                    $steps["goToHomepage"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }

                    $steps["updateFragmentInputValue3"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return localStorage.setItem(
                                  "userBabarkatPass",
                                  "true"
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue3"] != null &&
                      typeof $steps["updateFragmentInputValue3"] === "object" &&
                      typeof $steps["updateFragmentInputValue3"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue3"] = await $steps[
                        "updateFragmentInputValue3"
                      ];
                    }

                    $steps["updateFragmentInputValue4"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/users/logLaunch",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    type: "loginPassword",
                                    userToken: JSON.parse(
                                      sessionStorage.getItem(
                                        "userbabarcatToken"
                                      )
                                    ).value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue4"] != null &&
                      typeof $steps["updateFragmentInputValue4"] === "object" &&
                      typeof $steps["updateFragmentInputValue4"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue4"] = await $steps[
                        "updateFragmentInputValue4"
                      ];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }
                  }}
                  showEndIcon={(() => {
                    try {
                      return $state.loadedbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fXzGi,
                      {
                        [sty.textloginByPassword__fXzGiKmmKg]: hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ),
                        [sty.textpassword__fXzGisXGy]: hasVariant(
                          $state,
                          "password",
                          "password"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "loginByPassword", "loginByPassword")
                      ? "\u0648\u0631\u0648\u062f"
                      : hasVariant($state, "password", "password")
                      ? "\u0648\u0631\u0648\u062f"
                      : "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
                <Button
                  data-plasmic-name={"btnSaraf"}
                  data-plasmic-override={overrides.btnSaraf}
                  className={classNames("__wab_instance", sty.btnSaraf, {
                    [sty.btnSarafloginByPassword]: hasVariant(
                      $state,
                      "loginByPassword",
                      "loginByPassword"
                    ),
                    [sty.btnSarafloginByPassword_password]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.btnSarafpassword]: hasVariant(
                      $state,
                      "password",
                      "password"
                    ),
                    [sty.btnSarafslids_unnamedVariant3]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.btnSarafslids_unnamedVariant]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant"
                    ),
                    [sty.btnSarafunnamedVariant2]: hasVariant(
                      $state,
                      "unnamedVariant2",
                      "unnamedVariant2"
                    ),
                    [sty.btnSarafunnamedVariant2_loginByPassword]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "loginByPassword", "loginByPassword"),
                    [sty.btnSarafunnamedVariant2_unnamedVariant]:
                      hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ) &&
                      hasVariant($state, "unnamedVariant", "unnamedVariant"),
                    [sty.btnSarafunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  color={"green"}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ni8Us)}
                      role={"img"}
                    />
                  }
                  isDisabled={
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? (() => {
                          try {
                            return $state.loadedbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                      ? (() => {
                          try {
                            return $state.loadedbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (
                              $state.fragmentInput.value.length != 11 ||
                              $state.loadedbtn
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["updateSelectsaraf"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectsaraf"]
                            },
                            operation: 0,
                            value: $state.select.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectsaraf"] != null &&
                      typeof $steps["updateSelectsaraf"] === "object" &&
                      typeof $steps["updateSelectsaraf"].then === "function"
                    ) {
                      $steps["updateSelectsaraf"] = await $steps[
                        "updateSelectsaraf"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/Babarkat/login",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    _saraf: $state.selectsaraf,
                                    userToken: JSON.parse(
                                      sessionStorage.getItem(
                                        "userbabarcatToken"
                                      )
                                    ).value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = (
                      $steps.invokeGlobalAction?.data
                        ? $steps.invokeGlobalAction?.data[0]?.success == false
                        : true
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0645\u0634\u06a9\u0644\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["runCode"] = (
                      $steps.invokeGlobalAction?.data
                        ? $steps.invokeGlobalAction?.data[0]?.success == true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                localStorage.setItem(
                                  "userbabarcat",
                                  JSON.stringify(
                                    $steps.invokeGlobalAction.data[0].data
                                  )
                                );
                                const item = {
                                  value:
                                    $steps.invokeGlobalAction.data[0].data
                                      .token,
                                  expiration:
                                    new Date().getTime() + 10 * 60 * 1000
                                };
                                return sessionStorage.setItem(
                                  "userbabarcatToken",
                                  JSON.stringify(item)
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["goToHomepage"] = (
                      $steps.invokeGlobalAction?.data
                        ? $steps.invokeGlobalAction?.data[0]?.success == true
                        : false
                    )
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }

                    $steps["invokeGlobalAction3"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/users/logLaunch",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    type: "loginSms",
                                    userToken: JSON.parse(
                                      sessionStorage.getItem(
                                        "userbabarcatToken"
                                      )
                                    ).value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }
                  }}
                  showEndIcon={
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2") &&
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? (() => {
                          try {
                            return $state.loadedbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                      ? (() => {
                          try {
                            return $state.loadedbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return $state.loadedbtn;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fssTl,
                      {
                        [sty.textunnamedVariant2__fssTlj9Exh]: hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "unnamedVariant2", "unnamedVariant2")
                      ? "\u062a\u0627\u06cc\u06cc\u062f"
                      : "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
                {(
                  hasVariant($state, "slids", "unnamedVariant3")
                    ? true
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? true
                    : false
                ) ? (
                  <Button
                    data-plasmic-name={"sendcode"}
                    data-plasmic-override={overrides.sendcode}
                    className={classNames("__wab_instance", sty.sendcode, {
                      [sty.sendcodeforgottenPassword]: hasVariant(
                        $state,
                        "forgottenPassword",
                        "forgottenPassword"
                      ),
                      [sty.sendcodeforgottenPassword_unnamedVariant]:
                        hasVariant(
                          $state,
                          "forgottenPassword",
                          "forgottenPassword"
                        ) &&
                        hasVariant($state, "unnamedVariant", "unnamedVariant"),
                      [sty.sendcodeloginByPassword]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.sendcodepassword]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.sendcodeslids_unnamedVariant2]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant2"
                      ),
                      [sty.sendcodeslids_unnamedVariant3]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.sendcodeslids_unnamedVariant]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant"
                      ),
                      [sty.sendcodeunnamedVariant2]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.sendcodeunnamedVariant2_password]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) && hasVariant($state, "password", "password"),
                      [sty.sendcodeunnamedVariant2_unnamedVariant]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) &&
                        hasVariant($state, "unnamedVariant", "unnamedVariant"),
                      [sty.sendcodeunnamedVariant]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    })}
                    color={"green"}
                    endIcon={
                      <PlasmicIcon__
                        PlasmicIconType={
                          hasVariant($state, "unnamedVariant", "unnamedVariant")
                            ? IconIcon
                            : Icon3Icon
                        }
                        className={classNames(projectcss.all, sty.svg__d4TOs, {
                          [sty.svgunnamedVariant__d4TOSqA83H]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        })}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "slids", "unnamedVariant3") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return $state.fragmentInput2.value.length != 4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "slids", "unnamedVariant3")
                        ? (() => {
                            try {
                              return $state.fragmentInput2.value.length != 4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          ) &&
                          hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return $state.fragmentInput2.value.length != 4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? (() => {
                            try {
                              return $state.fragmentInput2.value.length != 4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.fragmentInput2.value.length != 11;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateCode"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["code"]
                              },
                              operation: 0,
                              value: parseInt($state.fragmentInput2.value)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCode"] != null &&
                        typeof $steps["updateCode"] === "object" &&
                        typeof $steps["updateCode"].then === "function"
                      ) {
                        $steps["updateCode"] = await $steps["updateCode"];
                      }

                      $steps["invokeGlobalAction2"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.babarkat.com/webhook/Babarkat/login",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      mobile: $state.number,
                                      code: $state.code
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = (
                        $steps.invokeGlobalAction2?.data
                          ? $steps.invokeGlobalAction2?.data[0]?.success ==
                            false
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u06a9\u062f \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u0645\u06cc \u0628\u0627\u0634\u062f.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode"] = (
                        $steps.invokeGlobalAction2?.data
                          ? $steps.invokeGlobalAction2?.data[0]?.success == true
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  localStorage.setItem(
                                    "userbabarcat",
                                    JSON.stringify(
                                      $steps.invokeGlobalAction2.data[0].data
                                    )
                                  );
                                  const item = {
                                    value:
                                      $steps.invokeGlobalAction2.data[0].data
                                        .token,
                                    expiration:
                                      new Date().getTime() + 10 * 60 * 1000
                                  };
                                  return sessionStorage.setItem(
                                    "userbabarcatToken",
                                    JSON.stringify(item)
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction3"] = (
                        $steps.invokeGlobalAction2?.data
                          ? $steps.invokeGlobalAction2?.data[0]?.success ==
                            false
                          : true
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0645\u0634\u06a9\u0644\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["updateForgottenPassword"] = (
                        $steps.invokeGlobalAction2?.data
                          ? $steps.invokeGlobalAction2?.data[0]?.success == true
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              vgroup: "forgottenPassword",
                              operation: 4
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, true);
                              return true;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateForgottenPassword"] != null &&
                        typeof $steps["updateForgottenPassword"] === "object" &&
                        typeof $steps["updateForgottenPassword"].then ===
                          "function"
                      ) {
                        $steps["updateForgottenPassword"] = await $steps[
                          "updateForgottenPassword"
                        ];
                      }

                      $steps["updateUnnamedVariant"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "unnamedVariant",
                              operation: 6,
                              value: "unnamedVariant"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, false);
                              return false;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUnnamedVariant"] != null &&
                        typeof $steps["updateUnnamedVariant"] === "object" &&
                        typeof $steps["updateUnnamedVariant"].then ===
                          "function"
                      ) {
                        $steps["updateUnnamedVariant"] = await $steps[
                          "updateUnnamedVariant"
                        ];
                      }

                      $steps["updateLoadedbtn2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn2"] != null &&
                        typeof $steps["updateLoadedbtn2"] === "object" &&
                        typeof $steps["updateLoadedbtn2"].then === "function"
                      ) {
                        $steps["updateLoadedbtn2"] = await $steps[
                          "updateLoadedbtn2"
                        ];
                      }
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadedbtn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qxFgU,
                        {
                          [sty.textunnamedVariant__qxFgUqA83H]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {"\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                  </Button>
                ) : null}
              </div>
              {(
                hasVariant($state, "slids", "unnamedVariant3")
                  ? true
                  : hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? true
                  : false
              ) ? (
                <div
                  data-plasmic-name={"figmaPaste"}
                  data-plasmic-override={overrides.figmaPaste}
                  className={classNames(projectcss.all, sty.figmaPaste, {
                    [sty.figmaPasteslids_unnamedVariant3]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.figmaPasteunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"group"}
                    data-plasmic-override={overrides.group}
                    className={classNames(projectcss.all, sty.group, {
                      [sty.groupunnamedVariant]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    })}
                  >
                    <div
                      data-plasmic-name={"group2"}
                      data-plasmic-override={overrides.group2}
                      className={classNames(projectcss.all, sty.group2)}
                    >
                      <div
                        data-plasmic-name={"rectangle35"}
                        data-plasmic-override={overrides.rectangle35}
                        className={classNames(projectcss.all, sty.rectangle35)}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zTZsJ
                        )}
                      >
                        {"\u0627\u062f\u0627\u0645\u0647"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"group3"}
                      data-plasmic-override={overrides.group3}
                      className={classNames(projectcss.all, sty.group3, {
                        [sty.group3slids_unnamedVariant3]: hasVariant(
                          $state,
                          "slids",
                          "unnamedVariant3"
                        ),
                        [sty.group3unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      })}
                    >
                      <div
                        data-plasmic-name={"group4"}
                        data-plasmic-override={overrides.group4}
                        className={classNames(projectcss.all, sty.group4)}
                      >
                        <div
                          data-plasmic-name={"rectangle23"}
                          data-plasmic-override={overrides.rectangle23}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle23
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yWqZ
                          )}
                        >
                          {"1"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group5"}
                        data-plasmic-override={overrides.group5}
                        className={classNames(projectcss.all, sty.group5)}
                      >
                        <div
                          data-plasmic-name={"rectangle24"}
                          data-plasmic-override={overrides.rectangle24}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle24
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iTm
                          )}
                        >
                          {"2"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group6"}
                        data-plasmic-override={overrides.group6}
                        className={classNames(projectcss.all, sty.group6)}
                      >
                        <div
                          data-plasmic-name={"rectangle25"}
                          data-plasmic-override={overrides.rectangle25}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle25
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cbyMc
                          )}
                        >
                          {"3"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group7"}
                        data-plasmic-override={overrides.group7}
                        className={classNames(projectcss.all, sty.group7)}
                      >
                        <div
                          data-plasmic-name={"rectangle"}
                          data-plasmic-override={overrides.rectangle}
                          className={classNames(projectcss.all, sty.rectangle, {
                            [sty.rectangleslids_unnamedVariant3]: hasVariant(
                              $state,
                              "slids",
                              "unnamedVariant3"
                            ),
                            [sty.rectangleunnamedVariant]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          })}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pro37
                          )}
                        >
                          {"4"}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ci0E,
                        {
                          [sty.textslids_unnamedVariant3__ci0EB31NR]:
                            hasVariant($state, "slids", "unnamedVariant3"),
                          [sty.textunnamedVariant__ci0EqA83H]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 \u0632\u06cc\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7RSqn,
                        {
                          [sty.textslids_unnamedVariant3___7RSqnb31NR]:
                            hasVariant($state, "slids", "unnamedVariant3"),
                          [sty.textunnamedVariant___7RSqNqA83H]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"group8"}
                    data-plasmic-override={overrides.group8}
                    className={classNames(projectcss.all, sty.group8)}
                  />
                </div>
              ) : null}
              <div
                data-plasmic-name={"group9"}
                data-plasmic-override={overrides.group9}
                className={classNames(projectcss.all, sty.group9, {
                  [sty.group9loginByPassword]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.group9password]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.group9slids_unnamedVariant2]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant2"
                  ),
                  [sty.group9slids_unnamedVariant3]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.group9slids_unnamedVariant]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant"
                  ),
                  [sty.group9unnamedVariant2]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.group9unnamedVariant2_loginByPassword]:
                    hasVariant($state, "loginByPassword", "loginByPassword") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.group9unnamedVariant2_password]:
                    hasVariant($state, "password", "password") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.group9unnamedVariant2_unnamedVariant]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.group9unnamedVariant]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  ),
                  [sty.group9unnamedVariant_password]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "password", "password")
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateUnnamedVariant"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "unnamedVariant",
                          operation: 6
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateUnnamedVariant"] != null &&
                    typeof $steps["updateUnnamedVariant"] === "object" &&
                    typeof $steps["updateUnnamedVariant"].then === "function"
                  ) {
                    $steps["updateUnnamedVariant"] = await $steps[
                      "updateUnnamedVariant"
                    ];
                  }

                  $steps["updateLoginByPassword"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "loginByPassword",
                          operation: 6
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoginByPassword"] != null &&
                    typeof $steps["updateLoginByPassword"] === "object" &&
                    typeof $steps["updateLoginByPassword"].then === "function"
                  ) {
                    $steps["updateLoginByPassword"] = await $steps[
                      "updateLoginByPassword"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gk9Tg,
                    {
                      [sty.textloginByPassword__gk9TgKmmKg]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword__gk9TGsXGy]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textslids_unnamedVariant3__gk9Tgb31NR]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.textunnamedVariant2__gk9Tgj9Exh]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant2_loginByPassword__gk9Tgj9ExhKmmKg]:
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ) &&
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                      [sty.textunnamedVariant2_password__gk9Tgj9ExhSXGy]:
                        hasVariant($state, "password", "password") &&
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                      [sty.textunnamedVariant2_unnamedVariant__gk9Tgj9ExhQA83H]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) &&
                        hasVariant($state, "unnamedVariant", "unnamedVariant"),
                      [sty.textunnamedVariant__gk9TGqA83H]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "loginByPassword", "loginByPassword")
                    ? "\u0648\u0631\u0648\u062f \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                    : hasVariant($state, "password", "password")
                    ? "\u0648\u0631\u0648\u062f \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                    : "\u0627\u0635\u0644\u0627\u062d \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                </div>
                <LeftArrowBackSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__kgrxh, {
                    [sty.svgslids_unnamedVariant3__kgrxhB31NR]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.svgunnamedVariant2_loginByPassword__kgrxhJ9ExhKmmKg]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.svgunnamedVariant2_password__kgrxhJ9ExhSXGy]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.svgunnamedVariant__kgrxhqA83H]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  role={"img"}
                />
              </div>
              <div
                data-plasmic-name={"group10"}
                data-plasmic-override={overrides.group10}
                className={classNames(projectcss.all, sty.group10, {
                  [sty.group10loginByPassword]: hasVariant(
                    $state,
                    "loginByPassword",
                    "loginByPassword"
                  ),
                  [sty.group10loginByPassword_unnamedVariant]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "loginByPassword", "loginByPassword"),
                  [sty.group10password]: hasVariant(
                    $state,
                    "password",
                    "password"
                  ),
                  [sty.group10slids_unnamedVariant2]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant2"
                  ),
                  [sty.group10slids_unnamedVariant3]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.group10slids_unnamedVariant]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant"
                  ),
                  [sty.group10unnamedVariant2]: hasVariant(
                    $state,
                    "unnamedVariant2",
                    "unnamedVariant2"
                  ),
                  [sty.group10unnamedVariant2_loginByPassword]:
                    hasVariant($state, "loginByPassword", "loginByPassword") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.group10unnamedVariant2_password]:
                    hasVariant($state, "password", "password") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.group10unnamedVariant2_unnamedVariant]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.group10unnamedVariant]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateUnnamedVariant"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "unnamedVariant",
                          operation: 6
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateUnnamedVariant"] != null &&
                    typeof $steps["updateUnnamedVariant"] === "object" &&
                    typeof $steps["updateUnnamedVariant"].then === "function"
                  ) {
                    $steps["updateUnnamedVariant"] = await $steps[
                      "updateUnnamedVariant"
                    ];
                  }

                  $steps["updatePassword"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "password", operation: 6 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePassword"] != null &&
                    typeof $steps["updatePassword"] === "object" &&
                    typeof $steps["updatePassword"].then === "function"
                  ) {
                    $steps["updatePassword"] = await $steps["updatePassword"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j9MKl,
                    {
                      [sty.textloginByPassword__j9MKlKmmKg]: hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ),
                      [sty.textpassword__j9MKlsXGy]: hasVariant(
                        $state,
                        "password",
                        "password"
                      ),
                      [sty.textslids_unnamedVariant3__j9MKlB31NR]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.textunnamedVariant2__j9MKlJ9Exh]: hasVariant(
                        $state,
                        "unnamedVariant2",
                        "unnamedVariant2"
                      ),
                      [sty.textunnamedVariant2_loginByPassword__j9MKlJ9ExhKmmKg]:
                        hasVariant(
                          $state,
                          "loginByPassword",
                          "loginByPassword"
                        ) &&
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                      [sty.textunnamedVariant2_password__j9MKlJ9ExhSXGy]:
                        hasVariant($state, "password", "password") &&
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ),
                      [sty.textunnamedVariant2_unnamedVariant__j9MKlJ9ExhQA83H]:
                        hasVariant(
                          $state,
                          "unnamedVariant2",
                          "unnamedVariant2"
                        ) &&
                        hasVariant($state, "unnamedVariant", "unnamedVariant"),
                      [sty.textunnamedVariant__j9MKlqA83H]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "loginByPassword", "loginByPassword")
                    ? "\u0648\u0631\u0648\u062f \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                    : hasVariant($state, "password", "password")
                    ? "\u0648\u0631\u0648\u062f \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                    : "\u0627\u0635\u0644\u0627\u062d \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                </div>
                <LeftArrowBackSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg__wDmql, {
                    [sty.svgslids_unnamedVariant3__wDmqlB31NR]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.svgunnamedVariant2_loginByPassword__wDmqlJ9ExhKmmKg]:
                      hasVariant(
                        $state,
                        "loginByPassword",
                        "loginByPassword"
                      ) &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.svgunnamedVariant2_password__wDmqlJ9ExhSXGy]:
                      hasVariant($state, "password", "password") &&
                      hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                    [sty.svgunnamedVariant__wDmqlqA83H]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  role={"img"}
                />
              </div>
              <Editpass
                data-plasmic-name={"editpass"}
                data-plasmic-override={overrides.editpass}
                className={classNames("__wab_instance", sty.editpass, {
                  [sty.editpassforgottenPassword]: hasVariant(
                    $state,
                    "forgottenPassword",
                    "forgottenPassword"
                  ),
                  [sty.editpassforgottenPassword_unnamedVariant]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant(
                      $state,
                      "forgottenPassword",
                      "forgottenPassword"
                    ),
                  [sty.editpassunnamedVariant2_unnamedVariant]:
                    hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant2", "unnamedVariant2"),
                  [sty.editpassunnamedVariant]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
                token={(() => {
                  try {
                    return JSON.parse(
                      sessionStorage.getItem("userbabarcatToken")
                    ).value;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </Reveal>
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tMqBh, {
              [sty.freeBoxunnamedVariant__tMqBHqA83H]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mKeml)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ieF7M)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "80px"
                    : "150px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/babarkat/images/image10.svg",
                  fullWidth: 100,
                  fullHeight: 100,
                  aspectRatio: 1
                }}
              />
            </div>
          </Stack__>
        ) : null}
        {(hasVariant($state, "slids", "unnamedVariant") ? true : false) ? (
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__f3JC, {
              [sty.imgslids_unnamedVariant2__f3JCOPnUz]: hasVariant(
                $state,
                "slids",
                "unnamedVariant2"
              ),
              [sty.imgslids_unnamedVariant3__f3JCB31NR]: hasVariant(
                $state,
                "slids",
                "unnamedVariant3"
              ),
              [sty.imgslids_unnamedVariant__f3JCTxTxl]: hasVariant(
                $state,
                "slids",
                "unnamedVariant"
              )
            })}
            displayHeight={
              hasVariant($state, "slids", "unnamedVariant") ? "100%" : "auto"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant($state, "slids", "unnamedVariant") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100%"
                : hasVariant($state, "slids", "unnamedVariant")
                ? "auto"
                : "auto"
            }
            loading={"lazy"}
            src={{
              src: "/plasmic/babarkat/images/image8.png",
              fullWidth: 390,
              fullHeight: 533,
              aspectRatio: undefined
            }}
          />
        ) : null}
        <ApiRequest
          data-plasmic-name={"apiRequest"}
          data-plasmic-override={overrides.apiRequest}
          className={classNames("__wab_instance", sty.apiRequest, {
            [sty.apiRequestloginByPassword]: hasVariant(
              $state,
              "loginByPassword",
              "loginByPassword"
            ),
            [sty.apiRequestpassword]: hasVariant(
              $state,
              "password",
              "password"
            ),
            [sty.apiRequestunnamedVariant2]: hasVariant(
              $state,
              "unnamedVariant2",
              "unnamedVariant2"
            ),
            [sty.apiRequestunnamedVariant]: hasVariant(
              $state,
              "unnamedVariant",
              "unnamedVariant"
            )
          })}
          errorDisplay={null}
          loadingDisplay={null}
          method={"GET"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
              null,
              eventArgs
            );

            (async loading => {
              const $steps = {};
            }).apply(null, eventArgs);
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
              null,
              eventArgs
            );
          }}
          url={"/"}
        />

        <Embed
          data-plasmic-name={"embedHtml"}
          data-plasmic-override={overrides.embedHtml}
          className={classNames("__wab_instance", sty.embedHtml, {
            [sty.embedHtmlloginByPassword]: hasVariant(
              $state,
              "loginByPassword",
              "loginByPassword"
            ),
            [sty.embedHtmlunnamedVariant]: hasVariant(
              $state,
              "unnamedVariant",
              "unnamedVariant"
            )
          })}
          code={
            hasVariant($state, "loginByPassword", "loginByPassword")
              ? "<script>\r\n    const myElement = document.querySelector('.logoLogin');\r\n    let initialHeight = window.innerHeight;\r\n\r\n    window.addEventListener('resize', () => {\r\n        if (window.innerHeight < initialHeight * (2 / 3)) {\r\n            myElement.style.display = 'none';\r\n        } else {\r\n            myElement.style.display = 'block';\r\n        }\r\n    });\r\n</script>\r\n"
              : hasVariant($state, "unnamedVariant", "unnamedVariant")
              ? "  <script>\r\n        const myElement = document.getElementById('logoLogin');\r\n        let initialHeight = window.innerHeight;\r\n\r\n        window.addEventListener('resize', () => {\r\n            if (window.innerHeight < initialHeight * (2 / 3)) {\r\n              console.log(\"\u0627\u0644\u0627\u0646\");\r\n                myElement.style.display = 'none';\r\n            } else {\r\n                myElement.style.display = 'block';\r\n            }\r\n        });\r\n    </script>"
              : "  <script>\r\n          var initialHeight = window.innerHeight;\r\n\r\n        window.addEventListener('resize', () => {\r\n            if (window.innerHeight < initialHeight * (2 / 3)) {\r\n                        document.getElementById('logoLogin').style.display = 'none';\r\n            } else {\r\n                        document.getElementById('logoLogin').style.display = 'block';\r\n            }\r\n        });\r\n    </script>"
          }
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "reveal",
    "fragmentInput",
    "fragmentInput3",
    "fragmentInput2",
    "timer",
    "select",
    "btnNumber",
    "btnSaraf",
    "sendcode",
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8",
    "group9",
    "group10",
    "editpass",
    "apiRequest",
    "embedHtml"
  ],
  reveal: [
    "reveal",
    "fragmentInput",
    "fragmentInput3",
    "fragmentInput2",
    "timer",
    "select",
    "btnNumber",
    "btnSaraf",
    "sendcode",
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8",
    "group9",
    "group10",
    "editpass"
  ],
  fragmentInput: ["fragmentInput"],
  fragmentInput3: ["fragmentInput3"],
  fragmentInput2: ["fragmentInput2"],
  timer: ["timer"],
  select: ["select"],
  btnNumber: ["btnNumber"],
  btnSaraf: ["btnSaraf"],
  sendcode: ["sendcode"],
  figmaPaste: [
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8"
  ],
  group: [
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle"
  ],
  group2: ["group2", "rectangle35"],
  rectangle35: ["rectangle35"],
  group3: [
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle"
  ],
  group4: ["group4", "rectangle23"],
  rectangle23: ["rectangle23"],
  group5: ["group5", "rectangle24"],
  rectangle24: ["rectangle24"],
  group6: ["group6", "rectangle25"],
  rectangle25: ["rectangle25"],
  group7: ["group7", "rectangle"],
  rectangle: ["rectangle"],
  group8: ["group8"],
  group9: ["group9"],
  group10: ["group10"],
  editpass: ["editpass"],
  apiRequest: ["apiRequest"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  reveal: typeof Reveal;
  fragmentInput: typeof Input;
  fragmentInput3: typeof Input;
  fragmentInput2: typeof Input;
  timer: typeof Timer;
  select: typeof AntdSelect;
  btnNumber: typeof Button;
  btnSaraf: typeof Button;
  sendcode: typeof Button;
  figmaPaste: "div";
  group: "div";
  group2: "div";
  rectangle35: "div";
  group3: "div";
  group4: "div";
  rectangle23: "div";
  group5: "div";
  rectangle24: "div";
  group6: "div";
  rectangle25: "div";
  group7: "div";
  rectangle: "div";
  group8: "div";
  group9: "div";
  group10: "div";
  editpass: typeof Editpass;
  apiRequest: typeof ApiRequest;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogIn2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogIn2__VariantsArgs;
    args?: PlasmicLogIn2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogIn2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLogIn2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogIn2__ArgProps,
          internalVariantPropNames: PlasmicLogIn2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogIn2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogIn2";
  } else {
    func.displayName = `PlasmicLogIn2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sZQMbqXz9utLNaTnNb3uss"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicLogIn2 = Object.assign(
  // Top-level PlasmicLogIn2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    fragmentInput: makeNodeComponent("fragmentInput"),
    fragmentInput3: makeNodeComponent("fragmentInput3"),
    fragmentInput2: makeNodeComponent("fragmentInput2"),
    timer: makeNodeComponent("timer"),
    select: makeNodeComponent("select"),
    btnNumber: makeNodeComponent("btnNumber"),
    btnSaraf: makeNodeComponent("btnSaraf"),
    sendcode: makeNodeComponent("sendcode"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    group: makeNodeComponent("group"),
    group2: makeNodeComponent("group2"),
    rectangle35: makeNodeComponent("rectangle35"),
    group3: makeNodeComponent("group3"),
    group4: makeNodeComponent("group4"),
    rectangle23: makeNodeComponent("rectangle23"),
    group5: makeNodeComponent("group5"),
    rectangle24: makeNodeComponent("rectangle24"),
    group6: makeNodeComponent("group6"),
    rectangle25: makeNodeComponent("rectangle25"),
    group7: makeNodeComponent("group7"),
    rectangle: makeNodeComponent("rectangle"),
    group8: makeNodeComponent("group8"),
    group9: makeNodeComponent("group9"),
    group10: makeNodeComponent("group10"),
    editpass: makeNodeComponent("editpass"),
    apiRequest: makeNodeComponent("apiRequest"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicLogIn2
    internalVariantProps: PlasmicLogIn2__VariantProps,
    internalArgProps: PlasmicLogIn2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "بابرکت",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/cdcc22ba73cb1607cdeb736202b178e2.png",
      canonical: ""
    }
  }
);

export default PlasmicLogIn2;
/* prettier-ignore-end */
