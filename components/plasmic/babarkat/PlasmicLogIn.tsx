// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: -3JBPQCG-aXv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: OG1SoduAPhRs/codeComponent

import {
  ExperimentValue,
  useExperiment
} from "./PlasmicGlobalVariant__Experiment"; // plasmic-import: 0yNpRAZ9BHRO/globalVariant
import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: 0yrtEc_Se3kZ/globalVariant
import {
  UnnamedGlobalGroupOfVariants2Value,
  useUnnamedGlobalGroupOfVariants2
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants2"; // plasmic-import: N3RmGzhPpcNq/globalVariant
import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicLogIn.module.css"; // plasmic-import: -3JBPQCG-aXv/css

import BabarkatlogoCopy2SvgIcon from "./icons/PlasmicIcon__BabarkatlogoCopy2Svg"; // plasmic-import: T8YZBqDbfTTx/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jg6gpiNRWEQd/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import LeftArrowBackSvgrepoComSvgIcon from "./icons/PlasmicIcon__LeftArrowBackSvgrepoComSvg"; // plasmic-import: LNmML4UO8Edb/icon

createPlasmicElementProxy;

export type PlasmicLogIn__VariantMembers = {
  unnamedVariant: "unnamedVariant";
  slids: "unnamedVariant" | "unnamedVariant2" | "unnamedVariant3";
};
export type PlasmicLogIn__VariantsArgs = {
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
  slids?: SingleChoiceArg<
    "unnamedVariant" | "unnamedVariant2" | "unnamedVariant3"
  >;
};
type VariantPropType = keyof PlasmicLogIn__VariantsArgs;
export const PlasmicLogIn__VariantProps = new Array<VariantPropType>(
  "unnamedVariant",
  "slids"
);

export type PlasmicLogIn__ArgsType = {
  disabled?: boolean;
};
type ArgPropType = keyof PlasmicLogIn__ArgsType;
export const PlasmicLogIn__ArgProps = new Array<ArgPropType>("disabled");

export type PlasmicLogIn__OverridesType = {
  root?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  fragmentInput?: Flex__<typeof Input>;
  fragmentInput2?: Flex__<typeof Input>;
  button?: Flex__<typeof Button>;
  sendcode?: Flex__<typeof Button>;
  figmaPaste?: Flex__<"div">;
  group?: Flex__<"div">;
  group2?: Flex__<"div">;
  rectangle35?: Flex__<"div">;
  group3?: Flex__<"div">;
  group4?: Flex__<"div">;
  rectangle23?: Flex__<"div">;
  group5?: Flex__<"div">;
  rectangle24?: Flex__<"div">;
  group6?: Flex__<"div">;
  rectangle25?: Flex__<"div">;
  group7?: Flex__<"div">;
  rectangle?: Flex__<"div">;
  group8?: Flex__<"div">;
  group9?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultLogInProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogIn__RenderFunc(props: {
  variants: PlasmicLogIn__VariantsArgs;
  args: PlasmicLogIn__ArgsType;
  overrides: PlasmicLogIn__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "fragmentInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.fragmentInput.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      },
      {
        path: "fragmentInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "time",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return 60;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 60;
              }
              throw e;
            }
          })()
      },
      {
        path: "loadedbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "code",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "slids",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.slids
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    experiment: useExperiment(),
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    unnamedGlobalGroupOfVariants2: useUnnamedGlobalGroupOfVariants2(),
    screen: useScreenVariantsosEvNkdp6Zt6()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root,
          {
            [sty.rootglobal_experiment_override]: hasVariant(
              globalVariants,
              "experiment",
              "override"
            ),
            [sty.rootglobal_unnamedGlobalGroupOfVariants2_unnamedVariant_global_unnamedGlobalGroupOfVariants_unnamedVariant]:
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants",
                "unnamedVariant"
              ) &&
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants2",
                "unnamedVariant"
              ),
            [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants",
                "unnamedVariant"
              ),
            [sty.rootslids_unnamedVariant2]: hasVariant(
              $state,
              "slids",
              "unnamedVariant2"
            ),
            [sty.rootslids_unnamedVariant3]: hasVariant(
              $state,
              "slids",
              "unnamedVariant3"
            ),
            [sty.rootslids_unnamedVariant]: hasVariant(
              $state,
              "slids",
              "unnamedVariant"
            ),
            [sty.rootunnamedVariant]: hasVariant(
              $state,
              "unnamedVariant",
              "unnamedVariant"
            ),
            [sty.rootunnamedVariant_slids_unnamedVariant2]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "slids", "unnamedVariant2"),
            [sty.rootunnamedVariant_slids_unnamedVariant3]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "slids", "unnamedVariant3"),
            [sty.rootunnamedVariant_slids_unnamedVariant]:
              hasVariant($state, "unnamedVariant", "unnamedVariant") &&
              hasVariant($state, "slids", "unnamedVariant")
          }
        )}
      >
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return !$state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return !$state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            cascade={
              hasVariant($state, "slids", "unnamedVariant3")
                ? false
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? false
                : undefined
            }
            className={classNames("__wab_instance", sty.reveal, {
              [sty.revealslids_unnamedVariant3]: hasVariant(
                $state,
                "slids",
                "unnamedVariant3"
              ),
              [sty.revealslids_unnamedVariant]: hasVariant(
                $state,
                "slids",
                "unnamedVariant"
              ),
              [sty.revealunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
            damping={
              hasVariant($state, "slids", "unnamedVariant3")
                ? 0.5
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? 0.5
                : undefined
            }
            direction={
              hasVariant($state, "slids", "unnamedVariant3")
                ? "left"
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? "left"
                : undefined
            }
            effect={
              hasVariant($state, "slids", "unnamedVariant3")
                ? "slide"
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? "slide"
                : undefined
            }
            reverse={
              hasVariant($state, "slids", "unnamedVariant3")
                ? false
                : hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? false
                : undefined
            }
            triggerOnce={true}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__ss9JK,
                hasVariant($state, "slids", "unnamedVariant3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "animate"
                  : hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                    hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "animate"
                  : undefined,
                {
                  [sty.freeBoxslids_unnamedVariant2__ss9JKnjomh]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant2"
                  ),
                  [sty.freeBoxslids_unnamedVariant3__ss9JKi1KiV]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.freeBoxslids_unnamedVariant__ss9JKMe9Ia]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant__ss9JKDv9B5]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant_slids_unnamedVariant__ss9JKDv9B5Me9Ia]:
                    hasVariant($state, "slids", "unnamedVariant") &&
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                }
              )}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__oDeZc, {
                  [sty.freeBoxslids_unnamedVariant3__oDeZci1KiV]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.freeBoxslids_unnamedVariant__oDeZcMe9Ia]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant__oDeZcDv9B5]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
              >
                <BabarkatlogoCopy2SvgIcon
                  className={classNames(projectcss.all, sty.svg___6T7, {
                    [sty.svgslids_unnamedVariant3___6T7I1KiV]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.svgslids_unnamedVariant___6T7Me9Ia]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant"
                    ),
                    [sty.svgunnamedVariant___6T7Dv9B5]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  role={"img"}
                />

                {(
                  hasVariant($state, "slids", "unnamedVariant") ? true : false
                ) ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__pZ2Jh, {
                      [sty.imgslids_unnamedVariant__pZ2JhMe9Ia]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "slids", "unnamedVariant") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : hasVariant($state, "slids", "unnamedVariant")
                        ? "100px"
                        : "auto"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant($state, "slids", "unnamedVariant") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "50px"
                        : hasVariant($state, "slids", "unnamedVariant")
                        ? "100px"
                        : "auto"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/babarkat/images/image10.svg",
                      fullWidth: 100,
                      fullHeight: 100,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mauVi, {
                  [sty.freeBoxslids_unnamedVariant3__mauViI1KiV]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.freeBoxslids_unnamedVariant__mauViMe9Ia]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant__mauViDv9B5]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r99Zr,
                    {
                      [sty.textslids_unnamedVariant3__r99ZrI1KiV]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.textunnamedVariant__r99ZrDv9B5]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "slids", "unnamedVariant3")
                    ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                    : "\u062a\u0627\u06cc\u06cc\u062f \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wdrTs,
                    {
                      [sty.textslids_unnamedVariant3__wdrTsI1KiV]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.textunnamedVariant__wdrTsDv9B5]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "slids", "unnamedVariant3") ? (
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (
                              "لطفا کد 4 رقمی ارسال شده به شماره <b style='color: #2DC57B;'>" +
                              $state.number +
                              "</b> را وارد نمایید."
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 09155113179 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  ) : hasVariant($state, "unnamedVariant", "unnamedVariant") ? (
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (
                              "لطفا کد 4 رقمی ارسال شده به شماره <b style='color: #2DC57B;'>" +
                              $state.number +
                              "</b> را وارد نمایید."
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 09155113179 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  ) : (
                    "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f. \u0633\u067e\u0633 \u06cc\u06a9 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f \u0628\u0631\u0627\u06cc \u0627\u062d\u0631\u0627\u0632 \u0647\u0648\u06cc\u062a \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc \u0634\u0648\u062f"
                  )}
                </div>
                <Input
                  data-plasmic-name={"fragmentInput"}
                  data-plasmic-override={overrides.fragmentInput}
                  className={classNames("__wab_instance", sty.fragmentInput, {
                    [sty.fragmentInputslids_unnamedVariant3]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.fragmentInputunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  disabled={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? false
                      : undefined
                  }
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "fragmentInput",
                      "value"
                    ]).apply(null, eventArgs);
                    (async value => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  }}
                  placeholder={"98+"}
                  type={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "tel"
                      : "tel"
                  }
                  value={generateStateValueProp($state, [
                    "fragmentInput",
                    "value"
                  ])}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hXlRb, {
                    [sty.freeBoxslids_unnamedVariant3__hXlRbI1KiV]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.freeBoxunnamedVariant__hXlRbDv9B5]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <Input
                    data-plasmic-name={"fragmentInput2"}
                    data-plasmic-override={overrides.fragmentInput2}
                    className={classNames(
                      "__wab_instance",
                      sty.fragmentInput2,
                      {
                        [sty.fragmentInput2slids_unnamedVariant3]: hasVariant(
                          $state,
                          "slids",
                          "unnamedVariant3"
                        ),
                        [sty.fragmentInput2unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                    disabled={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : undefined
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "fragmentInput2",
                        "value"
                      ]).apply(null, eventArgs);
                      (async value => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    placeholder={
                      hasVariant($state, "slids", "unnamedVariant3")
                        ? ``
                        : hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? ``
                        : "98+"
                    }
                    type={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "tel"
                        : "number"
                    }
                    value={generateStateValueProp($state, [
                      "fragmentInput2",
                      "value"
                    ])}
                  />
                </Stack__>
                {(
                  hasVariant($state, "slids", "unnamedVariant3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "slids", "unnamedVariant3")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? (() => {
                        try {
                          return $state.time != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7LuKp,
                      {
                        [sty.textslids_unnamedVariant3___7LuKpI1KiV]:
                          hasVariant($state, "slids", "unnamedVariant3"),
                        [sty.textunnamedVariant___7LuKpDv9B5]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "slids", "unnamedVariant3") &&
                    hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (() => {
                                setInterval(() => {
                                  if ($state.time <= 0) {
                                  } else {
                                    $state.time--;
                                  }
                                }, 10000);
                                return (
                                  "ارسال مجدد پیامک  (" +
                                  "<b style='color: #2DC57B;'>" +
                                  $state.time +
                                  "</b>" +
                                  ")"
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : hasVariant($state, "slids", "unnamedVariant3") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (() => {
                                setInterval(() => {
                                  if ($state.time <= 0) {
                                  } else {
                                    $state.time--;
                                  }
                                }, 10000);
                                return (
                                  "ارسال مجدد پیامک  (" +
                                  "<b style='color: #2DC57B;'>" +
                                  $state.time +
                                  "</b>" +
                                  ")"
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ) &&
                      hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (() => {
                                setInterval(() => {
                                  if ($state.time <= 0) {
                                  } else {
                                    $state.time--;
                                  }
                                }, 10000);
                                return (
                                  "ارسال مجدد پیامک  (" +
                                  "<b style='color: #2DC57B;'>" +
                                  $state.time +
                                  "</b>" +
                                  ")"
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      ) ? (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return (() => {
                                setInterval(() => {
                                  if ($state.time > 0) $state.time--;
                                }, 1000);
                                return (
                                  "ارسال مجدد پیامک  (" +
                                  "<b style='color: #2DC57B;'>" +
                                  $state.time +
                                  "</b>" +
                                  ")"
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    ) : (
                      "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)"
                    )}
                  </div>
                ) : null}
                {(
                  hasVariant($state, "slids", "unnamedVariant3") &&
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "slids", "unnamedVariant3")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? (() => {
                        try {
                          return $state.time == 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : false
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qrzqV,
                      {
                        [sty.textslids_unnamedVariant3__qrzqVi1KiV]: hasVariant(
                          $state,
                          "slids",
                          "unnamedVariant3"
                        ),
                        [sty.textunnamedVariant__qrzqVDv9B5]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "GET",
                                "https://n8n.babarkat.com/webhook/Babarkat/login",
                                (() => {
                                  try {
                                    return { mobile: $state.number };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateTime"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["time"]
                              },
                              operation: 0,
                              value: 60
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTime"] != null &&
                        typeof $steps["updateTime"] === "object" &&
                        typeof $steps["updateTime"].then === "function"
                      ) {
                        $steps["updateTime"] = await $steps["updateTime"];
                      }
                    }}
                  >
                    {hasVariant($state, "slids", "unnamedVariant3")
                      ? "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9"
                      : hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9"
                      : "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u067e\u06cc\u0627\u0645\u06a9 (38)"}
                  </div>
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mNcyC,
                    {
                      [sty.textslids_unnamedVariant3__mNcyCi1KiV]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.textunnamedVariant__mNcyCDv9B5]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.error;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <div
                className={classNames(projectcss.all, sty.freeBox__rr6S, {
                  [sty.freeBoxslids_unnamedVariant3__rr6SI1KiV]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.freeBoxslids_unnamedVariant__rr6SMe9Ia]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant"
                  ),
                  [sty.freeBoxunnamedVariant__rr6SDv9B5]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button, {
                    [sty.buttonslids_unnamedVariant3]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.buttonslids_unnamedVariant]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant"
                    ),
                    [sty.buttonunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  color={"green"}
                  endIcon={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ke3Bs)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return (
                        $state.fragmentInput.value.length != 11 ||
                        $state.loadedbtn
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["updateNumber"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["number"]
                            },
                            operation: 0,
                            value: $state.fragmentInput.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNumber"] != null &&
                      typeof $steps["updateNumber"] === "object" &&
                      typeof $steps["updateNumber"].then === "function"
                    ) {
                      $steps["updateNumber"] = await $steps["updateNumber"];
                    }

                    $steps["invokeGlobalAction"] = (() => {
                      const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                      return !phoneRegex.test($state.number);
                    })()
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0644\u0637\u0641\u0627\u064b \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u062e\u0648\u062f \u0631\u0627 \u0628\u0647\u200c\u0637\u0648\u0631 \u0635\u062d\u06cc\u062d \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateFragmentInputValue"] = (() => {
                      const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                      return !phoneRegex.test($state.number);
                    })()
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["fragmentInput", "value"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFragmentInputValue"] != null &&
                      typeof $steps["updateFragmentInputValue"] === "object" &&
                      typeof $steps["updateFragmentInputValue"].then ===
                        "function"
                    ) {
                      $steps["updateFragmentInputValue"] = await $steps[
                        "updateFragmentInputValue"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = (() => {
                      const phoneRegex = /^\+?\d{2}\s?\d{11}$|^\d{11}$/;
                      return phoneRegex.test($state.number);
                    })()
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "GET",
                              "https://n8n.babarkat.com/webhook/Babarkat/login",
                              (() => {
                                try {
                                  return { mobile: $state.number };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              undefined
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["invokeGlobalAction3"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === false
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0634\u0645\u0627\u0631\u0647\u200c\u06cc \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0645\u0639\u062a\u0628\u0631 \u0646\u06cc\u0633\u062a.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["updateUnnamedVariant"] = (
                      $steps.invokeGlobalAction2?.data
                        ? $steps.invokeGlobalAction2?.data[0]?.success === true
                        : false
                    )
                      ? (() => {
                          const actionArgs = {
                            vgroup: "unnamedVariant",
                            operation: 4
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, true);
                            return true;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUnnamedVariant"] != null &&
                      typeof $steps["updateUnnamedVariant"] === "object" &&
                      typeof $steps["updateUnnamedVariant"].then === "function"
                    ) {
                      $steps["updateUnnamedVariant"] = await $steps[
                        "updateUnnamedVariant"
                      ];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }
                  }}
                  showEndIcon={(() => {
                    try {
                      return $state.loadedbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1TNZm
                    )}
                  >
                    {
                      "\u0627\u0631\u0633\u0627\u0644 \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"
                    }
                  </div>
                </Button>
                {(
                  hasVariant($state, "slids", "unnamedVariant3")
                    ? true
                    : hasVariant($state, "unnamedVariant", "unnamedVariant")
                    ? true
                    : false
                ) ? (
                  <Button
                    data-plasmic-name={"sendcode"}
                    data-plasmic-override={overrides.sendcode}
                    className={classNames("__wab_instance", sty.sendcode, {
                      [sty.sendcodeslids_unnamedVariant3]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.sendcodeunnamedVariant]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    })}
                    color={"green"}
                    endIcon={
                      <PlasmicIcon__
                        PlasmicIconType={
                          hasVariant($state, "unnamedVariant", "unnamedVariant")
                            ? IconIcon
                            : Icon3Icon
                        }
                        className={classNames(projectcss.all, sty.svg__r6GXo, {
                          [sty.svgunnamedVariant__r6GXoDv9B5]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        })}
                        role={"img"}
                      />
                    }
                    isDisabled={
                      hasVariant($state, "slids", "unnamedVariant3") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return $state.fragmentInput2.value.length != 4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "slids", "unnamedVariant3")
                        ? (() => {
                            try {
                              return $state.fragmentInput2.value.length != 4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          ) &&
                          hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return $state.fragmentInput2.value.length != 4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : hasVariant($state, "unnamedVariant", "unnamedVariant")
                        ? (() => {
                            try {
                              return $state.fragmentInput2.value.length != 4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return $state.fragmentInput2.value.length != 11;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateCode"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["code"]
                              },
                              operation: 0,
                              value: parseInt($state.fragmentInput2.value)
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCode"] != null &&
                        typeof $steps["updateCode"] === "object" &&
                        typeof $steps["updateCode"].then === "function"
                      ) {
                        $steps["updateCode"] = await $steps["updateCode"];
                      }

                      $steps["invokeGlobalAction2"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.babarkat.com/webhook/Babarkat/login",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      mobile: $state.number,
                                      code: $state.code
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = (
                        $state.invokeGlobalAction2?.data
                          ? $steps.invokeGlobalAction2?.data[0]?.success ===
                            false
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u06a9\u062f \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u0645\u06cc \u0628\u0627\u0634\u062f.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode"] = (
                        $state.invokeGlobalAction2?.data
                          ? $steps.invokeGlobalAction2?.data[0]?.success ===
                            true
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return localStorage.setItem(
                                  "userbabarcat",
                                  JSON.stringify(
                                    $steps.invokeGlobalAction2.data[0].data
                                  )
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction3"] = (
                        $state.invokeGlobalAction2?.data
                          ? $steps.invokeGlobalAction2?.data[0]?.success ===
                            false
                          : true
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0645\u0634\u06a9\u0644\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["goToHomepage"] = (
                        $state.invokeGlobalAction2?.data
                          ? $steps.invokeGlobalAction2?.data[0]?.success ===
                            true
                          : false
                      )
                        ? (() => {
                            const actionArgs = { destination: `/` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHomepage"] != null &&
                        typeof $steps["goToHomepage"] === "object" &&
                        typeof $steps["goToHomepage"].then === "function"
                      ) {
                        $steps["goToHomepage"] = await $steps["goToHomepage"];
                      }

                      $steps["updateLoadedbtn2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn2"] != null &&
                        typeof $steps["updateLoadedbtn2"] === "object" &&
                        typeof $steps["updateLoadedbtn2"].then === "function"
                      ) {
                        $steps["updateLoadedbtn2"] = await $steps[
                          "updateLoadedbtn2"
                        ];
                      }
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadedbtn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sE8Bl,
                        {
                          [sty.textunnamedVariant__sE8BlDv9B5]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {"\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                  </Button>
                ) : null}
              </div>
              {(
                hasVariant($state, "slids", "unnamedVariant3")
                  ? true
                  : hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? true
                  : false
              ) ? (
                <div
                  data-plasmic-name={"figmaPaste"}
                  data-plasmic-override={overrides.figmaPaste}
                  className={classNames(projectcss.all, sty.figmaPaste, {
                    [sty.figmaPasteslids_unnamedVariant3]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.figmaPasteunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  <div
                    data-plasmic-name={"group"}
                    data-plasmic-override={overrides.group}
                    className={classNames(projectcss.all, sty.group)}
                  >
                    <div
                      data-plasmic-name={"group2"}
                      data-plasmic-override={overrides.group2}
                      className={classNames(projectcss.all, sty.group2)}
                    >
                      <div
                        data-plasmic-name={"rectangle35"}
                        data-plasmic-override={overrides.rectangle35}
                        className={classNames(projectcss.all, sty.rectangle35)}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ts1J3
                        )}
                      >
                        {"\u0627\u062f\u0627\u0645\u0647"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"group3"}
                      data-plasmic-override={overrides.group3}
                      className={classNames(projectcss.all, sty.group3, {
                        [sty.group3slids_unnamedVariant3]: hasVariant(
                          $state,
                          "slids",
                          "unnamedVariant3"
                        ),
                        [sty.group3unnamedVariant]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      })}
                    >
                      <div
                        data-plasmic-name={"group4"}
                        data-plasmic-override={overrides.group4}
                        className={classNames(projectcss.all, sty.group4)}
                      >
                        <div
                          data-plasmic-name={"rectangle23"}
                          data-plasmic-override={overrides.rectangle23}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle23
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qUrvt
                          )}
                        >
                          {"1"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group5"}
                        data-plasmic-override={overrides.group5}
                        className={classNames(projectcss.all, sty.group5)}
                      >
                        <div
                          data-plasmic-name={"rectangle24"}
                          data-plasmic-override={overrides.rectangle24}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle24
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uiopE
                          )}
                        >
                          {"2"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group6"}
                        data-plasmic-override={overrides.group6}
                        className={classNames(projectcss.all, sty.group6)}
                      >
                        <div
                          data-plasmic-name={"rectangle25"}
                          data-plasmic-override={overrides.rectangle25}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle25
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1BLr3
                          )}
                        >
                          {"3"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"group7"}
                        data-plasmic-override={overrides.group7}
                        className={classNames(projectcss.all, sty.group7)}
                      >
                        <div
                          data-plasmic-name={"rectangle"}
                          data-plasmic-override={overrides.rectangle}
                          className={classNames(projectcss.all, sty.rectangle, {
                            [sty.rectangleslids_unnamedVariant3]: hasVariant(
                              $state,
                              "slids",
                              "unnamedVariant3"
                            ),
                            [sty.rectangleunnamedVariant]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          })}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3Wq9D
                          )}
                        >
                          {"4"}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oDmNk,
                        {
                          [sty.textslids_unnamedVariant3__oDmNki1KiV]:
                            hasVariant($state, "slids", "unnamedVariant3"),
                          [sty.textunnamedVariant__oDmNkDv9B5]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "\u0644\u0637\u0641\u0627 \u06a9\u062f 4 \u0631\u0642\u0645\u06cc \u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 \u0632\u06cc\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7SctQ,
                        {
                          [sty.textslids_unnamedVariant3___7SctQi1KiV]:
                            hasVariant($state, "slids", "unnamedVariant3"),
                          [sty.textunnamedVariant___7SctQDv9B5]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "\u06a9\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"group8"}
                    data-plasmic-override={overrides.group8}
                    className={classNames(projectcss.all, sty.group8)}
                  />
                </div>
              ) : null}
              <div
                data-plasmic-name={"group9"}
                data-plasmic-override={overrides.group9}
                className={classNames(projectcss.all, sty.group9, {
                  [sty.group9slids_unnamedVariant2]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant2"
                  ),
                  [sty.group9slids_unnamedVariant3]: hasVariant(
                    $state,
                    "slids",
                    "unnamedVariant3"
                  ),
                  [sty.group9unnamedVariant]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                })}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateUnnamedVariant"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "unnamedVariant",
                          operation: 6
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateUnnamedVariant"] != null &&
                    typeof $steps["updateUnnamedVariant"] === "object" &&
                    typeof $steps["updateUnnamedVariant"].then === "function"
                  ) {
                    $steps["updateUnnamedVariant"] = await $steps[
                      "updateUnnamedVariant"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wYgld,
                    {
                      [sty.textslids_unnamedVariant3__wYgldI1KiV]: hasVariant(
                        $state,
                        "slids",
                        "unnamedVariant3"
                      ),
                      [sty.textunnamedVariant__wYgldDv9B5]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }
                  )}
                >
                  {
                    "\u0627\u0635\u0644\u0627\u062d \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                  }
                </div>
                <LeftArrowBackSvgrepoComSvgIcon
                  className={classNames(projectcss.all, sty.svg___40A0, {
                    [sty.svgslids_unnamedVariant3___40A0I1KiV]: hasVariant(
                      $state,
                      "slids",
                      "unnamedVariant3"
                    ),
                    [sty.svgunnamedVariant___40A0Dv9B5]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                  role={"img"}
                />
              </div>
            </div>
          </Reveal>
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.apiRequest.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nlgu0, {
              [sty.freeBoxunnamedVariant__nlgu0Dv9B5]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
          >
            <BabarkatlogoCopy2SvgIcon
              className={classNames(projectcss.all, sty.svg__dbC0R, {
                [sty.svgslids_unnamedVariant3__dbC0RI1KiV]: hasVariant(
                  $state,
                  "slids",
                  "unnamedVariant3"
                ),
                [sty.svgslids_unnamedVariant__dbC0RMe9Ia]: hasVariant(
                  $state,
                  "slids",
                  "unnamedVariant"
                ),
                [sty.svgunnamedVariant__dbC0RDv9B5]: hasVariant(
                  $state,
                  "unnamedVariant",
                  "unnamedVariant"
                )
              })}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__dO1PX)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___6WuZh)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "80px"
                    : "150px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/babarkat/images/image10.svg",
                  fullWidth: 100,
                  fullHeight: 100,
                  aspectRatio: 1
                }}
              />
            </div>
          </Stack__>
        ) : null}
        {(hasVariant($state, "slids", "unnamedVariant") ? true : false) ? (
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__hdnt5, {
              [sty.imgslids_unnamedVariant2__hdnt5Njomh]: hasVariant(
                $state,
                "slids",
                "unnamedVariant2"
              ),
              [sty.imgslids_unnamedVariant3__hdnt5I1KiV]: hasVariant(
                $state,
                "slids",
                "unnamedVariant3"
              ),
              [sty.imgslids_unnamedVariant__hdnt5Me9Ia]: hasVariant(
                $state,
                "slids",
                "unnamedVariant"
              )
            })}
            displayHeight={
              hasVariant($state, "slids", "unnamedVariant") ? "100%" : "auto"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant($state, "slids", "unnamedVariant") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100%"
                : hasVariant($state, "slids", "unnamedVariant")
                ? "auto"
                : "auto"
            }
            loading={"lazy"}
            src={{
              src: "/plasmic/babarkat/images/image8.png",
              fullWidth: 390,
              fullHeight: 533,
              aspectRatio: undefined
            }}
          />
        ) : null}
        <ApiRequest
          data-plasmic-name={"apiRequest"}
          data-plasmic-override={overrides.apiRequest}
          className={classNames("__wab_instance", sty.apiRequest, {
            [sty.apiRequestunnamedVariant]: hasVariant(
              $state,
              "unnamedVariant",
              "unnamedVariant"
            )
          })}
          errorDisplay={null}
          loadingDisplay={null}
          method={"GET"}
          onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
              null,
              eventArgs
            );
            (async loading => {
              const $steps = {};

              $steps["goToHomepage"] =
                localStorage.getItem("userbabarcat") != null
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["goToHomepage"] != null &&
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await $steps["goToHomepage"];
              }
            }).apply(null, eventArgs);
          }}
          onSuccess={generateStateOnChangeProp($state, ["apiRequest", "data"])}
          url={"/"}
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "reveal",
    "fragmentInput",
    "fragmentInput2",
    "button",
    "sendcode",
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8",
    "group9",
    "apiRequest"
  ],
  reveal: [
    "reveal",
    "fragmentInput",
    "fragmentInput2",
    "button",
    "sendcode",
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8",
    "group9"
  ],
  fragmentInput: ["fragmentInput"],
  fragmentInput2: ["fragmentInput2"],
  button: ["button"],
  sendcode: ["sendcode"],
  figmaPaste: [
    "figmaPaste",
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle",
    "group8"
  ],
  group: [
    "group",
    "group2",
    "rectangle35",
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle"
  ],
  group2: ["group2", "rectangle35"],
  rectangle35: ["rectangle35"],
  group3: [
    "group3",
    "group4",
    "rectangle23",
    "group5",
    "rectangle24",
    "group6",
    "rectangle25",
    "group7",
    "rectangle"
  ],
  group4: ["group4", "rectangle23"],
  rectangle23: ["rectangle23"],
  group5: ["group5", "rectangle24"],
  rectangle24: ["rectangle24"],
  group6: ["group6", "rectangle25"],
  rectangle25: ["rectangle25"],
  group7: ["group7", "rectangle"],
  rectangle: ["rectangle"],
  group8: ["group8"],
  group9: ["group9"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  reveal: typeof Reveal;
  fragmentInput: typeof Input;
  fragmentInput2: typeof Input;
  button: typeof Button;
  sendcode: typeof Button;
  figmaPaste: "div";
  group: "div";
  group2: "div";
  rectangle35: "div";
  group3: "div";
  group4: "div";
  rectangle23: "div";
  group5: "div";
  rectangle24: "div";
  group6: "div";
  rectangle25: "div";
  group7: "div";
  rectangle: "div";
  group8: "div";
  group9: "div";
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogIn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogIn__VariantsArgs;
    args?: PlasmicLogIn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogIn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLogIn__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogIn__ArgProps,
          internalVariantPropNames: PlasmicLogIn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogIn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogIn";
  } else {
    func.displayName = `PlasmicLogIn.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sZQMbqXz9utLNaTnNb3uss"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicLogIn = Object.assign(
  // Top-level PlasmicLogIn renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    fragmentInput: makeNodeComponent("fragmentInput"),
    fragmentInput2: makeNodeComponent("fragmentInput2"),
    button: makeNodeComponent("button"),
    sendcode: makeNodeComponent("sendcode"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    group: makeNodeComponent("group"),
    group2: makeNodeComponent("group2"),
    rectangle35: makeNodeComponent("rectangle35"),
    group3: makeNodeComponent("group3"),
    group4: makeNodeComponent("group4"),
    rectangle23: makeNodeComponent("rectangle23"),
    group5: makeNodeComponent("group5"),
    rectangle24: makeNodeComponent("rectangle24"),
    group6: makeNodeComponent("group6"),
    rectangle25: makeNodeComponent("rectangle25"),
    group7: makeNodeComponent("group7"),
    rectangle: makeNodeComponent("rectangle"),
    group8: makeNodeComponent("group8"),
    group9: makeNodeComponent("group9"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicLogIn
    internalVariantProps: PlasmicLogIn__VariantProps,
    internalArgProps: PlasmicLogIn__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogIn;
/* prettier-ignore-end */
