/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: o18FzkeW7v5y

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Timer } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicExchange.module.css"; // plasmic-import: o18FzkeW7v5y/css

createPlasmicElementProxy;

export type PlasmicExchange__VariantMembers = {};
export type PlasmicExchange__VariantsArgs = {};
type VariantPropType = keyof PlasmicExchange__VariantsArgs;
export const PlasmicExchange__VariantProps = new Array<VariantPropType>();

export type PlasmicExchange__ArgsType = {
  onTotalTomanChange?: (val: string) => void;
  onTotalAfghaniChange?: (val: string) => void;
  amont?: number;
  onAmontChange?: (val: string) => void;
  onAfghaniWithoutCommissionChange?: (val: string) => void;
  onTomanWithoutCommissionChange?: (val: string) => void;
  type?: string;
  onTypeChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicExchange__ArgsType;
export const PlasmicExchange__ArgProps = new Array<ArgPropType>(
  "onTotalTomanChange",
  "onTotalAfghaniChange",
  "amont",
  "onAmontChange",
  "onAfghaniWithoutCommissionChange",
  "onTomanWithoutCommissionChange",
  "type",
  "onTypeChange"
);

export type PlasmicExchange__OverridesType = {
  root?: Flex__<"div">;
  timer?: Flex__<typeof Timer>;
};

export interface DefaultExchangeProps {
  onTotalTomanChange?: (val: string) => void;
  onTotalAfghaniChange?: (val: string) => void;
  amont?: number;
  onAmontChange?: (val: string) => void;
  onAfghaniWithoutCommissionChange?: (val: string) => void;
  onTomanWithoutCommissionChange?: (val: string) => void;
  type?: string;
  onTypeChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicExchange__RenderFunc(props: {
  variants: PlasmicExchange__VariantsArgs;
  args: PlasmicExchange__ArgsType;
  overrides: PlasmicExchange__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "exchange",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("exchange"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "commission",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("comson"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "totalToman",
        type: "readonly",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        onChangeProp: "onTotalTomanChange"
      },
      {
        path: "totalAfghani",
        type: "readonly",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        onChangeProp: "onTotalAfghaniChange"
      },
      {
        path: "amont",
        type: "writable",
        variableType: "number",

        valueProp: "amont",
        onChangeProp: "onAmontChange"
      },
      {
        path: "afghaniWithoutCommission",
        type: "readonly",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        onChangeProp: "onAfghaniWithoutCommissionChange"
      },
      {
        path: "tomanWithoutCommission",
        type: "readonly",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        onChangeProp: "onTomanWithoutCommissionChange"
      },
      {
        path: "type",
        type: "writable",
        variableType: "text",

        valueProp: "type",
        onChangeProp: "onTypeChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      id={"exchange"}
      onClick={async event => {
        const $steps = {};

        $steps["runCode"] = true
          ? (() => {
              const actionArgs = {
                customFunction: async () => {
                  return (() => {
                    var type = $state.type;
                    var amount = $state.amont;
                    var rate = $state.exchange.rate;
                    var commissionBabrkat = $state.commission.babrkat;
                    var commissionSaraf = $state.commission.saraf;
                    var totalCommissionPercent =
                      commissionBabrkat + commissionSaraf;
                    if (type === "toman") {
                      $state.totalToman =
                        amount + (amount * totalCommissionPercent) / 100;
                      $state.totalAfghani = Math.round(
                        $state.totalToman / rate
                      );
                      $state.tomanWithoutCommission = amount;
                      return ($state.afghaniWithoutCommission = Math.round(
                        amount / rate
                      ));
                    } else if (type === "afghani") {
                      var toman = amount * rate;
                      $state.totalToman = Math.round(
                        toman + (toman * totalCommissionPercent) / 100
                      );
                      $state.totalAfghani = amount;
                      $state.tomanWithoutCommission = Math.round(toman);
                      return ($state.afghaniWithoutCommission = amount);
                    }
                  })();
                }
              };
              return (({ customFunction }) => {
                return customFunction();
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runCode"] != null &&
          typeof $steps["runCode"] === "object" &&
          typeof $steps["runCode"].then === "function"
        ) {
          $steps["runCode"] = await $steps["runCode"];
        }
      }}
    >
      <Timer
        data-plasmic-name={"timer"}
        data-plasmic-override={overrides.timer}
        className={classNames("__wab_instance", sty.timer)}
        intervalSeconds={0.5}
        isRunning={(() => {
          try {
            return $state.amont != 0;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        onTick={async () => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      var type = $state.type;
                      var amount = $state.amont;
                      var rate = $state.exchange.rate;
                      var commissionBabrkat = $state.commission.babrkat;
                      var commissionSaraf = $state.commission.saraf;
                      var totalCommissionPercent =
                        commissionBabrkat + commissionSaraf;
                      if (type === "toman") {
                        $state.totalToman =
                          amount + (amount * totalCommissionPercent) / 100;
                        $state.totalAfghani = Math.round(
                          $state.totalToman / rate
                        );
                        $state.tomanWithoutCommission = amount;
                        return ($state.afghaniWithoutCommission = Math.round(
                          amount / rate
                        ));
                      } else if (type === "afghani") {
                        var toman = amount * rate;
                        $state.totalToman = Math.round(
                          toman + (toman * totalCommissionPercent) / 100
                        );
                        $state.totalAfghani =
                          amount + (amount * totalCommissionPercent) / 100;
                        $state.tomanWithoutCommission = Math.round(toman);
                        return ($state.afghaniWithoutCommission = amount);
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
        runWhileEditing={true}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "timer"],
  timer: ["timer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  timer: typeof Timer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExchange__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExchange__VariantsArgs;
    args?: PlasmicExchange__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExchange__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExchange__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicExchange__ArgProps,
          internalVariantPropNames: PlasmicExchange__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicExchange__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExchange";
  } else {
    func.displayName = `PlasmicExchange.${nodeName}`;
  }
  return func;
}

export const PlasmicExchange = Object.assign(
  // Top-level PlasmicExchange renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    timer: makeNodeComponent("timer"),

    // Metadata about props expected for PlasmicExchange
    internalVariantProps: PlasmicExchange__VariantProps,
    internalArgProps: PlasmicExchange__ArgProps
  }
);

export default PlasmicExchange;
/* prettier-ignore-end */
