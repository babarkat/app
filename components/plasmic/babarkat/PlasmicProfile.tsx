/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: aIeSdkpDfzhV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { TextArea } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as TextArea_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";

import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicProfile.module.css"; // plasmic-import: aIeSdkpDfzhV/css

import GroupSvgIcon from "./icons/PlasmicIcon__GroupSvg"; // plasmic-import: 51hz8qmjnijI/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dXgXrJG5lp3Z/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: ABwvUbBMtZqM/icon
import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: T5qnRYhm3_iD/icon
import Icon122Icon from "./icons/PlasmicIcon__Icon122"; // plasmic-import: FlYgkUghZC6o/icon

createPlasmicElementProxy;

export type PlasmicProfile__VariantMembers = {};
export type PlasmicProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfile__VariantsArgs;
export const PlasmicProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicProfile__ArgsType = {};
type ArgPropType = keyof PlasmicProfile__ArgsType;
export const PlasmicProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicProfile__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  header?: Flex__<"div">;
  add?: Flex__<typeof AntdModal>;
  valueAdd?: Flex__<typeof Input>;
  select?: Flex__<typeof AntdSelect>;
  info?: Flex__<typeof TextArea>;
  button3?: Flex__<typeof Button>;
  remove?: Flex__<typeof AntdModal>;
  valueAdd2?: Flex__<typeof Input>;
  select2?: Flex__<typeof AntdSelect>;
  info2?: Flex__<typeof TextArea>;
  button4?: Flex__<typeof Button>;
};

export interface DefaultProfileProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfile__RenderFunc(props: {
  variants: PlasmicProfile__VariantsArgs;
  args: PlasmicProfile__ArgsType;
  overrides: PlasmicProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button2.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "add.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "valueAdd.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "info.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", TextArea_Helpers)
      },
      {
        path: "button3.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(sessionStorage.getItem("userbabarcatToken"))
                .value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "customerInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(window.sessionStorage.getItem("customerinfo"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  id: 834,
                  name: "\u0627\u0644\u0647\u0647",
                  last_name:
                    "\u0627\u0645\u06cc\u0631 \u0639\u0628\u0627\u0633\u06cc",
                  mobile: "09228951264",
                  customerNum:
                    "\u0627\u0644\u0647\u0647.\u062d\u0633\u06cc\u0646.465",
                  afghani: 0,
                  dollar: -4417,
                  toman: 53164.10061999999,
                  _saraf: 1005,
                  lira: 0
                };
              }
              throw e;
            }
          })()
      },
      {
        path: "remove.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "valueAdd2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "info2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", TextArea_Helpers)
      },
      {
        path: "button4.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "carts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: "toman",
            name: "\u062a\u0648\u0645\u0627\u0646",
            color: "#2DC57B",
            width: "100%",
            zIndex: 4,
            transform: "translateY(0px) "
          },
          {
            id: "lira",
            name: "\u0644\u06cc\u0631",
            color: "#a31ec8",
            width: "95%",
            zIndex: 3,
            transform: "translateY(-15px) "
          },
          {
            id: "afghani",
            name: "\u0627\u0641\u063a\u0627\u0646\u06cc",
            color: "#C9A92B",
            width: "95%",
            zIndex: 3,
            transform: "translateY(-15px) "
          },
          {
            id: "dollar",
            name: "\u062f\u0644\u0627\u0631",
            color: "#3574BF",
            width: "90%",
            zIndex: 2,
            transform: "translateY(-15px) "
          }
        ]
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "toman"
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "toman"
      },
      {
        path: "textNumber",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textNum2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsosEvNkdp6Zt6()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__syWy2)}>
            <div className={classNames(projectcss.all, sty.freeBox__pfbLk)}>
              <GroupSvgIcon
                className={classNames(projectcss.all, sty.svg__mlhA)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__z0Sv1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        $state.customerInfo.name +
                        " " +
                        $state.customerInfo.last_name
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0628\u0647\u0646\u0627\u0645 \u0645\u062d\u0645\u062f \u062d\u0633\u06cc\u0646 \u0632\u0627\u062f\u0647";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__g5Ms)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qAoP
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.customerInfo.customerNum;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0622\u062f\u0631\u0633: \u0633\u0627\u0632\u062a\u0646\u0627\u0646\u0633\u0627\u0632\u0627\u0632";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z84Nz
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.customerInfo.mobile;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0622\u062f\u0631\u0633: \u0633\u0627\u0632\u062a\u0646\u0627\u0646\u0633\u0627\u0632\u0627\u0632";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__x5Xwj)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.carts;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___62KC)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eaZg
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return `موجودی (${currentItem.name})`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u0648\u062c\u0648\u062f\u06cc: ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pbXTe,
                          "dateshow"
                        )}
                        style={(() => {
                          try {
                            return { color: currentItem.color };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.customerInfo[currentItem.id] *
                                (currentItem.id == "toman" ? 1000 : 1)
                              ).toLocaleString();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "50 \u062a\u0648\u0645\u0627\u0646";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  );
                })}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__rWdpk)}>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"green"}
                  loadingviow={generateStateValueProp($state, [
                    "button",
                    "loadingviow"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateAddOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["add", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateAddOpen"] != null &&
                      typeof $steps["updateAddOpen"] === "object" &&
                      typeof $steps["updateAddOpen"].then === "function"
                    ) {
                      $steps["updateAddOpen"] = await $steps["updateAddOpen"];
                    }
                  }}
                  onLoadingviowChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button",
                        "loadingviow"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  {
                    "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc"
                  }
                </Button>
                <Button
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={"red"}
                  loadingviow={generateStateValueProp($state, [
                    "button2",
                    "loadingviow"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateRemoveOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["remove", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateRemoveOpen"] != null &&
                      typeof $steps["updateRemoveOpen"] === "object" &&
                      typeof $steps["updateRemoveOpen"].then === "function"
                    ) {
                      $steps["updateRemoveOpen"] = await $steps[
                        "updateRemoveOpen"
                      ];
                    }
                  }}
                  onLoadingviowChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button2",
                        "loadingviow"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  {
                    "\u06a9\u0633\u0631 \u0627\u0632 \u0645\u0648\u062c\u0648\u062f\u06cc"
                  }
                </Button>
              </div>
            </div>
          </div>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? Icon10Icon
                    : Icon3Icon
                }
                className={classNames(projectcss.all, sty.svg__mFryk)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToCustomer"] = true
                    ? (() => {
                        const actionArgs = { destination: `/customer` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToCustomer"] != null &&
                    typeof $steps["goToCustomer"] === "object" &&
                    typeof $steps["goToCustomer"].then === "function"
                  ) {
                    $steps["goToCustomer"] = await $steps["goToCustomer"];
                  }
                }}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uLr5Z
                )}
              >
                {"\u067e\u0631\u0648\u0641\u0627\u06cc\u0644"}
              </div>
              <PlasmicIcon__
                PlasmicIconType={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? Icon9Icon
                    : Icon9Icon
                }
                className={classNames(projectcss.all, sty.svg___9Bc7N)}
                role={"img"}
              />
            </div>
          </section>
          <AntdModal
            data-plasmic-name={"add"}
            data-plasmic-override={overrides.add}
            className={classNames("__wab_instance", sty.add)}
            closeButtonClassName={classNames({
              [sty["pcls_rI1QmY4D1O3i"]]: true
            })}
            closeIcon={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gPq1R
                )}
              >
                {"\n"}
              </div>
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_ztcUZYcFhlYR"]]: true
            })}
            modalScopeClassName={sty["add__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["add", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["add", "open"])}
            title={null}
            trigger={null}
            width={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100%"
                : "700"
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__xsLqF)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zojeo
                )}
              >
                {
                  "\u0627\u0641\u0632\u0648\u062f\u0646 \u0645\u0648\u062c\u0648\u062f\u06cc"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___6SbvW)}>
                <Input
                  data-plasmic-name={"valueAdd"}
                  data-plasmic-override={overrides.valueAdd}
                  className={classNames("__wab_instance", sty.valueAdd)}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "valueAdd",
                      "value"
                    ]).apply(null, eventArgs);

                    (async value => {
                      const $steps = {};

                      $steps["updateTextNumber"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["textNumber"]
                              },
                              operation: 0,
                              value: (() => {
                                function numberToPersianText(number) {
                                  const yekan = [
                                    "",
                                    "یک",
                                    "دو",
                                    "سه",
                                    "چهار",
                                    "پنج",
                                    "شش",
                                    "هفت",
                                    "هشت",
                                    "نه"
                                  ];

                                  const dahgan = [
                                    "",
                                    "ده",
                                    "بیست",
                                    "سی",
                                    "چهل",
                                    "پنجاه",
                                    "شصت",
                                    "هفتاد",
                                    "هشتاد",
                                    "نود"
                                  ];

                                  const sadgan = [
                                    "",
                                    "صد",
                                    "دویست",
                                    "سیصد",
                                    "چهارصد",
                                    "پانصد",
                                    "ششصد",
                                    "هفتصد",
                                    "هشتصد",
                                    "نهصد"
                                  ];

                                  const dahYek = [
                                    "ده",
                                    "یازده",
                                    "دوازده",
                                    "سیزده",
                                    "چهارده",
                                    "پانزده",
                                    "شانزده",
                                    "هفده",
                                    "هجده",
                                    "نوزده"
                                  ];

                                  const hazarha = [
                                    "",
                                    "هزار",
                                    "میلیون",
                                    "میلیارد",
                                    "بیلیون"
                                  ];

                                  function threeDigitToText(num) {
                                    num = parseInt(num, 10);
                                    if (num === 0) return "";
                                    let result = "";
                                    if (Math.floor(num / 100) > 0) {
                                      result += sadgan[Math.floor(num / 100)];
                                    }
                                    num %= 100;
                                    if (num >= 10 && num <= 19) {
                                      result +=
                                        (result ? " و " : "") +
                                        dahYek[num - 10];
                                    } else {
                                      if (Math.floor(num / 10) > 0) {
                                        result +=
                                          (result ? " و " : "") +
                                          dahgan[Math.floor(num / 10)];
                                      }
                                      if (num % 10 > 0) {
                                        result +=
                                          (result ? " و " : "") +
                                          yekan[num % 10];
                                      }
                                    }
                                    return result;
                                  }
                                  if (number === 0) return "صفر";
                                  let numStr = number.toString();
                                  let chunks = [];
                                  while (numStr.length > 0) {
                                    chunks.push(numStr.slice(-3));
                                    numStr = numStr.slice(0, -3);
                                  }
                                  let parts = [];
                                  for (let i = 0; i < chunks.length; i++) {
                                    let chunk = parseInt(chunks[i], 10);
                                    if (chunk !== 0) {
                                      let text = threeDigitToText(chunk);
                                      if (hazarha[i]) {
                                        text += " " + hazarha[i];
                                      }
                                      parts.unshift(text);
                                    }
                                  }
                                  return parts.join(" و ");
                                }
                                return numberToPersianText(
                                  $state.valueAdd.value
                                );
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextNumber"] != null &&
                        typeof $steps["updateTextNumber"] === "object" &&
                        typeof $steps["updateTextNumber"].then === "function"
                      ) {
                        $steps["updateTextNumber"] = await $steps[
                          "updateTextNumber"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={"\u0645\u0628\u0644\u063a"}
                  type={"number"}
                  value={generateStateValueProp($state, ["valueAdd", "value"])}
                />

                <AntdSelect
                  data-plasmic-name={"select"}
                  data-plasmic-override={overrides.select}
                  className={classNames("__wab_instance", sty.select)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  defaultValue={"toman"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return $state.carts.map(item => ({
                        label: item.name,
                        value: item.id
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={null}
                  popupScopeClassName={sty["select__popup"]}
                  suffixIcon={
                    <Icon37Icon
                      className={classNames(projectcss.all, sty.svg__tYaf9)}
                      role={"img"}
                    />
                  }
                  value={generateStateValueProp($state, ["select", "value"])}
                />

                <Icon122Icon
                  className={classNames(projectcss.all, sty.svg__inJy)}
                  role={"img"}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ne4H1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        $state.textNumber +
                        "   " +
                        $state.carts.find(
                          item => item.id == $state.select.value
                        ).name
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.info),
                  maxLength: 250,
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["info", "value"],
                      TextArea_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder: "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a",
                  value: generateStateValueProp($state, ["info", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "info.value"
                    }
                  ],
                  [],
                  TextArea_Helpers ?? {},
                  child$Props
                );

                return (
                  <TextArea
                    data-plasmic-name={"info"}
                    data-plasmic-override={overrides.info}
                    {...child$Props}
                  />
                );
              })()}
              <Button
                data-plasmic-name={"button3"}
                data-plasmic-override={overrides.button3}
                className={classNames("__wab_instance", sty.button3)}
                color={"green"}
                isDisabled={(() => {
                  try {
                    return $state.button3.loadingviow;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                loadingviow={generateStateValueProp($state, [
                  "button3",
                  "loadingviow"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateButton3Loadingviow"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["button3", "loadingviow"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateButton3Loadingviow"] != null &&
                    typeof $steps["updateButton3Loadingviow"] === "object" &&
                    typeof $steps["updateButton3Loadingviow"].then ===
                      "function"
                  ) {
                    $steps["updateButton3Loadingviow"] = await $steps[
                      "updateButton3Loadingviow"
                    ];
                  }

                  $steps["invokeGlobalAction"] =
                    $state.valueAdd.value != "" &&
                    parseInt($state.valueAdd.value) > 0 &&
                    $state.valueAdd.value != undefined
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/saraf/getCustomer/",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    userToken: $state.token,
                                    _customer: $state.customerInfo.id,
                                    value:
                                      $state.select.value == "toman"
                                        ? parseInt($state.valueAdd.value) / 1000
                                        : parseInt($state.valueAdd.value),
                                    priceType: $state.select.value,
                                    type: "transmission",
                                    text: $state.info.value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] =
                    $state.valueAdd.value == "" ||
                    $state.valueAdd.value == undefined ||
                    parseInt($state.valueAdd.value) <= 0
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0644\u0637\u0641\u0627\u064b \u0645\u0628\u0644\u063a \u0635\u062d\u06cc\u062d \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f.",
                              undefined,
                              undefined,
                              "topRight"
                            ]
                          };
                          return $globalActions[
                            "plasmic-antd5-config-provider.showNotification"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["invokeGlobalAction3"] = $steps.invokeGlobalAction
                    ?.data?.success
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "success",
                            "\u0639\u0645\u0644\u06cc\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f.",
                            undefined,
                            undefined,
                            "topRight"
                          ]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction3"] != null &&
                    typeof $steps["invokeGlobalAction3"] === "object" &&
                    typeof $steps["invokeGlobalAction3"].then === "function"
                  ) {
                    $steps["invokeGlobalAction3"] = await $steps[
                      "invokeGlobalAction3"
                    ];
                  }

                  $steps["info"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://n8n.babarkat.com/webhook/saraf/getCustomerById",
                            undefined,
                            (() => {
                              try {
                                return {
                                  userToken: $state.token,
                                  id: $state.customerInfo.id
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["info"] != null &&
                    typeof $steps["info"] === "object" &&
                    typeof $steps["info"].then === "function"
                  ) {
                    $steps["info"] = await $steps["info"];
                  }

                  $steps["updateCustomerInfo"] = (
                    $steps.info?.data?.success ? true : false
                  )
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["customerInfo"]
                          },
                          operation: 0,
                          value: $steps.info.data.list
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCustomerInfo"] != null &&
                    typeof $steps["updateCustomerInfo"] === "object" &&
                    typeof $steps["updateCustomerInfo"].then === "function"
                  ) {
                    $steps["updateCustomerInfo"] = await $steps[
                      "updateCustomerInfo"
                    ];
                  }

                  $steps["updateAddOpen"] = $steps.invokeGlobalAction?.data
                    ?.success
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["add", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateAddOpen"] != null &&
                    typeof $steps["updateAddOpen"] === "object" &&
                    typeof $steps["updateAddOpen"].then === "function"
                  ) {
                    $steps["updateAddOpen"] = await $steps["updateAddOpen"];
                  }

                  $steps["updateButtonLoadingviow2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["button3", "loadingviow"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateButtonLoadingviow2"] != null &&
                    typeof $steps["updateButtonLoadingviow2"] === "object" &&
                    typeof $steps["updateButtonLoadingviow2"].then ===
                      "function"
                  ) {
                    $steps["updateButtonLoadingviow2"] = await $steps[
                      "updateButtonLoadingviow2"
                    ];
                  }
                }}
                onLoadingviowChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "button3",
                      "loadingviow"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Lmac
                  )}
                >
                  {
                    "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc"
                  }
                </div>
              </Button>
            </div>
          </AntdModal>
          <AntdModal
            data-plasmic-name={"remove"}
            data-plasmic-override={overrides.remove}
            className={classNames("__wab_instance", sty.remove)}
            closeButtonClassName={classNames({
              [sty["pcls_fsouucJG0umg"]]: true
            })}
            closeIcon={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__whIRq
                )}
              >
                {"\n"}
              </div>
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_babaPlWhpYlU"]]: true
            })}
            modalScopeClassName={sty["remove__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["remove", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["remove", "open"])}
            title={null}
            trigger={null}
            width={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100%"
                : "700"
            }
            wrapClassName={classNames({ [sty["pcls_nSD-Uq41os4g"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox___8MPoO)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sc5Dr
                )}
              >
                {
                  "\u06a9\u0633\u0631 \u0627\u0632 \u0645\u0648\u062c\u0648\u062f\u06cc"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__x4UZs)}>
                <Input
                  data-plasmic-name={"valueAdd2"}
                  data-plasmic-override={overrides.valueAdd2}
                  className={classNames("__wab_instance", sty.valueAdd2)}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "valueAdd2",
                      "value"
                    ]).apply(null, eventArgs);

                    (async value => {
                      const $steps = {};

                      $steps["updateTextNum2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["textNum2"]
                              },
                              operation: 0,
                              value: (() => {
                                function numberToPersianText(number) {
                                  const yekan = [
                                    "",
                                    "یک",
                                    "دو",
                                    "سه",
                                    "چهار",
                                    "پنج",
                                    "شش",
                                    "هفت",
                                    "هشت",
                                    "نه"
                                  ];

                                  const dahgan = [
                                    "",
                                    "ده",
                                    "بیست",
                                    "سی",
                                    "چهل",
                                    "پنجاه",
                                    "شصت",
                                    "هفتاد",
                                    "هشتاد",
                                    "نود"
                                  ];

                                  const sadgan = [
                                    "",
                                    "صد",
                                    "دویست",
                                    "سیصد",
                                    "چهارصد",
                                    "پانصد",
                                    "ششصد",
                                    "هفتصد",
                                    "هشتصد",
                                    "نهصد"
                                  ];

                                  const dahYek = [
                                    "ده",
                                    "یازده",
                                    "دوازده",
                                    "سیزده",
                                    "چهارده",
                                    "پانزده",
                                    "شانزده",
                                    "هفده",
                                    "هجده",
                                    "نوزده"
                                  ];

                                  const hazarha = [
                                    "",
                                    "هزار",
                                    "میلیون",
                                    "میلیارد",
                                    "بیلیون"
                                  ];

                                  function threeDigitToText(num) {
                                    num = parseInt(num, 10);
                                    if (num === 0) return "";
                                    let result = "";
                                    if (Math.floor(num / 100) > 0) {
                                      result += sadgan[Math.floor(num / 100)];
                                    }
                                    num %= 100;
                                    if (num >= 10 && num <= 19) {
                                      result +=
                                        (result ? " و " : "") +
                                        dahYek[num - 10];
                                    } else {
                                      if (Math.floor(num / 10) > 0) {
                                        result +=
                                          (result ? " و " : "") +
                                          dahgan[Math.floor(num / 10)];
                                      }
                                      if (num % 10 > 0) {
                                        result +=
                                          (result ? " و " : "") +
                                          yekan[num % 10];
                                      }
                                    }
                                    return result;
                                  }
                                  if (number === 0) return "صفر";
                                  let numStr = number.toString();
                                  let chunks = [];
                                  while (numStr.length > 0) {
                                    chunks.push(numStr.slice(-3));
                                    numStr = numStr.slice(0, -3);
                                  }
                                  let parts = [];
                                  for (let i = 0; i < chunks.length; i++) {
                                    let chunk = parseInt(chunks[i], 10);
                                    if (chunk !== 0) {
                                      let text = threeDigitToText(chunk);
                                      if (hazarha[i]) {
                                        text += " " + hazarha[i];
                                      }
                                      parts.unshift(text);
                                    }
                                  }
                                  return parts.join(" و ");
                                }
                                return numberToPersianText(
                                  $state.valueAdd2.value
                                );
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateTextNum2"] != null &&
                        typeof $steps["updateTextNum2"] === "object" &&
                        typeof $steps["updateTextNum2"].then === "function"
                      ) {
                        $steps["updateTextNum2"] = await $steps[
                          "updateTextNum2"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={"\u0645\u0628\u0644\u063a"}
                  type={"number"}
                  value={generateStateValueProp($state, ["valueAdd2", "value"])}
                />

                <AntdSelect
                  data-plasmic-name={"select2"}
                  data-plasmic-override={overrides.select2}
                  className={classNames("__wab_instance", sty.select2)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  defaultValue={"toman"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "select2",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return $state.carts.map(item => ({
                        label: item.name,
                        value: item.id
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={null}
                  popupScopeClassName={sty["select2__popup"]}
                  suffixIcon={
                    <Icon37Icon
                      className={classNames(projectcss.all, sty.svg__ajqBd)}
                      role={"img"}
                    />
                  }
                  value={generateStateValueProp($state, ["select2", "value"])}
                />

                <Icon122Icon
                  className={classNames(projectcss.all, sty.svg__tqdkn)}
                  role={"img"}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0GQa6
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (
                        $state.textNum2 +
                        "   " +
                        $state.carts.find(
                          item => item.id == $state.select2.value
                        ).name
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.info2),
                  maxLength: 250,
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["info2", "value"],
                      TextArea_Helpers
                    ).apply(null, eventArgs);
                  },
                  placeholder: "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a",
                  value: generateStateValueProp($state, ["info2", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "info2.value"
                    }
                  ],
                  [],
                  TextArea_Helpers ?? {},
                  child$Props
                );

                return (
                  <TextArea
                    data-plasmic-name={"info2"}
                    data-plasmic-override={overrides.info2}
                    {...child$Props}
                  />
                );
              })()}
              <Button
                data-plasmic-name={"button4"}
                data-plasmic-override={overrides.button4}
                className={classNames("__wab_instance", sty.button4)}
                color={"red"}
                isDisabled={(() => {
                  try {
                    return $state.button4.loadingviow;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                loadingviow={generateStateValueProp($state, [
                  "button4",
                  "loadingviow"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateButton4Loadingviow"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["button4", "loadingviow"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateButton4Loadingviow"] != null &&
                    typeof $steps["updateButton4Loadingviow"] === "object" &&
                    typeof $steps["updateButton4Loadingviow"].then ===
                      "function"
                  ) {
                    $steps["updateButton4Loadingviow"] = await $steps[
                      "updateButton4Loadingviow"
                    ];
                  }

                  $steps["invokeGlobalAction"] =
                    $state.valueAdd2.value != "" &&
                    parseInt($state.valueAdd2.value) > 0 &&
                    $state.valueAdd2.value != undefined
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.babarkat.com/webhook/saraf/getCustomer/",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    userToken: $state.token,
                                    _customer: $state.customerInfo.id,
                                    value:
                                      -1 *
                                      ($state.select.value == "toman"
                                        ? parseInt($state.valueAdd2.value) /
                                          1000
                                        : parseInt($state.valueAdd2.value)),
                                    priceType: $state.select.value,
                                    type: "transmission",
                                    text: $state.info.value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] =
                    $state.valueAdd2.value == "" ||
                    $state.valueAdd2.value == undefined ||
                    parseInt($state.valueAdd2.value) <= 0
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0644\u0637\u0641\u0627\u064b \u0645\u0628\u0644\u063a \u0635\u062d\u06cc\u062d \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f.",
                              undefined,
                              undefined,
                              "topRight"
                            ]
                          };
                          return $globalActions[
                            "plasmic-antd5-config-provider.showNotification"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["invokeGlobalAction3"] = $steps.invokeGlobalAction
                    ?.data?.success
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "success",
                            "\u0639\u0645\u0644\u06cc\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f.",
                            undefined,
                            undefined,
                            "topRight"
                          ]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction3"] != null &&
                    typeof $steps["invokeGlobalAction3"] === "object" &&
                    typeof $steps["invokeGlobalAction3"].then === "function"
                  ) {
                    $steps["invokeGlobalAction3"] = await $steps[
                      "invokeGlobalAction3"
                    ];
                  }

                  $steps["info"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://n8n.babarkat.com/webhook/saraf/getCustomerById",
                            undefined,
                            (() => {
                              try {
                                return {
                                  userToken: $state.token,
                                  id: $state.customerInfo.id
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["info"] != null &&
                    typeof $steps["info"] === "object" &&
                    typeof $steps["info"].then === "function"
                  ) {
                    $steps["info"] = await $steps["info"];
                  }

                  $steps["updateCustomerInfo"] = (
                    $steps.info?.data?.success ? true : false
                  )
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["customerInfo"]
                          },
                          operation: 0,
                          value: $steps.info.data.list
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCustomerInfo"] != null &&
                    typeof $steps["updateCustomerInfo"] === "object" &&
                    typeof $steps["updateCustomerInfo"].then === "function"
                  ) {
                    $steps["updateCustomerInfo"] = await $steps[
                      "updateCustomerInfo"
                    ];
                  }

                  $steps["updateRemoveOpen"] = $steps.invokeGlobalAction?.data
                    ?.success
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["remove", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateRemoveOpen"] != null &&
                    typeof $steps["updateRemoveOpen"] === "object" &&
                    typeof $steps["updateRemoveOpen"].then === "function"
                  ) {
                    $steps["updateRemoveOpen"] = await $steps[
                      "updateRemoveOpen"
                    ];
                  }

                  $steps["updateButtonLoadingviow2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["button4", "loadingviow"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateButtonLoadingviow2"] != null &&
                    typeof $steps["updateButtonLoadingviow2"] === "object" &&
                    typeof $steps["updateButtonLoadingviow2"].then ===
                      "function"
                  ) {
                    $steps["updateButtonLoadingviow2"] = await $steps[
                      "updateButtonLoadingviow2"
                    ];
                  }
                }}
                onLoadingviowChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "button4",
                      "loadingviow"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__exv6D
                  )}
                >
                  {
                    "\u06a9\u0633\u0631 \u0627\u0632 \u0645\u0648\u062c\u0648\u062f\u06cc"
                  }
                </div>
              </Button>
            </div>
          </AntdModal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "button2",
    "section",
    "header",
    "add",
    "valueAdd",
    "select",
    "info",
    "button3",
    "remove",
    "valueAdd2",
    "select2",
    "info2",
    "button4"
  ],
  button: ["button"],
  button2: ["button2"],
  section: ["section", "header"],
  header: ["header"],
  add: ["add", "valueAdd", "select", "info", "button3"],
  valueAdd: ["valueAdd"],
  select: ["select"],
  info: ["info"],
  button3: ["button3"],
  remove: ["remove", "valueAdd2", "select2", "info2", "button4"],
  valueAdd2: ["valueAdd2"],
  select2: ["select2"],
  info2: ["info2"],
  button4: ["button4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  button2: typeof Button;
  section: "section";
  header: "div";
  add: typeof AntdModal;
  valueAdd: typeof Input;
  select: typeof AntdSelect;
  info: typeof TextArea;
  button3: typeof Button;
  remove: typeof AntdModal;
  valueAdd2: typeof Input;
  select2: typeof AntdSelect;
  info2: typeof TextArea;
  button4: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfile__VariantsArgs;
    args?: PlasmicProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfile__ArgProps,
          internalVariantPropNames: PlasmicProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfile";
  } else {
    func.displayName = `PlasmicProfile.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sZQMbqXz9utLNaTnNb3uss"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicProfile = Object.assign(
  // Top-level PlasmicProfile renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    section: makeNodeComponent("section"),
    header: makeNodeComponent("header"),
    add: makeNodeComponent("add"),
    valueAdd: makeNodeComponent("valueAdd"),
    select: makeNodeComponent("select"),
    info: makeNodeComponent("info"),
    button3: makeNodeComponent("button3"),
    remove: makeNodeComponent("remove"),
    valueAdd2: makeNodeComponent("valueAdd2"),
    select2: makeNodeComponent("select2"),
    info2: makeNodeComponent("info2"),
    button4: makeNodeComponent("button4"),

    // Metadata about props expected for PlasmicProfile
    internalVariantProps: PlasmicProfile__VariantProps,
    internalArgProps: PlasmicProfile__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProfile;
/* prettier-ignore-end */
