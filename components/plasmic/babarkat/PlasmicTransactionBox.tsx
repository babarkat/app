/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: 9xs0oaOWmddY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Icons from "../../Icons"; // plasmic-import: y9SwG9bN8mmR/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicTransactionBox.module.css"; // plasmic-import: 9xs0oaOWmddY/css

createPlasmicElementProxy;

export type PlasmicTransactionBox__VariantMembers = {
  filed: "filed";
  unnamedGroupOfVariants:
    | "intenet"
    | "walet"
    | "sim"
    | "panel"
    | "unnamedVariant"
    | "snap"
    | "pubg"
    | "bill";
  wait: "wait";
};
export type PlasmicTransactionBox__VariantsArgs = {
  filed?: SingleBooleanChoiceArg<"filed">;
  unnamedGroupOfVariants?: SingleChoiceArg<
    | "intenet"
    | "walet"
    | "sim"
    | "panel"
    | "unnamedVariant"
    | "snap"
    | "pubg"
    | "bill"
  >;
  wait?: SingleBooleanChoiceArg<"wait">;
};
type VariantPropType = keyof PlasmicTransactionBox__VariantsArgs;
export const PlasmicTransactionBox__VariantProps = new Array<VariantPropType>(
  "filed",
  "unnamedGroupOfVariants",
  "wait"
);

export type PlasmicTransactionBox__ArgsType = {
  children?: React.ReactNode;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicTransactionBox__ArgsType;
export const PlasmicTransactionBox__ArgProps = new Array<ArgPropType>(
  "children",
  "onClick"
);

export type PlasmicTransactionBox__OverridesType = {
  root?: Flex__<"div">;
  icons?: Flex__<typeof Icons>;
  freeBox?: Flex__<"div">;
};

export interface DefaultTransactionBoxProps {
  children?: React.ReactNode;
  onClick?: (event: any) => void;
  filed?: SingleBooleanChoiceArg<"filed">;
  unnamedGroupOfVariants?: SingleChoiceArg<
    | "intenet"
    | "walet"
    | "sim"
    | "panel"
    | "unnamedVariant"
    | "snap"
    | "pubg"
    | "bill"
  >;
  wait?: SingleBooleanChoiceArg<"wait">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTransactionBox__RenderFunc(props: {
  variants: PlasmicTransactionBox__VariantsArgs;
  args: PlasmicTransactionBox__ArgsType;
  overrides: PlasmicTransactionBox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "filed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.filed
      },
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      },
      {
        path: "wait",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.wait
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootfiled]: hasVariant($state, "filed", "filed"),
          [sty.rootfiled_unnamedGroupOfVariants_intenet]:
            hasVariant($state, "unnamedGroupOfVariants", "intenet") &&
            hasVariant($state, "filed", "filed"),
          [sty.rootfiled_unnamedGroupOfVariants_panel]:
            hasVariant($state, "filed", "filed") &&
            hasVariant($state, "unnamedGroupOfVariants", "panel"),
          [sty.rootfiled_unnamedGroupOfVariants_sim]:
            hasVariant($state, "unnamedGroupOfVariants", "sim") &&
            hasVariant($state, "filed", "filed"),
          [sty.rootfiled_unnamedGroupOfVariants_walet]:
            hasVariant($state, "unnamedGroupOfVariants", "walet") &&
            hasVariant($state, "filed", "filed"),
          [sty.rootunnamedGroupOfVariants_bill]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "bill"
          ),
          [sty.rootunnamedGroupOfVariants_intenet]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "intenet"
          ),
          [sty.rootunnamedGroupOfVariants_panel]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "panel"
          ),
          [sty.rootunnamedGroupOfVariants_pubg]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "pubg"
          ),
          [sty.rootunnamedGroupOfVariants_sim]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "sim"
          ),
          [sty.rootunnamedGroupOfVariants_unnamedVariant]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "unnamedVariant"
          ),
          [sty.rootunnamedGroupOfVariants_walet]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "walet"
          ),
          [sty.rootwait]: hasVariant($state, "wait", "wait")
        }
      )}
      onClick={args.onClick}
    >
      <Icons
        data-plasmic-name={"icons"}
        data-plasmic-override={overrides.icons}
        className={classNames("__wab_instance", sty.icons, {
          [sty.iconsfiled]: hasVariant($state, "filed", "filed"),
          [sty.iconsfiled_unnamedGroupOfVariants_intenet]:
            hasVariant($state, "unnamedGroupOfVariants", "intenet") &&
            hasVariant($state, "filed", "filed"),
          [sty.iconsfiled_unnamedGroupOfVariants_walet]:
            hasVariant($state, "filed", "filed") &&
            hasVariant($state, "unnamedGroupOfVariants", "walet"),
          [sty.iconsunnamedGroupOfVariants_bill]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "bill"
          ),
          [sty.iconsunnamedGroupOfVariants_intenet]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "intenet"
          ),
          [sty.iconsunnamedGroupOfVariants_panel]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "panel"
          ),
          [sty.iconsunnamedGroupOfVariants_pubg]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "pubg"
          ),
          [sty.iconsunnamedGroupOfVariants_snap]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "snap"
          ),
          [sty.iconsunnamedGroupOfVariants_walet]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "walet"
          ),
          [sty.iconswait]: hasVariant($state, "wait", "wait")
        })}
        filed={
          hasVariant($state, "filed", "filed") &&
          hasVariant($state, "unnamedGroupOfVariants", "walet")
            ? true
            : hasVariant($state, "unnamedGroupOfVariants", "intenet") &&
              hasVariant($state, "filed", "filed")
            ? true
            : hasVariant($state, "filed", "filed")
            ? true
            : undefined
        }
        unnamedGroupOfVariants={
          hasVariant($state, "filed", "filed") &&
          hasVariant($state, "unnamedGroupOfVariants", "walet")
            ? "walet"
            : hasVariant($state, "unnamedGroupOfVariants", "intenet") &&
              hasVariant($state, "filed", "filed")
            ? "intenet"
            : hasVariant($state, "wait", "wait")
            ? "waite"
            : hasVariant($state, "unnamedGroupOfVariants", "bill")
            ? "bill"
            : hasVariant($state, "unnamedGroupOfVariants", "pubg")
            ? "pubg"
            : hasVariant($state, "unnamedGroupOfVariants", "snap")
            ? "snap"
            : hasVariant($state, "unnamedGroupOfVariants", "panel")
            ? "panel"
            : hasVariant($state, "unnamedGroupOfVariants", "walet")
            ? "walet"
            : hasVariant($state, "unnamedGroupOfVariants", "intenet")
            ? "intenet"
            : undefined
        }
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div className={classNames(projectcss.all, sty.freeBox__rjm5W)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h6LBa
                  )}
                >
                  {
                    "\u0634\u0627\u0631\u0698 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a "
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zr1Im
                  )}
                >
                  {"5000000 \u062a\u0648\u0645\u0627\u0646"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__nynGc)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6HX8
                  )}
                >
                  {"1403/05/07 10:20"}
                </div>
              </div>
            </React.Fragment>
          ),
          value: args.children
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "icons", "freeBox"],
  icons: ["icons"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  icons: typeof Icons;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTransactionBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTransactionBox__VariantsArgs;
    args?: PlasmicTransactionBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTransactionBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTransactionBox__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTransactionBox__ArgProps,
          internalVariantPropNames: PlasmicTransactionBox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTransactionBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTransactionBox";
  } else {
    func.displayName = `PlasmicTransactionBox.${nodeName}`;
  }
  return func;
}

export const PlasmicTransactionBox = Object.assign(
  // Top-level PlasmicTransactionBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    icons: makeNodeComponent("icons"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicTransactionBox
    internalVariantProps: PlasmicTransactionBox__VariantProps,
    internalArgProps: PlasmicTransactionBox__ArgProps
  }
);

export default PlasmicTransactionBox;
/* prettier-ignore-end */
