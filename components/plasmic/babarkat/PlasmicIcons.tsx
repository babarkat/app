/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: y9SwG9bN8mmR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicIcons.module.css"; // plasmic-import: y9SwG9bN8mmR/css

import SvgRepoIconCarrier2Icon from "./icons/PlasmicIcon__SvgRepoIconCarrier2"; // plasmic-import: aoPueH94YLGd/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: E6ROkR3UQ7U7/icon
import Icon58Icon from "./icons/PlasmicIcon__Icon58"; // plasmic-import: b6_fsTkPhz_-/icon
import Icon129Icon from "./icons/PlasmicIcon__Icon129"; // plasmic-import: 2rxYPp6upTUU/icon
import Icon104Icon from "./icons/PlasmicIcon__Icon104"; // plasmic-import: 3o5IGmXy7oW3/icon
import Icon160Icon from "./icons/PlasmicIcon__Icon160"; // plasmic-import: NEr1WT__As1_/icon
import SvgRepoIconCarrier3Icon from "./icons/PlasmicIcon__SvgRepoIconCarrier3"; // plasmic-import: VGmGx9vJ5BFt/icon
import SvgRepoIconCarrier4Icon from "./icons/PlasmicIcon__SvgRepoIconCarrier4"; // plasmic-import: H4kDPOF3z7xX/icon

createPlasmicElementProxy;

export type PlasmicIcons__VariantMembers = {
  filed: "filed";
  unnamedGroupOfVariants:
    | "intenet"
    | "walet"
    | "sim"
    | "panel"
    | "unnamedVariant"
    | "snap"
    | "pubg"
    | "bill"
    | "waite";
  dialog: "dialog";
  wite: "wite";
};
export type PlasmicIcons__VariantsArgs = {
  filed?: SingleBooleanChoiceArg<"filed">;
  unnamedGroupOfVariants?: SingleChoiceArg<
    | "intenet"
    | "walet"
    | "sim"
    | "panel"
    | "unnamedVariant"
    | "snap"
    | "pubg"
    | "bill"
    | "waite"
  >;
  dialog?: SingleBooleanChoiceArg<"dialog">;
  wite?: SingleBooleanChoiceArg<"wite">;
};
type VariantPropType = keyof PlasmicIcons__VariantsArgs;
export const PlasmicIcons__VariantProps = new Array<VariantPropType>(
  "filed",
  "unnamedGroupOfVariants",
  "dialog",
  "wite"
);

export type PlasmicIcons__ArgsType = {};
type ArgPropType = keyof PlasmicIcons__ArgsType;
export const PlasmicIcons__ArgProps = new Array<ArgPropType>();

export type PlasmicIcons__OverridesType = {
  frame?: Flex__<"div">;
};

export interface DefaultIconsProps {
  filed?: SingleBooleanChoiceArg<"filed">;
  unnamedGroupOfVariants?: SingleChoiceArg<
    | "intenet"
    | "walet"
    | "sim"
    | "panel"
    | "unnamedVariant"
    | "snap"
    | "pubg"
    | "bill"
    | "waite"
  >;
  dialog?: SingleBooleanChoiceArg<"dialog">;
  wite?: SingleBooleanChoiceArg<"wite">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIcons__RenderFunc(props: {
  variants: PlasmicIcons__VariantsArgs;
  args: PlasmicIcons__ArgsType;
  overrides: PlasmicIcons__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "filed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.filed
      },
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      },
      {
        path: "dialog",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dialog
      },
      {
        path: "wite",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.wite
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"frame"}
      data-plasmic-override={overrides.frame}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.frame,
        {
          [sty.framedialog]: hasVariant($state, "dialog", "dialog"),
          [sty.framefiled]: hasVariant($state, "filed", "filed"),
          [sty.frameunnamedGroupOfVariants_intenet]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "intenet"
          ),
          [sty.frameunnamedGroupOfVariants_waite]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "waite"
          ),
          [sty.framewite]: hasVariant($state, "wite", "wite")
        }
      )}
    >
      <PlasmicIcon__
        PlasmicIconType={
          hasVariant($state, "wite", "wite")
            ? Icon160Icon
            : hasVariant($state, "unnamedGroupOfVariants", "waite")
            ? Icon160Icon
            : hasVariant($state, "unnamedGroupOfVariants", "bill")
            ? Icon104Icon
            : hasVariant($state, "unnamedGroupOfVariants", "pubg")
            ? Icon129Icon
            : hasVariant($state, "unnamedGroupOfVariants", "snap")
            ? Icon58Icon
            : hasVariant($state, "unnamedGroupOfVariants", "panel")
            ? Icon14Icon
            : SvgRepoIconCarrier2Icon
        }
        className={classNames(projectcss.all, sty.svg__cRwxw, {
          [sty.svgfiled__cRwxwZvsHy]: hasVariant($state, "filed", "filed"),
          [sty.svgunnamedGroupOfVariants_bill__cRwxwjPrn8]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "bill"
          ),
          [sty.svgunnamedGroupOfVariants_intenet__cRwxwmMJ6]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "intenet"
          ),
          [sty.svgunnamedGroupOfVariants_panel__cRwxwNy0X]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "panel"
          ),
          [sty.svgunnamedGroupOfVariants_pubg__cRwxwd31Dl]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "pubg"
          ),
          [sty.svgunnamedGroupOfVariants_snap__cRwxw1EPef]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "snap"
          ),
          [sty.svgunnamedGroupOfVariants_waite__cRwxwnm8L7]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "waite"
          ),
          [sty.svgunnamedGroupOfVariants_walet__cRwxwwSVt]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "walet"
          ),
          [sty.svgwite__cRwxwT15Jx]: hasVariant($state, "wite", "wite")
        })}
        role={"img"}
      />

      <SvgRepoIconCarrier3Icon
        className={classNames(projectcss.all, sty.svg__bzwy5, {
          [sty.svgfiled_unnamedGroupOfVariants_intenet__bzwy5ZvsHyMMJ6]:
            hasVariant($state, "unnamedGroupOfVariants", "intenet") &&
            hasVariant($state, "filed", "filed"),
          [sty.svgunnamedGroupOfVariants_intenet__bzwy5MMJ6]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "intenet"
          ),
          [sty.svgunnamedGroupOfVariants_waite__bzwy5Nm8L7]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "waite"
          ),
          [sty.svgwite__bzwy5T15Jx]: hasVariant($state, "wite", "wite"),
          [sty.svgwite_unnamedGroupOfVariants_intenet__bzwy5T15JxMMJ6]:
            hasVariant($state, "unnamedGroupOfVariants", "intenet") &&
            hasVariant($state, "wite", "wite")
        })}
        role={"img"}
      />

      <SvgRepoIconCarrier4Icon
        className={classNames(projectcss.all, sty.svg__oOal, {
          [sty.svgfiled_unnamedGroupOfVariants_walet__oOalZvsHyWSVt]:
            hasVariant($state, "filed", "filed") &&
            hasVariant($state, "unnamedGroupOfVariants", "walet"),
          [sty.svgunnamedGroupOfVariants_walet__oOalwSVt]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "walet"
          )
        })}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame: ["frame"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIcons__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIcons__VariantsArgs;
    args?: PlasmicIcons__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIcons__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicIcons__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIcons__ArgProps,
          internalVariantPropNames: PlasmicIcons__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIcons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame") {
    func.displayName = "PlasmicIcons";
  } else {
    func.displayName = `PlasmicIcons.${nodeName}`;
  }
  return func;
}

export const PlasmicIcons = Object.assign(
  // Top-level PlasmicIcons renders the root element
  makeNodeComponent("frame"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicIcons
    internalVariantProps: PlasmicIcons__VariantProps,
    internalArgProps: PlasmicIcons__ArgProps
  }
);

export default PlasmicIcons;
/* prettier-ignore-end */
