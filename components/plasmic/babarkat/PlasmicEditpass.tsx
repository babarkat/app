// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: uj9U0aRqhjqk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicEditpass.module.css"; // plasmic-import: uj9U0aRqhjqk/css

import Icon44Icon from "./icons/PlasmicIcon__Icon44"; // plasmic-import: nmRZKCTHFfFp/icon
import Icon55Icon from "./icons/PlasmicIcon__Icon55"; // plasmic-import: pYVCSSEZE7RE/icon
import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: rPH6lstZmeFB/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: jg6gpiNRWEQd/icon

createPlasmicElementProxy;

export type PlasmicEditpass__VariantMembers = {};
export type PlasmicEditpass__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditpass__VariantsArgs;
export const PlasmicEditpass__VariantProps = new Array<VariantPropType>();

export type PlasmicEditpass__ArgsType = {
  userbabarcat?: any;
  lodingbtn?: boolean;
  newPassValue?: string;
  reoeatNewPassValue?: string;
  token?: string;
};
type ArgPropType = keyof PlasmicEditpass__ArgsType;
export const PlasmicEditpass__ArgProps = new Array<ArgPropType>(
  "userbabarcat",
  "lodingbtn",
  "newPassValue",
  "reoeatNewPassValue",
  "token"
);

export type PlasmicEditpass__OverridesType = {
  header?: Flex__<"div">;
  newPass?: Flex__<typeof Input>;
  progress?: Flex__<typeof AntdProgress>;
  reoeatNewPass?: Flex__<typeof Input>;
  button?: Flex__<typeof Button>;
};

export interface DefaultEditpassProps {
  userbabarcat?: any;
  lodingbtn?: boolean;
  newPassValue?: string;
  reoeatNewPassValue?: string;
  token?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditpass__RenderFunc(props: {
  variants: PlasmicEditpass__VariantsArgs;
  args: PlasmicEditpass__ArgsType;
  overrides: PlasmicEditpass__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          userbabarcat: (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userbabarcat");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })(),
          lodingbtn: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "reoeatNewPass.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "newPass.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "pass1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "password"
      },
      {
        path: "pass2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "password"
      },
      {
        path: "pass3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "password"
      },
      {
        path: "p1",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "saraflist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const transformedArray = $props.userbabarcat.saraflist.map(
                  item => ({
                    label: item.name,
                    value: item.id
                  })
                );
                return transformedArray;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "loadedbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsosEvNkdp6Zt6()
  });

  return (
    <div
      data-plasmic-name={"header"}
      data-plasmic-override={overrides.header}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.header
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__yBtfW)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___79Rdp)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zCx2F
            )}
          >
            {
              "\u062a\u063a\u06cc\u06cc\u0631  \u0631\u0645\u0632 \u0639\u0628\u0648\u0631"
            }
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__igCoj)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tn6A2
            )}
          >
            {
              "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0628\u0627\u06cc\u062f \u062d\u062f\u0627\u0642\u0644 6 \u06a9\u0627\u0631\u0627\u06a9\u062a\u0631 \u0628\u0627\u0634\u062f."
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qAefv)}>
            <Icon44Icon
              className={classNames(projectcss.all, sty.svg__dNWeF)}
              role={"img"}
            />

            <Input
              data-plasmic-name={"newPass"}
              data-plasmic-override={overrides.newPass}
              className={classNames("__wab_instance", sty.newPass)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["newPass", "value"]).apply(
                  null,
                  eventArgs
                );

                (async value => {
                  const $steps = {};

                  $steps["updateP1"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["p1"]
                          },
                          operation: 0,
                          value: (() => {
                            let score = 0;
                            if ($state.newPass.value.length >= 2) score += 30;
                            if ($state.newPass.value.length >= 4) score += 30;
                            if ($state.newPass.value.length >= 6) score += 40;
                            return score;
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateP1"] != null &&
                    typeof $steps["updateP1"] === "object" &&
                    typeof $steps["updateP1"].then === "function"
                  ) {
                    $steps["updateP1"] = await $steps["updateP1"];
                  }
                }).apply(null, eventArgs);
              }}
              placeholder={
                "\u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062c\u062f\u06cc\u062f"
              }
              type={(() => {
                try {
                  return $state.pass2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "password";
                  }
                  throw e;
                }
              })()}
              value={generateStateValueProp($state, ["newPass", "value"])}
            />

            <Icon55Icon
              className={classNames(projectcss.all, sty.svg___0Uww0)}
              onClick={async event => {
                const $steps = {};

                $steps["updatePass2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["pass2"]
                        },
                        operation: 0,
                        value: "text"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePass2"] != null &&
                  typeof $steps["updatePass2"] === "object" &&
                  typeof $steps["updatePass2"].then === "function"
                ) {
                  $steps["updatePass2"] = await $steps["updatePass2"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = { args: [1000] };
                      return $globalActions["Fragment.wait"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updatePass22"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["pass2"]
                        },
                        operation: 0,
                        value: "password"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePass22"] != null &&
                  typeof $steps["updatePass22"] === "object" &&
                  typeof $steps["updatePass22"].then === "function"
                ) {
                  $steps["updatePass22"] = await $steps["updatePass22"];
                }
              }}
              role={"img"}
            />
          </div>
          <AntdProgress
            data-plasmic-name={"progress"}
            data-plasmic-override={overrides.progress}
            className={classNames("__wab_instance", sty.progress)}
            percent={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $state.p1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 50;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $state.p1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 0;
                      }
                      throw e;
                    }
                  })()
            }
            strokeColor={(() => {
              try {
                return $state.p1 > 80
                  ? "#2DC57B"
                  : $state.p1 > 50
                  ? "#FAAD14"
                  : "#FF4D4F";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "#FAAD14";
                }
                throw e;
              }
            })()}
          />
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__fwl0R)}>
          <Icon45Icon
            className={classNames(projectcss.all, sty.svg___2Xb3)}
            role={"img"}
          />

          <Input
            data-plasmic-name={"reoeatNewPass"}
            data-plasmic-override={overrides.reoeatNewPass}
            className={classNames("__wab_instance", sty.reoeatNewPass)}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "reoeatNewPass",
                "value"
              ]).apply(null, eventArgs);
            }}
            placeholder={
              "\u062a\u06a9\u0631\u0627\u0631 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062c\u062f\u06cc\u062f"
            }
            type={(() => {
              try {
                return $state.pass3;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "password";
                }
                throw e;
              }
            })()}
            value={generateStateValueProp($state, ["reoeatNewPass", "value"])}
          />

          <Icon55Icon
            className={classNames(projectcss.all, sty.svg__wsxTc)}
            onClick={async event => {
              const $steps = {};

              $steps["updatePass3"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["pass3"]
                      },
                      operation: 0,
                      value: "text"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updatePass3"] != null &&
                typeof $steps["updatePass3"] === "object" &&
                typeof $steps["updatePass3"].then === "function"
              ) {
                $steps["updatePass3"] = await $steps["updatePass3"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = { args: [1000] };
                    return $globalActions["Fragment.wait"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updatePass32"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["pass3"]
                      },
                      operation: 0,
                      value: "password"
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updatePass32"] != null &&
                typeof $steps["updatePass32"] === "object" &&
                typeof $steps["updatePass32"].then === "function"
              ) {
                $steps["updatePass32"] = await $steps["updatePass32"];
              }
            }}
            role={"img"}
          />

          {(() => {
            try {
              return (
                $state.reoeatNewPass.value.length > 0 &&
                $state.newPass.value != $state.reoeatNewPass.value
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__isjAx
              )}
            >
              {
                "\u062a\u06a9\u0631\u0627\u0631 \u0631\u0645\u0632 \u0628\u0627 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u0645\u0637\u0627\u0628\u0642\u062a \u0646\u062f\u0627\u0631\u062f."
              }
            </div>
          ) : null}
          {(() => {
            try {
              return (
                $state.reoeatNewPass.value.length > 0 &&
                $state.newPass.value == $state.reoeatNewPass.value
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ozHvx
              )}
            >
              {
                "\u062a\u0637\u0627\u0628\u0642 \u0631\u0645\u0632 \u0639\u0628\u0648\u0631 \u062a\u0623\u06cc\u06cc\u062f \u0634\u062f."
              }
            </div>
          ) : null}
        </div>
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          color={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "green"
              : "green"
          }
          endIcon={
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? IconIcon
                  : Icon3Icon
              }
              className={classNames(projectcss.all, sty.svg__t7NMt)}
              role={"img"}
            />
          }
          isDisabled={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return (
                      $state.newPass.value != $state.reoeatNewPass.value ||
                      $state.p1 != 100 ||
                      $state.lodingbtn
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return (
                      $state.newPass.value != $state.reoeatNewPass.value ||
                      $state.p1 != 100
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
          }
          onClick={async event => {
            const $steps = {};

            $steps["updateLoadedbtn"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loadedbtn"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateLoadedbtn"] != null &&
              typeof $steps["updateLoadedbtn"] === "object" &&
              typeof $steps["updateLoadedbtn"].then === "function"
            ) {
              $steps["updateLoadedbtn"] = await $steps["updateLoadedbtn"];
            }

            $steps["invokeGlobalAction3"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "https://n8n.babarkat.com/webhook/Babarkat/password",
                      (() => {
                        try {
                          return {
                            userToken: $props.token,
                            password: $state.newPass.value
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      undefined,
                      undefined
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction3"] != null &&
              typeof $steps["invokeGlobalAction3"] === "object" &&
              typeof $steps["invokeGlobalAction3"].then === "function"
            ) {
              $steps["invokeGlobalAction3"] = await $steps[
                "invokeGlobalAction3"
              ];
            }

            $steps["updateModal4Open"] =
              $steps.invokeGlobalAction3?.data[0]?.success === true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "\u0631\u0645\u0632 \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062a\u063a\u06cc\u06cc\u0631 \u06cc\u0627\u0641\u062a.",
                        "top-left"
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["updateModal4Open"] != null &&
              typeof $steps["updateModal4Open"] === "object" &&
              typeof $steps["updateModal4Open"].then === "function"
            ) {
              $steps["updateModal4Open"] = await $steps["updateModal4Open"];
            }

            $steps["invokeGlobalAction4"] =
              $steps.invokeGlobalAction3?.data[0]?.success === false
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "\u0645\u0634\u06a9\u0644\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                        "top-left"
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["invokeGlobalAction4"] != null &&
              typeof $steps["invokeGlobalAction4"] === "object" &&
              typeof $steps["invokeGlobalAction4"].then === "function"
            ) {
              $steps["invokeGlobalAction4"] = await $steps[
                "invokeGlobalAction4"
              ];
            }

            $steps["updateLoadedbtn2"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loadedbtn"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateLoadedbtn2"] != null &&
              typeof $steps["updateLoadedbtn2"] === "object" &&
              typeof $steps["updateLoadedbtn2"].then === "function"
            ) {
              $steps["updateLoadedbtn2"] = await $steps["updateLoadedbtn2"];
            }

            $steps["goToHomepage"] =
              $steps.invokeGlobalAction3?.data[0]?.success === true
                ? (() => {
                    const actionArgs = { destination: `/` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["goToHomepage"] != null &&
              typeof $steps["goToHomepage"] === "object" &&
              typeof $steps["goToHomepage"].then === "function"
            ) {
              $steps["goToHomepage"] = await $steps["goToHomepage"];
            }
          }}
          showEndIcon={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return $state.loadedbtn;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "showEndIcon";
                    }
                    throw e;
                  }
                })()
              : undefined
          }
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qmuTn
            )}
          >
            {"\u062a\u0627\u06cc\u06cc\u062f"}
          </div>
        </Button>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  header: ["header", "newPass", "progress", "reoeatNewPass", "button"],
  newPass: ["newPass"],
  progress: ["progress"],
  reoeatNewPass: ["reoeatNewPass"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  header: "div";
  newPass: typeof Input;
  progress: typeof AntdProgress;
  reoeatNewPass: typeof Input;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditpass__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditpass__VariantsArgs;
    args?: PlasmicEditpass__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditpass__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditpass__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditpass__ArgProps,
          internalVariantPropNames: PlasmicEditpass__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditpass__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "header") {
    func.displayName = "PlasmicEditpass";
  } else {
    func.displayName = `PlasmicEditpass.${nodeName}`;
  }
  return func;
}

export const PlasmicEditpass = Object.assign(
  // Top-level PlasmicEditpass renders the root element
  makeNodeComponent("header"),
  {
    // Helper components rendering sub-elements
    newPass: makeNodeComponent("newPass"),
    progress: makeNodeComponent("progress"),
    reoeatNewPass: makeNodeComponent("reoeatNewPass"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicEditpass
    internalVariantProps: PlasmicEditpass__VariantProps,
    internalArgProps: PlasmicEditpass__ArgProps
  }
);

export default PlasmicEditpass;
/* prettier-ignore-end */
