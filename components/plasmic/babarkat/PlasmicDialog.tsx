/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: 2GQa6CZGhRDY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Dialog } from "@plasmicpkgs/radix-ui";
import { DialogContent } from "@plasmicpkgs/radix-ui";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { DialogClose } from "@plasmicpkgs/radix-ui";

import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant
import {
  ExperimentValue,
  useExperiment
} from "./PlasmicGlobalVariant__Experiment"; // plasmic-import: 0yNpRAZ9BHRO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicDialog.module.css"; // plasmic-import: 2GQa6CZGhRDY/css

import Icon154Icon from "./icons/PlasmicIcon__Icon154"; // plasmic-import: vEkGA7arj2Yg/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: XoiNjWGyNWHX/icon
import Icon89Icon from "./icons/PlasmicIcon__Icon89"; // plasmic-import: 1mHusOdupjsZ/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicDialog__VariantMembers = {
  noTrigger: "noTrigger";
  hideHeader: "hideHeader";
  noSpacing: "noSpacing";
  fullScreen: "fullScreen";
};
export type PlasmicDialog__VariantsArgs = {
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  hideHeader?: SingleBooleanChoiceArg<"hideHeader">;
  noSpacing?: SingleBooleanChoiceArg<"noSpacing">;
  fullScreen?: SingleBooleanChoiceArg<"fullScreen">;
};
type VariantPropType = keyof PlasmicDialog__VariantsArgs;
export const PlasmicDialog__VariantProps = new Array<VariantPropType>(
  "noTrigger",
  "hideHeader",
  "noSpacing",
  "fullScreen"
);

export type PlasmicDialog__ArgsType = {
  open?: boolean;
  onOpenChange?: (val: boolean) => void;
  data?: any;
  type?: string;
  onTypeChange?: (val: string) => void;
  onClick?: (event: any) => void;
  load?: boolean;
  onLoadChange?: (val: string) => void;
  onClick2?: (event: any) => void;
};
type ArgPropType = keyof PlasmicDialog__ArgsType;
export const PlasmicDialog__ArgProps = new Array<ArgPropType>(
  "open",
  "onOpenChange",
  "data",
  "type",
  "onTypeChange",
  "onClick",
  "load",
  "onLoadChange",
  "onClick2"
);

export type PlasmicDialog__OverridesType = {
  dialog?: Flex__<typeof Dialog>;
  dialogContent?: Flex__<typeof DialogContent>;
  button3?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  embedHtml?: Flex__<typeof Embed>;
  dialogClose?: Flex__<typeof DialogClose>;
};

export interface DefaultDialogProps {
  open?: boolean;
  onOpenChange?: (val: boolean) => void;
  data?: any;
  type?: string;
  onTypeChange?: (val: string) => void;
  onClick?: (event: any) => void;
  load?: boolean;
  onLoadChange?: (val: string) => void;
  onClick2?: (event: any) => void;
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  hideHeader?: SingleBooleanChoiceArg<"hideHeader">;
  noSpacing?: SingleBooleanChoiceArg<"noSpacing">;
  fullScreen?: SingleBooleanChoiceArg<"fullScreen">;
  className?: string;
}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDialog__RenderFunc(props: {
  variants: PlasmicDialog__VariantsArgs;
  args: PlasmicDialog__ArgsType;
  overrides: PlasmicDialog__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: {
            data: [
              {
                text: "\u0645\u0648\u0631\u062f \u0627\u0648\u0644",
                value: 100
              },
              {
                text: "\u0645\u0648\u0631\u062f \u062f\u0648\u0645",
                value: 200
              },
              {
                text: "\u0645\u0648\u0631\u062f \u0633\u0648\u0645",
                value: 300
              },
              {
                text: "\u0645\u0648\u0631\u062f \u0686\u0647\u0627\u0631\u0645",
                value: 400
              },
              {
                text: "\u0645\u0648\u0631\u062f \u067e\u0646\u062c\u0645",
                value: 500
              }
            ],
            amount: {
              type: "\u0627\u0641\u063a\u0627\u0646\u06cc",
              text: "\u0645\u0628\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a \u0634\u062f\u0647 ",
              value: "500000",
              amount: 1000
            }
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "noTrigger",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTrigger
      },
      {
        path: "hideHeader",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideHeader
      },
      {
        path: "noSpacing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noSpacing
      },
      {
        path: "fullScreen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fullScreen
      },
      {
        path: "type",
        type: "writable",
        variableType: "text",

        valueProp: "type",
        onChangeProp: "onTypeChange"
      },
      {
        path: "load",
        type: "writable",
        variableType: "boolean",

        valueProp: "load",
        onChangeProp: "onLoadChange"
      },
      {
        path: "button2.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button3.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsosEvNkdp6Zt6(),
    experiment: useExperiment()
  });

  return (
    <Dialog
      data-plasmic-name={"dialog"}
      data-plasmic-override={overrides.dialog}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.dialog,
        {
          [sty.dialogfullScreen]: hasVariant(
            $state,
            "fullScreen",
            "fullScreen"
          ),
          [sty.dialoghideHeader]: hasVariant(
            $state,
            "hideHeader",
            "hideHeader"
          ),
          [sty.dialognoSpacing]: hasVariant($state, "noSpacing", "noSpacing"),
          [sty.dialognoTrigger]: hasVariant($state, "noTrigger", "noTrigger")
        }
      )}
      defaultOpen={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["dialog", "open"]).apply(
          null,
          eventArgs
        );
      }}
      open={generateStateValueProp($state, ["dialog", "open"])}
      overlayClassName={classNames({
        [sty["pcls_ArnXodW25QaC"]]:
          hasVariant($state, "fullScreen", "fullScreen") &&
          hasVariant(globalVariants, "screen", "mobileOnly"),
        [sty["pcls_XJIuNxa3RHMz"]]: hasVariant(
          globalVariants,
          "screen",
          "mobileOnly"
        ),
        [sty["pcls_a1b7gjOs22Am"]]: hasVariant(
          $state,
          "fullScreen",
          "fullScreen"
        ),
        [sty["pcls_i_dnxtSILJwc"]]: true
      })}
      themeResetClass={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens
      )}
      triggerSlot={null}
    >
      <DialogContent
        data-plasmic-name={"dialogContent"}
        data-plasmic-override={overrides.dialogContent}
        className={classNames("__wab_instance", sty.dialogContent, {
          [sty.dialogContentfullScreen]: hasVariant(
            $state,
            "fullScreen",
            "fullScreen"
          ),
          [sty.dialogContentglobal_experiment_override]: hasVariant(
            globalVariants,
            "experiment",
            "override"
          ),
          [sty.dialogContenthideHeader]: hasVariant(
            $state,
            "hideHeader",
            "hideHeader"
          ),
          [sty.dialogContentnoSpacing]: hasVariant(
            $state,
            "noSpacing",
            "noSpacing"
          )
        })}
        enterAnimations={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ["slide-in-from-bottom"]
            : undefined
        }
        enterDuration={
          hasVariant(globalVariants, "screen", "mobileOnly") ? 0.3 : 0.3
        }
        exitAnimations={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? ["slide-out-to-bottom"]
            : undefined
        }
        exitDuration={
          hasVariant(globalVariants, "screen", "mobileOnly") ? 0.5 : 0.5
        }
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox___8Hh5, {
            [sty.freeBoxhideHeader___8Hh56Ljbu]: hasVariant(
              $state,
              "hideHeader",
              "hideHeader"
            )
          })}
          dir={``}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__pXkK)}
            id={"receipt"}
          >
            <Icon154Icon
              className={classNames(projectcss.all, sty.svg__kkV5)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mZjLz
              )}
            >
              {
                "\u062e\u0631\u06cc\u062f \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__inSrv)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ytlU7)}
                    key={currentIndex}
                  />
                );
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__exOlE)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $props.data.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cShxb)}
                    key={currentIndex}
                    style={(() => {
                      try {
                        return {
                          border:
                            currentIndex === $props.data.data.length - 1
                              ? "none"
                              : ""
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jApA
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m06Po
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.value;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                );
              })}
              <div className={classNames(projectcss.all, sty.freeBox__vmNbe)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xfeaM
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.data.amount.text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gtK4M
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return `${$props.data.amount.value}  ${$props.data.amount.type}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__x0D8S)}>
            <Button
              data-plasmic-name={"button3"}
              data-plasmic-override={overrides.button3}
              className={classNames("__wab_instance", sty.button3)}
              color={"green"}
              loadingviow={generateStateValueProp($state, [
                "button3",
                "loadingviow"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              onLoadingviowChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button3", "loadingviow"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nuOj
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </Button>
            <Button
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames("__wab_instance", sty.button2)}
              color={"softGreen"}
              loadingviow={generateStateValueProp($state, [
                "button2",
                "loadingviow"
              ])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            function shareTextReceipt(text) {
                              if (navigator.share) {
                                navigator
                                  .share({
                                    title: "رسید تراکنش",
                                    text: text
                                  })
                                  .catch(() => {
                                    $$.copyToClipboard(text);
                                  });
                              } else {
                                $$.copyToClipboard(text);
                              }
                            }
                            const receiptText =
                              "\uD83C\uDF3E خرید از بابرکت\n" +
                              $props.data.data
                                .map(item => `${item.text}: ${item.value}`)
                                .join("\n") +
                              `\n${$props.data.amount.text}: ${$props.data.amount.value} ${$props.data.amount.type}`;
                            return shareTextReceipt(receiptText);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "\u0645\u062a\u0646 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u06a9\u067e\u06cc \u0634\u062f.",
                          "top-left"
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
              onLoadingviowChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button2", "loadingviow"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hUz7V
                )}
              >
                {
                  "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
                }
              </div>
            </Button>
          </div>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '\r\n  <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>\r\n\r\n  <script>\r\n    function captureReceipt() {\r\n      const element = document.getElementById(\'receipt\');\r\n      html2canvas(element, { useCORS: true, backgroundColor: "#fff" }).then(canvas => {\r\n        canvas.toBlob(blob => {\r\n          if (!blob) {\r\n            alert("\u26a0\ufe0f Blob \u062a\u0648\u0644\u06cc\u062f \u0646\u0634\u062f. \u0645\u0637\u0645\u0626\u0646 \u0634\u0648 \u06a9\u0647 \u0627\u0632 \u0645\u0631\u0648\u0631\u06af\u0631 \u0645\u062f\u0631\u0646 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc\u200c\u06a9\u0646\u06cc \u0648 \u0635\u0641\u062d\u0647 \u0631\u0648\u06cc localhost \u0627\u062c\u0631\u0627 \u0645\u06cc\u0634\u0647.");\r\n            return;\r\n          }\r\n\r\n          const file = new File([blob], "receipt.png", { type: "image/png" });\r\n\r\n          if (navigator.canShare && navigator.canShare({ files: [file] })) {\r\n            navigator.share({\r\n              title: "\u0631\u0633\u06cc\u062f \u062a\u0631\u0627\u06a9\u0646\u0634",\r\n              text: "\u0631\u0633\u06cc\u062f \u062e\u0631\u06cc\u062f \u0634\u0645\u0627 \u0622\u0645\u0627\u062f\u0647 \u0627\u0633\u062a.",\r\n              files: [file]\r\n            }).catch(err => console.error("\u0627\u0634\u062a\u0631\u0627\u06a9\u200c\u06af\u0630\u0627\u0631\u06cc \u0646\u0627\u0645\u0648\u0641\u0642:", err));\r\n          } else {\r\n            // \u0627\u06af\u0631 share \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u0646\u0634\u062f\u060c \u0641\u0627\u06cc\u0644 \u0631\u0648 \u062f\u0627\u0646\u0644\u0648\u062f \u06a9\u0646\r\n            const url = URL.createObjectURL(blob);\r\n            const link = document.createElement(\'a\');\r\n            link.href = url;\r\n            link.download = "receipt.png";\r\n            link.click();\r\n          }\r\n        }, "image/png");\r\n      });\r\n    }\r\n  </script>\r\n'
            }
          />
        </div>
        <DialogClose
          data-plasmic-name={"dialogClose"}
          data-plasmic-override={overrides.dialogClose}
          className={classNames("__wab_instance", sty.dialogClose, {
            [sty.dialogClosehideHeader]: hasVariant(
              $state,
              "hideHeader",
              "hideHeader"
            )
          })}
        >
          <XIcon
            className={classNames(projectcss.all, sty.svg__avBm4)}
            role={"img"}
          />
        </DialogClose>
        <div className={classNames(projectcss.all, sty.freeBox__nTiio)}>
          <div className={classNames(projectcss.all, sty.freeBox___02ILd)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g2Wb
              )}
            >
              {"\u0631\u0633\u06cc\u062f \u067e\u0631\u062f\u0627\u062e\u062a"}
            </div>
          </div>
          <Icon89Icon
            className={classNames(projectcss.all, sty.svg__aSmv)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDialogOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["dialog", "open"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDialogOpen"] != null &&
                typeof $steps["updateDialogOpen"] === "object" &&
                typeof $steps["updateDialogOpen"].then === "function"
              ) {
                $steps["updateDialogOpen"] = await $steps["updateDialogOpen"];
              }
            }}
            role={"img"}
          />
        </div>
      </DialogContent>
    </Dialog>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dialog: [
    "dialog",
    "dialogContent",
    "button3",
    "button2",
    "embedHtml",
    "dialogClose"
  ],
  dialogContent: [
    "dialogContent",
    "button3",
    "button2",
    "embedHtml",
    "dialogClose"
  ],
  button3: ["button3"],
  button2: ["button2"],
  embedHtml: ["embedHtml"],
  dialogClose: ["dialogClose"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dialog: typeof Dialog;
  dialogContent: typeof DialogContent;
  button3: typeof Button;
  button2: typeof Button;
  embedHtml: typeof Embed;
  dialogClose: typeof DialogClose;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDialog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDialog__VariantsArgs;
    args?: PlasmicDialog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDialog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDialog__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDialog__ArgProps,
          internalVariantPropNames: PlasmicDialog__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDialog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dialog") {
    func.displayName = "PlasmicDialog";
  } else {
    func.displayName = `PlasmicDialog.${nodeName}`;
  }
  return func;
}

export const PlasmicDialog = Object.assign(
  // Top-level PlasmicDialog renders the root element
  makeNodeComponent("dialog"),
  {
    // Helper components rendering sub-elements
    dialogContent: makeNodeComponent("dialogContent"),
    button3: makeNodeComponent("button3"),
    button2: makeNodeComponent("button2"),
    embedHtml: makeNodeComponent("embedHtml"),
    dialogClose: makeNodeComponent("dialogClose"),

    // Metadata about props expected for PlasmicDialog
    internalVariantProps: PlasmicDialog__VariantProps,
    internalArgProps: PlasmicDialog__ArgProps
  }
);

export default PlasmicDialog;
/* prettier-ignore-end */
