/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: KdLckjkHArJ8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicTransaction2.module.css"; // plasmic-import: KdLckjkHArJ8/css

import SvgRepoIconCarrier2Icon from "./icons/PlasmicIcon__SvgRepoIconCarrier2"; // plasmic-import: aoPueH94YLGd/icon
import SvgRepoIconCarrier3Icon from "./icons/PlasmicIcon__SvgRepoIconCarrier3"; // plasmic-import: VGmGx9vJ5BFt/icon
import SvgRepoIconCarrier4Icon from "./icons/PlasmicIcon__SvgRepoIconCarrier4"; // plasmic-import: H4kDPOF3z7xX/icon
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: E6ROkR3UQ7U7/icon
import Icon58Icon from "./icons/PlasmicIcon__Icon58"; // plasmic-import: b6_fsTkPhz_-/icon
import Icon70Icon from "./icons/PlasmicIcon__Icon70"; // plasmic-import: I0oI14s4oqbt/icon

createPlasmicElementProxy;

export type PlasmicTransaction2__VariantMembers = {
  filed: "filed";
  unnamedGroupOfVariants:
    | "intenet"
    | "walet"
    | "sim"
    | "panel"
    | "snap"
    | "pubg";
};
export type PlasmicTransaction2__VariantsArgs = {
  filed?: SingleBooleanChoiceArg<"filed">;
  unnamedGroupOfVariants?: SingleChoiceArg<
    "intenet" | "walet" | "sim" | "panel" | "snap" | "pubg"
  >;
};
type VariantPropType = keyof PlasmicTransaction2__VariantsArgs;
export const PlasmicTransaction2__VariantProps = new Array<VariantPropType>(
  "filed",
  "unnamedGroupOfVariants"
);

export type PlasmicTransaction2__ArgsType = {
  slot?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTransaction2__ArgsType;
export const PlasmicTransaction2__ArgProps = new Array<ArgPropType>(
  "slot",
  "children"
);

export type PlasmicTransaction2__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
};

export interface DefaultTransaction2Props {
  slot?: React.ReactNode;
  children?: React.ReactNode;
  filed?: SingleBooleanChoiceArg<"filed">;
  unnamedGroupOfVariants?: SingleChoiceArg<
    "intenet" | "walet" | "sim" | "panel" | "snap" | "pubg"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTransaction2__RenderFunc(props: {
  variants: PlasmicTransaction2__VariantsArgs;
  args: PlasmicTransaction2__ArgsType;
  overrides: PlasmicTransaction2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "filed",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.filed
      },
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootfiled]: hasVariant($state, "filed", "filed"),
          [sty.rootunnamedGroupOfVariants_intenet]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "intenet"
          ),
          [sty.rootunnamedGroupOfVariants_intenet_filed]:
            hasVariant($state, "filed", "filed") &&
            hasVariant($state, "unnamedGroupOfVariants", "intenet"),
          [sty.rootunnamedGroupOfVariants_panel]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "panel"
          ),
          [sty.rootunnamedGroupOfVariants_pubg]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "pubg"
          ),
          [sty.rootunnamedGroupOfVariants_sim]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "sim"
          ),
          [sty.rootunnamedGroupOfVariants_snap]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "snap"
          ),
          [sty.rootunnamedGroupOfVariants_walet]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "walet"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__weKhs, {
          [sty.freeBoxfiled__weKhs0GNub]: hasVariant($state, "filed", "filed"),
          [sty.freeBoxunnamedGroupOfVariants_sim__weKhsZuBps]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "sim"
          ),
          [sty.freeBoxunnamedGroupOfVariants_walet__weKhsA16YY]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "walet"
          )
        })}
      >
        <PlasmicIcon__
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          PlasmicIconType={
            hasVariant($state, "unnamedGroupOfVariants", "pubg")
              ? Icon70Icon
              : hasVariant($state, "unnamedGroupOfVariants", "snap")
              ? Icon58Icon
              : hasVariant($state, "unnamedGroupOfVariants", "panel")
              ? Icon14Icon
              : hasVariant($state, "unnamedGroupOfVariants", "walet")
              ? SvgRepoIconCarrier4Icon
              : hasVariant($state, "unnamedGroupOfVariants", "intenet")
              ? SvgRepoIconCarrier3Icon
              : SvgRepoIconCarrier2Icon
          }
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgfiled]: hasVariant($state, "filed", "filed"),
            [sty.svgunnamedGroupOfVariants_intenet]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "intenet"
            ),
            [sty.svgunnamedGroupOfVariants_panel]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "panel"
            ),
            [sty.svgunnamedGroupOfVariants_pubg]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "pubg"
            ),
            [sty.svgunnamedGroupOfVariants_snap]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "snap"
            ),
            [sty.svgunnamedGroupOfVariants_walet]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "walet"
            )
          })}
          role={"img"}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__aAt6, {
          [sty.freeBoxfiled__aAt60GNub]: hasVariant($state, "filed", "filed"),
          [sty.freeBoxunnamedGroupOfVariants_intenet__aAt6SkCi]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "intenet"
          ),
          [sty.freeBoxunnamedGroupOfVariants_panel__aAt6Ul1Qs]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "panel"
          ),
          [sty.freeBoxunnamedGroupOfVariants_walet__aAt6A16YY]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "walet"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents:
            "\u0627\u0646\u062a\u0642\u0627\u0644 \u0648\u062c\u0647",
          value: args.slot,
          className: classNames(sty.slotTargetSlot, {
            [sty.slotTargetSlotfiled]: hasVariant($state, "filed", "filed"),
            [sty.slotTargetSlotunnamedGroupOfVariants_intenet]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "intenet"
            ),
            [sty.slotTargetSlotunnamedGroupOfVariants_panel]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "panel"
            ),
            [sty.slotTargetSlotunnamedGroupOfVariants_walet]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "walet"
            )
          })
        })}
      </div>
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textfiled]: hasVariant($state, "filed", "filed"),
          [sty.textunnamedGroupOfVariants_intenet_filed]:
            hasVariant($state, "filed", "filed") &&
            hasVariant($state, "unnamedGroupOfVariants", "intenet"),
          [sty.textunnamedGroupOfVariants_walet]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "walet"
          )
        })}
      >
        {hasVariant($state, "filed", "filed")
          ? "\u0639\u0645\u0644\u06cc\u0627\u062a \u0646\u0627\u0645\u0648\u0641\u0642 \u0627\u0646\u062c\u0627\u0645 \u0634\u062f"
          : "\u0639\u0645\u0644\u06cc\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f"}
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__b64Ws, {
          [sty.freeBoxfiled__b64Ws0GNub]: hasVariant($state, "filed", "filed"),
          [sty.freeBoxunnamedGroupOfVariants_sim__b64WsZuBps]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "sim"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div className={classNames(projectcss.all, sty.freeBox__kSag4)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x9PC2
                  )}
                >
                  {"\u0645\u0628\u0644\u063a :"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zfONt
                  )}
                >
                  {"100000 \u062a\u0648\u0645\u0627\u0646"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__b9OY)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iwe1T
                  )}
                >
                  {
                    "\u062a\u0627\u0631\u06cc\u062e \u062a\u0631\u0627\u06a9\u0646\u0634:"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3JAon
                  )}
                >
                  {"1403/07/05 10:15:30"}
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___5O1I6)}
              />

              <div className={classNames(projectcss.all, sty.freeBox___2P3RP)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yNxK
                  )}
                >
                  {
                    "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rYoX0
                  )}
                >
                  {"09258944568784"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__tcD9)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___77Z97
                  )}
                >
                  {"\u0627\u067e\u0631\u0627\u062a\u0648\u0631"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hu9Js
                  )}
                >
                  {"\u0631\u0627\u06cc\u062a\u0644"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__fi0Pn)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bkbfu
                  )}
                >
                  {
                    "\u0634\u0645\u0627\u0631\u0647 \u067e\u06cc\u06af\u06cc\u0631\u06cc"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__te16C
                  )}
                >
                  {"4458748475"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___4Z6Hr)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__id3Kw
                  )}
                >
                  {
                    "\u0634\u0646\u0627\u0633\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f52
                  )}
                >
                  {"445874888475"}
                </div>
              </div>
            </React.Fragment>
          ),
          value: args.children
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTransaction2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTransaction2__VariantsArgs;
    args?: PlasmicTransaction2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTransaction2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTransaction2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTransaction2__ArgProps,
          internalVariantPropNames: PlasmicTransaction2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTransaction2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTransaction2";
  } else {
    func.displayName = `PlasmicTransaction2.${nodeName}`;
  }
  return func;
}

export const PlasmicTransaction2 = Object.assign(
  // Top-level PlasmicTransaction2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicTransaction2
    internalVariantProps: PlasmicTransaction2__VariantProps,
    internalArgProps: PlasmicTransaction2__ArgProps
  }
);

export default PlasmicTransaction2;
/* prettier-ignore-end */
