/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: Ic-wT0cLUqQN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Header from "../../Header"; // plasmic-import: guZRqy1VG4VR/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import TransactionBox from "../../TransactionBox"; // plasmic-import: 9xs0oaOWmddY/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: OG1SoduAPhRs/codeComponent
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadioButton } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Dialog2 from "../../Dialog2"; // plasmic-import: hyFNHR4bCLIY/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicTransaction.module.css"; // plasmic-import: Ic-wT0cLUqQN/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Setting5Icon from "./icons/PlasmicIcon__Setting5"; // plasmic-import: L7zh2uJLRuwn/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: DDtlhnj6MIF5/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: bISqj4Aubh8D/icon
import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: fgZ7Egzk3oz_/icon
import ReceiptIcon from "./icons/PlasmicIcon__Receipt"; // plasmic-import: w-6fhMSwiFWW/icon

createPlasmicElementProxy;

export type PlasmicTransaction__VariantMembers = {
  no: "no";
};
export type PlasmicTransaction__VariantsArgs = {
  no?: SingleBooleanChoiceArg<"no">;
};
type VariantPropType = keyof PlasmicTransaction__VariantsArgs;
export const PlasmicTransaction__VariantProps = new Array<VariantPropType>(
  "no"
);

export type PlasmicTransaction__ArgsType = {};
type ArgPropType = keyof PlasmicTransaction__ArgsType;
export const PlasmicTransaction__ArgProps = new Array<ArgPropType>();

export type PlasmicTransaction__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  header?: Flex__<typeof Header>;
  reveal?: Flex__<typeof Reveal>;
  wallet?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  button2?: Flex__<typeof Button>;
  button3?: Flex__<typeof Button>;
  apiRequest?: Flex__<typeof ApiRequest>;
  modal2?: Flex__<typeof AntdModal>;
  radioGroup2?: Flex__<typeof AntdRadioGroup>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  button5?: Flex__<typeof Button>;
  footer2?: Flex__<"div">;
  snapp3?: Flex__<"div">;
  vuesaxBoldHome2?: Flex__<"div">;
  charge3?: Flex__<"div">;
  vuesaxBoldReceipt3?: Flex__<"div">;
  timer?: Flex__<typeof Timer>;
  sideEffect?: Flex__<typeof SideEffect>;
  dialog2?: Flex__<typeof Dialog2>;
};

export interface DefaultTransactionProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTransaction__RenderFunc(props: {
  variants: PlasmicTransaction__VariantsArgs;
  args: PlasmicTransaction__ArgsType;
  overrides: PlasmicTransaction__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "no",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.no
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userinfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userbabarcat");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "page",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "transaction",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.tabButton || "charge";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "radioGroup2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "month"
      },
      {
        path: "list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    type: "irancell_charge",
                    mobile: "09037415754",
                    createdAt: "2024-10-16 22:58:44",
                    price: 1500,
                    originId: "6565"
                  },
                  {
                    type: "irancell_charge",
                    mobile: "09037415755",
                    createdAt: "2024-9-16 22:59:44",
                    price: 1510,
                    originId: "6566"
                  },
                  {
                    type: "irancell_charge",
                    mobile: "09037415756",
                    createdAt: "2024-9-16 23:00:44",
                    price: 1520,
                    originId: "6567"
                  },
                  {
                    type: "irancell_charge",
                    mobile: "09037415757",
                    createdAt: "2024-1-16 23:01:44",
                    price: 1530,
                    originId: "6568"
                  },
                  {
                    type: "irancell_charge",
                    mobile: "09037415758",
                    createdAt: "2024-5-16 23:02:44",
                    price: 1540,
                    originId: "6569"
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "fiterlist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.list;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "transaction2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(sessionStorage.getItem("userbabarcatToken"))
                .value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button2.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button3.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button5.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "hasMore",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "scroll",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog2.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dialog2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root,
            {
              [sty.rootglobal_experiment_override]: hasVariant(
                globalVariants,
                "experiment",
                "override"
              ),
              [sty.rootno]: hasVariant($state, "no", "no")
            }
          )}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script src="https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.js"></script>'
            }
          />

          <section className={classNames(projectcss.all, sty.section__voHrV)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
              level={(() => {
                try {
                  return $state.userinfo.level;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              token={(() => {
                try {
                  return $state.token;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              userbabarcat={(() => {
                try {
                  return $state.userinfo;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {};
                  }
                  throw e;
                }
              })()}
            />
          </section>
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            className={classNames("__wab_instance", sty.reveal)}
            effect={"fade"}
            triggerOnce={true}
          >
            <div
              data-plasmic-name={"wallet"}
              data-plasmic-override={overrides.wallet}
              className={classNames(projectcss.all, sty.wallet)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__iJtS)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ys9Ub
                  )}
                >
                  {
                    "\u0647\u0645\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627"
                  }
                </div>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button, {
                    [sty.buttonno]: hasVariant($state, "no", "no")
                  })}
                  color={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "softGreen"
                      : "softGreen"
                  }
                  endIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Setting5Icon
                          : Setting5Icon
                      }
                      className={classNames(projectcss.all, sty.svg__gpEts)}
                      role={"img"}
                    />
                  }
                  isDisabled={hasVariant($state, "no", "no") ? true : undefined}
                  loadingviow={generateStateValueProp($state, [
                    "button",
                    "loadingviow"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModal2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal2", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModal2Open"] != null &&
                      typeof $steps["updateModal2Open"] === "object" &&
                      typeof $steps["updateModal2Open"].then === "function"
                    ) {
                      $steps["updateModal2Open"] = await $steps[
                        "updateModal2Open"
                      ];
                    }
                  }}
                  onLoadingviowChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "button",
                        "loadingviow"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showEndIcon={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9QzBb
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0641\u06cc\u0644\u062a\u0631 \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627"
                      : "\u0641\u06cc\u0644\u062a\u0631 \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627"}
                  </div>
                </Button>
              </div>
              <TabsContainer
                data-plasmic-name={"tabsContainer"}
                data-plasmic-override={overrides.tabsContainer}
                initialKey={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "charge"
                    : "charge"
                }
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7P6N7
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dI8Fs
                        )}
                      >
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__grleN
                          )}
                          tabKey={"charge"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pA9O9
                            )}
                            onMouseDown={async event => {
                              const $steps = {};

                              $steps["updateHasMore"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["hasMore"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateHasMore"] != null &&
                                typeof $steps["updateHasMore"] === "object" &&
                                typeof $steps["updateHasMore"].then ===
                                  "function"
                              ) {
                                $steps["updateHasMore"] = await $steps[
                                  "updateHasMore"
                                ];
                              }

                              $steps["updateList"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["list"]
                                      },
                                      operation: 0,
                                      value: []
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateList"] != null &&
                                typeof $steps["updateList"] === "object" &&
                                typeof $steps["updateList"].then === "function"
                              ) {
                                $steps["updateList"] = await $steps[
                                  "updateList"
                                ];
                              }

                              $steps["updateScroll"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["scroll"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateScroll"] != null &&
                                typeof $steps["updateScroll"] === "object" &&
                                typeof $steps["updateScroll"].then ===
                                  "function"
                              ) {
                                $steps["updateScroll"] = await $steps[
                                  "updateScroll"
                                ];
                              }

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "charge"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }

                              $steps["updatePage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["page"]
                                      },
                                      operation: 0,
                                      value: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePage"] != null &&
                                typeof $steps["updatePage"] === "object" &&
                                typeof $steps["updatePage"].then === "function"
                              ) {
                                $steps["updatePage"] = await $steps[
                                  "updatePage"
                                ];
                              }
                            }}
                            onTouchStart={async event => {
                              const $steps = {};

                              $steps["updateHasMore"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["hasMore"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateHasMore"] != null &&
                                typeof $steps["updateHasMore"] === "object" &&
                                typeof $steps["updateHasMore"].then ===
                                  "function"
                              ) {
                                $steps["updateHasMore"] = await $steps[
                                  "updateHasMore"
                                ];
                              }

                              $steps["updateList"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["list"]
                                      },
                                      operation: 0,
                                      value: []
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateList"] != null &&
                                typeof $steps["updateList"] === "object" &&
                                typeof $steps["updateList"].then === "function"
                              ) {
                                $steps["updateList"] = await $steps[
                                  "updateList"
                                ];
                              }

                              $steps["updateScroll"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["scroll"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateScroll"] != null &&
                                typeof $steps["updateScroll"] === "object" &&
                                typeof $steps["updateScroll"].then ===
                                  "function"
                              ) {
                                $steps["updateScroll"] = await $steps[
                                  "updateScroll"
                                ];
                              }

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "charge"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }

                              $steps["updatePage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["page"]
                                      },
                                      operation: 0,
                                      value: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePage"] != null &&
                                typeof $steps["updatePage"] === "object" &&
                                typeof $steps["updatePage"].then === "function"
                              ) {
                                $steps["updatePage"] = await $steps[
                                  "updatePage"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oarzD
                              )}
                            >
                              {
                                "\u062f\u0631\u0648\u0646 \u0628\u0631\u0646\u0627\u0645\u0647"
                              }
                            </div>
                          </div>
                        </TabButton>
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__x7TGo
                          )}
                          tabKey={"remittance"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rwt0S
                            )}
                            onMouseDown={async event => {
                              const $steps = {};

                              $steps["updateList"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["list"]
                                      },
                                      operation: 0,
                                      value: []
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateList"] != null &&
                                typeof $steps["updateList"] === "object" &&
                                typeof $steps["updateList"].then === "function"
                              ) {
                                $steps["updateList"] = await $steps[
                                  "updateList"
                                ];
                              }

                              $steps["updateScroll"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["scroll"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateScroll"] != null &&
                                typeof $steps["updateScroll"] === "object" &&
                                typeof $steps["updateScroll"].then ===
                                  "function"
                              ) {
                                $steps["updateScroll"] = await $steps[
                                  "updateScroll"
                                ];
                              }

                              $steps["updateHasMore"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["hasMore"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateHasMore"] != null &&
                                typeof $steps["updateHasMore"] === "object" &&
                                typeof $steps["updateHasMore"].then ===
                                  "function"
                              ) {
                                $steps["updateHasMore"] = await $steps[
                                  "updateHasMore"
                                ];
                              }

                              $steps["updatePage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["page"]
                                      },
                                      operation: 0,
                                      value: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePage"] != null &&
                                typeof $steps["updatePage"] === "object" &&
                                typeof $steps["updatePage"].then === "function"
                              ) {
                                $steps["updatePage"] = await $steps[
                                  "updatePage"
                                ];
                              }

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "remittance"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }
                            }}
                            onTouchStart={async event => {
                              const $steps = {};

                              $steps["updateList"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["list"]
                                      },
                                      operation: 0,
                                      value: []
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateList"] != null &&
                                typeof $steps["updateList"] === "object" &&
                                typeof $steps["updateList"].then === "function"
                              ) {
                                $steps["updateList"] = await $steps[
                                  "updateList"
                                ];
                              }

                              $steps["updateScroll"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["scroll"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateScroll"] != null &&
                                typeof $steps["updateScroll"] === "object" &&
                                typeof $steps["updateScroll"].then ===
                                  "function"
                              ) {
                                $steps["updateScroll"] = await $steps[
                                  "updateScroll"
                                ];
                              }

                              $steps["updateHasMore"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["hasMore"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateHasMore"] != null &&
                                typeof $steps["updateHasMore"] === "object" &&
                                typeof $steps["updateHasMore"].then ===
                                  "function"
                              ) {
                                $steps["updateHasMore"] = await $steps[
                                  "updateHasMore"
                                ];
                              }

                              $steps["updatePage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["page"]
                                      },
                                      operation: 0,
                                      value: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePage"] != null &&
                                typeof $steps["updatePage"] === "object" &&
                                typeof $steps["updatePage"].then === "function"
                              ) {
                                $steps["updatePage"] = await $steps[
                                  "updatePage"
                                ];
                              }

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "remittance"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bmP1N
                              )}
                            >
                              {"\u062d\u0648\u0627\u0644\u0647 \u0647\u0627"}
                            </div>
                          </div>
                        </TabButton>
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__u6GNm
                          )}
                          tabKey={"transaction"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aZjNb
                            )}
                            onMouseDown={async event => {
                              const $steps = {};

                              $steps["updateHasMore"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["hasMore"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateHasMore"] != null &&
                                typeof $steps["updateHasMore"] === "object" &&
                                typeof $steps["updateHasMore"].then ===
                                  "function"
                              ) {
                                $steps["updateHasMore"] = await $steps[
                                  "updateHasMore"
                                ];
                              }

                              $steps["updateScroll"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["scroll"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateScroll"] != null &&
                                typeof $steps["updateScroll"] === "object" &&
                                typeof $steps["updateScroll"].then ===
                                  "function"
                              ) {
                                $steps["updateScroll"] = await $steps[
                                  "updateScroll"
                                ];
                              }

                              $steps["updateList"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["list"]
                                      },
                                      operation: 0,
                                      value: []
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateList"] != null &&
                                typeof $steps["updateList"] === "object" &&
                                typeof $steps["updateList"].then === "function"
                              ) {
                                $steps["updateList"] = await $steps[
                                  "updateList"
                                ];
                              }

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "transaction"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }

                              $steps["updatePage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["page"]
                                      },
                                      operation: 0,
                                      value: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePage"] != null &&
                                typeof $steps["updatePage"] === "object" &&
                                typeof $steps["updatePage"].then === "function"
                              ) {
                                $steps["updatePage"] = await $steps[
                                  "updatePage"
                                ];
                              }
                            }}
                            onTouchStart={async event => {
                              const $steps = {};

                              $steps["updateHasMore"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["hasMore"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateHasMore"] != null &&
                                typeof $steps["updateHasMore"] === "object" &&
                                typeof $steps["updateHasMore"].then ===
                                  "function"
                              ) {
                                $steps["updateHasMore"] = await $steps[
                                  "updateHasMore"
                                ];
                              }

                              $steps["updateList"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["list"]
                                      },
                                      operation: 0,
                                      value: []
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateList"] != null &&
                                typeof $steps["updateList"] === "object" &&
                                typeof $steps["updateList"].then === "function"
                              ) {
                                $steps["updateList"] = await $steps[
                                  "updateList"
                                ];
                              }

                              $steps["updateScroll"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["scroll"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateScroll"] != null &&
                                typeof $steps["updateScroll"] === "object" &&
                                typeof $steps["updateScroll"].then ===
                                  "function"
                              ) {
                                $steps["updateScroll"] = await $steps[
                                  "updateScroll"
                                ];
                              }

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "transaction"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }

                              $steps["updatePage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["page"]
                                      },
                                      operation: 0,
                                      value: 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePage"] != null &&
                                typeof $steps["updatePage"] === "object" &&
                                typeof $steps["updatePage"].then === "function"
                              ) {
                                $steps["updatePage"] = await $steps[
                                  "updatePage"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uy6Ev
                              )}
                            >
                              {
                                "\u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627"
                              }
                            </div>
                          </div>
                        </TabButton>
                        <TabUnderline
                          data-plasmic-name={"tabUnderline"}
                          data-plasmic-override={overrides.tabUnderline}
                          className={classNames(
                            "__wab_instance",
                            sty.tabUnderline
                          )}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tvBAn
                        )}
                      >
                        <TabContent
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent__og3D5
                          )}
                          tabKey={"charge"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mJaif,
                              "your-scroll-box"
                            )}
                            onScroll={async event => {
                              const $steps = {};

                              $steps["runCode"] =
                                $state.hasMore && $state.scroll
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            var scrollTop =
                                              event.currentTarget.scrollTop;
                                            var list = event.currentTarget;
                                            window.list = list;
                                            if (
                                              scrollTop + list.clientHeight >=
                                              list.scrollHeight - 10
                                            ) {
                                              list.style.overflow = "hidden";
                                              $state.page++;
                                              return ($state.isLoading = true);
                                            }
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                            style={(() => {
                              try {
                                return {
                                  "overflow-y": "auto",
                                  "scroll-behavior": "smooth"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            {(
                              hasVariant($state, "no", "no")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                ? true
                                : (() => {
                                    try {
                                      return $state.list.length > 0;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            )
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.fiterlist;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <TransactionBox
                                      className={classNames(
                                        "__wab_instance",
                                        sty.transactionBox__aIvlR,
                                        {
                                          [sty.transactionBoxno__aIvlR7Cleb]:
                                            hasVariant($state, "no", "no")
                                        }
                                      )}
                                      key={currentIndex}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateDialog2Open"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "dialog2",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateDialog2Open"] != null &&
                                          typeof $steps["updateDialog2Open"] ===
                                            "object" &&
                                          typeof $steps["updateDialog2Open"]
                                            .then === "function"
                                        ) {
                                          $steps["updateDialog2Open"] =
                                            await $steps["updateDialog2Open"];
                                        }

                                        $steps["updateModalOpen2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["transaction2"]
                                                },
                                                operation: 0,
                                                value: currentItem
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateModalOpen2"] != null &&
                                          typeof $steps["updateModalOpen2"] ===
                                            "object" &&
                                          typeof $steps["updateModalOpen2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateModalOpen2"] =
                                            await $steps["updateModalOpen2"];
                                        }
                                      }}
                                      unnamedGroupOfVariants={(() => {
                                        try {
                                          return (() => {
                                            switch (true) {
                                              case currentItem.type.includes(
                                                "argin"
                                              ):
                                                return "sim";
                                              case currentItem.type.includes(
                                                "inte"
                                              ):
                                                return "intenet";
                                              case currentItem.type.includes(
                                                "snap"
                                              ):
                                                return "snap";
                                              case currentItem.type.includes(
                                                "package"
                                              ):
                                                return "pubg";
                                              case currentItem.type.includes(
                                                "bill"
                                              ):
                                                return "bill";
                                              default:
                                                return "";
                                            }
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "unnamedVariant";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ryyTd
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bPjsC
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  switch (true) {
                                                    case currentItem.type.includes(
                                                      "afghanistan_internet"
                                                    ):
                                                      return "بسته اینترنت افغانستان";
                                                    case currentItem.type.includes(
                                                      "argin"
                                                    ):
                                                      return "شارژ سیم کارت";
                                                    case currentItem.type.includes(
                                                      "inte"
                                                    ):
                                                      return "خرید بسته اینترنت";
                                                    case currentItem.type.includes(
                                                      "snap"
                                                    ):
                                                      return "خرید بسته اسنپ";
                                                    case currentItem.type.includes(
                                                      "package_UC"
                                                    ):
                                                      return "خرید بسته UC PUBG";
                                                    case currentItem.type.includes(
                                                      "package_likee"
                                                    ):
                                                      return "خرید الماس Likee";
                                                    case currentItem.type.includes(
                                                      "package_imo"
                                                    ):
                                                      return "خرید الماس imo";
                                                    case currentItem.type.includes(
                                                      "package_bigo-live"
                                                    ):
                                                      return "خرید الماس Bigo live";
                                                    case currentItem.type.includes(
                                                      "bill"
                                                    ):
                                                      return "پرداخت قبض";
                                                    case currentItem.type.includes(
                                                      "afghanistan_contact"
                                                    ):
                                                      return "بسته مکاله افغانستان";
                                                    default:
                                                      return "نوع ناشناخته";
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "\u0634\u0627\u0631\u0698 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a ";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___257Cd
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  switch (
                                                    currentItem.priceType
                                                  ) {
                                                    case "toman":
                                                      return (
                                                        (
                                                          currentItem.price *
                                                          1000
                                                        ).toLocaleString() +
                                                        " تومان "
                                                      );
                                                    case "dollar":
                                                      return (
                                                        currentItem.price.toLocaleString() +
                                                        " دلار "
                                                      );
                                                    case "afghani":
                                                      return (
                                                        currentItem.price.toLocaleString() +
                                                        " اففانی "
                                                      );
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "5000000 \u062a\u0648\u0645\u0627\u0646";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___4J1Lh
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__x3Wn7,
                                            "dateshow"
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  let createdAt = new Date(
                                                    currentItem.createdAt
                                                  );
                                                  let options = {
                                                    year: "numeric",
                                                    month: "2-digit",
                                                    day: "2-digit",
                                                    hour: "2-digit",
                                                    minute: "2-digit",
                                                    hour12: false
                                                  };
                                                  let faDateTime =
                                                    createdAt.toLocaleString(
                                                      "fa-IR-u-ca-persian",
                                                      options
                                                    );
                                                  return faDateTime;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "//";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </TransactionBox>
                                  );
                                })
                              : null}
                            {(() => {
                              try {
                                return (
                                  $state.list?.length == 0 &&
                                  $state.apiRequest?.loading == false
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___9LaBu)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"150px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/babarkat/images/image12.png",
                                  fullWidth: 450,
                                  fullHeight: 450,
                                  aspectRatio: undefined
                                }}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $state.apiRequest.loading;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qOmEq
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__t20Ar,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rsEP,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___5ITqL,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__htEuw,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__lmXcb,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__l6ZoF,
                                    "shimmer"
                                  )}
                                />
                              </div>
                            ) : null}
                          </div>
                        </TabContent>
                        <TabContent
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent__hHaCh
                          )}
                          tabKey={"remittance"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oKkyj,
                              "your-scroll-box"
                            )}
                            onScroll={async event => {
                              const $steps = {};

                              $steps["runCode"] =
                                $state.hasMore && $state.scroll
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            var scrollTop =
                                              event.currentTarget.scrollTop;
                                            var list = event.currentTarget;
                                            window.list = list;
                                            if (
                                              scrollTop + list.clientHeight >=
                                              list.scrollHeight - 10
                                            ) {
                                              list.style.overflow = "hidden";
                                              $state.page++;
                                              return ($state.isLoading = true);
                                            }
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                            style={(() => {
                              try {
                                return {
                                  "overflow-y": "auto",
                                  "scroll-behavior": "smooth"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            {(
                              hasVariant($state, "no", "no")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                ? true
                                : (() => {
                                    try {
                                      return $state.list.length > 0;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            )
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.fiterlist;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <TransactionBox
                                      className={classNames(
                                        "__wab_instance",
                                        sty.transactionBox__rYx6I,
                                        {
                                          [sty.transactionBoxno__rYx6I7Cleb]:
                                            hasVariant($state, "no", "no")
                                        }
                                      )}
                                      key={currentIndex}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateDialog2Open"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "dialog2",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateDialog2Open"] != null &&
                                          typeof $steps["updateDialog2Open"] ===
                                            "object" &&
                                          typeof $steps["updateDialog2Open"]
                                            .then === "function"
                                        ) {
                                          $steps["updateDialog2Open"] =
                                            await $steps["updateDialog2Open"];
                                        }

                                        $steps["updateModalOpen2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["transaction2"]
                                                },
                                                operation: 0,
                                                value: currentItem
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateModalOpen2"] != null &&
                                          typeof $steps["updateModalOpen2"] ===
                                            "object" &&
                                          typeof $steps["updateModalOpen2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateModalOpen2"] =
                                            await $steps["updateModalOpen2"];
                                        }
                                      }}
                                      unnamedGroupOfVariants={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "walet"
                                          : "walet"
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__tk8Ms
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__wKvnP
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return "حواله وجه";
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "\u0634\u0627\u0631\u0698 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a ";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cwUCz
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  switch (currentItem.type) {
                                                    case "toman":
                                                      return (
                                                        (
                                                          currentItem.amount *
                                                          1000
                                                        ).toLocaleString() +
                                                        " تومان "
                                                      );
                                                    case "dollar":
                                                      return (
                                                        currentItem.amount.toLocaleString() +
                                                        " دلار "
                                                      );
                                                    case "afghani":
                                                      return (
                                                        currentItem.amount.toLocaleString() +
                                                        " اففانی "
                                                      );
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "--";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__vFdJv
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___55Kcq,
                                            "dateshow"
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.createdAtFa
                                                  .split("-")
                                                  .join("/");
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "1403/05/07 10:20";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </TransactionBox>
                                  );
                                })
                              : null}
                            {(() => {
                              try {
                                return (
                                  $state.list?.length == 0 &&
                                  $state.apiRequest?.loading == false
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__mcns8)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"150px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/babarkat/images/image12.png",
                                  fullWidth: 450,
                                  fullHeight: 450,
                                  aspectRatio: undefined
                                }}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $state.apiRequest.loading;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__q0C45
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hxwt7,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__tpLwX,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___6JRie,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__w7Tkp,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___4Fbvz,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__s4OWe,
                                    "shimmer"
                                  )}
                                />
                              </div>
                            ) : null}
                          </div>
                        </TabContent>
                        <TabContent
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent__wy0Ga
                          )}
                          tabKey={"transaction"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nJfBg,
                              "your-scroll-box"
                            )}
                            onScroll={async event => {
                              const $steps = {};

                              $steps["runCode"] =
                                $state.hasMore && $state.scroll
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            var scrollTop =
                                              event.currentTarget.scrollTop;
                                            var list = event.currentTarget;
                                            window.list = list;
                                            if (
                                              scrollTop + list.clientHeight >=
                                              list.scrollHeight - 10
                                            ) {
                                              list.style.overflow = "hidden";
                                              $state.page++;
                                              return ($state.isLoading = true);
                                            }
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                            style={(() => {
                              try {
                                return {
                                  "overflow-y": "auto",
                                  "scroll-behavior": "smooth"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            {(
                              hasVariant($state, "no", "no")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                ? true
                                : (() => {
                                    try {
                                      return $state.list.length > 0;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            )
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.fiterlist;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <TransactionBox
                                      className={classNames(
                                        "__wab_instance",
                                        sty.transactionBox__h1JyW,
                                        {
                                          [sty.transactionBoxno__h1JyW7Cleb]:
                                            hasVariant($state, "no", "no")
                                        }
                                      )}
                                      key={currentIndex}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateModalOpen2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["transaction2"]
                                                },
                                                operation: 0,
                                                value: currentItem
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateModalOpen2"] != null &&
                                          typeof $steps["updateModalOpen2"] ===
                                            "object" &&
                                          typeof $steps["updateModalOpen2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateModalOpen2"] =
                                            await $steps["updateModalOpen2"];
                                        }

                                        $steps["updateDialog2Open"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "dialog2",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateDialog2Open"] != null &&
                                          typeof $steps["updateDialog2Open"] ===
                                            "object" &&
                                          typeof $steps["updateDialog2Open"]
                                            .then === "function"
                                        ) {
                                          $steps["updateDialog2Open"] =
                                            await $steps["updateDialog2Open"];
                                        }
                                      }}
                                      unnamedGroupOfVariants={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "panel"
                                          : "panel"
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__agD6A
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___649Jp
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  if (
                                                    currentItem.transactionType.includes(
                                                      "واریز"
                                                    )
                                                  )
                                                    return "رسید" + " وجه";
                                                  else
                                                    return currentItem.transactionType;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "\u0634\u0627\u0631\u0698 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a ";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__dZxVm,
                                            "dateshow"
                                          )}
                                        >
                                          {hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          ) ? (
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (
                                                    (
                                                      currentItem.value * 1000
                                                    ).toLocaleString() +
                                                    " تومان "
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "--";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          ) : (
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (() => {
                                                    switch (currentItem.type) {
                                                      case "toman":
                                                        return (
                                                          (
                                                            currentItem.value *
                                                            1000
                                                          ).toLocaleString() +
                                                          " تومان "
                                                        );
                                                      case "dollar":
                                                        return (
                                                          currentItem.value.toLocaleString() +
                                                          " دلار "
                                                        );
                                                      case "afghani":
                                                        return (
                                                          currentItem.value.toLocaleString() +
                                                          " اففانی "
                                                        );
                                                    }
                                                  })();
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "--";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          )}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__spOZh
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___5HyOf,
                                            "dateshow"
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.createdAtFa
                                                  .split("-")
                                                  .join("/");
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "--";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </TransactionBox>
                                  );
                                })
                              : null}
                            {(() => {
                              try {
                                return (
                                  $state.list?.length == 0 &&
                                  $state.apiRequest?.loading == false
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___9FNsK)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"150px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/babarkat/images/image12.png",
                                  fullWidth: 450,
                                  fullHeight: 450,
                                  aspectRatio: undefined
                                }}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $state.apiRequest.loading;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pJbgr
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__npu1H,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__mvEwk,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___7L5Uc,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___5W,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___97Q7O,
                                    "shimmer"
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__iqG8J,
                                    "shimmer"
                                  )}
                                />
                              </div>
                            ) : null}
                          </div>
                        </TabContent>
                      </div>
                    </div>
                  )}
                </DataCtxReader__>
              </TabsContainer>
              <section
                className={classNames(projectcss.all, sty.section__hIbjb)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___5MnOu)}
                >
                  <Button
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    className={classNames("__wab_instance", sty.button2)}
                    color={"sand"}
                    loadingviow={generateStateValueProp($state, [
                      "button2",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updatePage"] =
                        $state.page > 0
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["page"]
                                },
                                operation: 0,
                                value: $state.page - 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updatePage"] != null &&
                        typeof $steps["updatePage"] === "object" &&
                        typeof $steps["updatePage"].then === "function"
                      ) {
                        $steps["updatePage"] = await $steps["updatePage"];
                      }

                      $steps["refreshData"] =
                        $state.page > 0
                          ? (() => {
                              const actionArgs = {
                                queryInvalidation: ["plasmic_refresh_all"]
                              };
                              return (async ({ queryInvalidation }) => {
                                if (!queryInvalidation) {
                                  return;
                                }
                                await plasmicInvalidate(queryInvalidation);
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button2",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    shape={"rounded"}
                    showStartIcon={true}
                    size={"compact"}
                    startIcon={
                      <Icon25Icon
                        className={classNames(projectcss.all, sty.svg___1Ywet)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pIwTf
                      )}
                    >
                      {"\u0635\u0641\u062d\u0647 \u0642\u0628\u0644"}
                    </div>
                  </Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gKy0S
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "صفحه " + ($state.page + 1);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Button
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    className={classNames("__wab_instance", sty.button3)}
                    color={"sand"}
                    endIcon={
                      <Icon26Icon
                        className={classNames(projectcss.all, sty.svg__lmrGr)}
                        role={"img"}
                      />
                    }
                    loadingviow={generateStateValueProp($state, [
                      "button3",
                      "loadingviow"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updatePage"] = (() => {
                        if ($state.apiRequest.data != null)
                          return $state.apiRequest.data[0].list != [];
                      })()
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["page"]
                              },
                              operation: 0,
                              value: $state.page + 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePage"] != null &&
                        typeof $steps["updatePage"] === "object" &&
                        typeof $steps["updatePage"].then === "function"
                      ) {
                        $steps["updatePage"] = await $steps["updatePage"];
                      }

                      $steps["refreshData"] = (() => {
                        if ($state.apiRequest.data != null)
                          return $state.apiRequest.data[0].list != [];
                      })()
                        ? (() => {
                            const actionArgs = {
                              queryInvalidation: ["plasmic_refresh_all"]
                            };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["refreshData"] != null &&
                        typeof $steps["refreshData"] === "object" &&
                        typeof $steps["refreshData"].then === "function"
                      ) {
                        $steps["refreshData"] = await $steps["refreshData"];
                      }
                    }}
                    onLoadingviowChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button3",
                          "loadingviow"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    shape={"rounded"}
                    showEndIcon={true}
                    size={"compact"}
                    startIcon={
                      <Icon25Icon
                        className={classNames(projectcss.all, sty.svg__od3Qo)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kwzKn
                      )}
                    >
                      {"\u0635\u0641\u062d\u0647 \u0628\u0639\u062f"}
                    </div>
                  </Button>
                </div>
              </section>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__z3HRp, {
                [sty.freeBoxno__z3HRp7Cleb]: hasVariant($state, "no", "no")
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__sW4Gv)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/babarkat/images/image12.png",
                  fullWidth: 450,
                  fullHeight: 450,
                  aspectRatio: undefined
                }}
              />
            </div>
          </Reveal>
          {(hasVariant($state, "no", "no") ? true : false) ? (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__bB4IY, {
                [sty.imgno__bB4IY7Cleb]: hasVariant($state, "no", "no")
              })}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/babarkat/images/image11.svg",
                fullWidth: 22,
                fullHeight: 22,
                aspectRatio: 1
              }}
            />
          ) : null}
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);

              (async loading => {
                const $steps = {};
              }).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};

                $steps["updateList"] =
                  $state.apiRequest?.data?.[0] && $state.isLoading == false
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["list"]
                          },
                          operation: 0,
                          value: $state.apiRequest.data[0].list
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateList"] != null &&
                  typeof $steps["updateList"] === "object" &&
                  typeof $steps["updateList"].then === "function"
                ) {
                  $steps["updateList"] = await $steps["updateList"];
                }

                $steps["runCode"] =
                  $state.apiRequest?.data?.[0] && $state.isLoading == true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              $state.scroll = false;
                              $state.isLoading = false;
                              var newData = $state.apiRequest.data[0].list;
                              if (!newData || newData.length == 0) {
                                $state.hasMore = false;
                              } else {
                                $state.list = $state.list.concat(newData);
                              }
                              if (window.list) {
                                window.list.style.overflow = "auto";
                                return (window.list.scrollTop =
                                  window.list.scrollTop + 200);
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["invokeGlobalAction"] =
                  $state.hasMore == false
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            "\u062a\u0631\u0627\u06a9\u0646\u0634 \u062f\u06cc\u06af\u0631\u06cc \u0628\u0631\u0627\u06cc \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f",
                            "bottom-center"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateScroll"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["scroll"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateScroll"] != null &&
                  typeof $steps["updateScroll"] === "object" &&
                  typeof $steps["updateScroll"].then === "function"
                ) {
                  $steps["updateScroll"] = await $steps["updateScroll"];
                }
              }).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return {
                  userToken: $state.token,
                  page: $state.page,
                  transaction:
                    $state.transaction == undefined
                      ? "charge"
                      : $state.transaction
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            shouldFetch={true}
            url={"https://n8n.babarkat.com/webhook/Babarkat/transaction"}
          />

          <AntdModal
            data-plasmic-name={"modal2"}
            data-plasmic-override={overrides.modal2}
            className={classNames("__wab_instance", sty.modal2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_W0wxY-8tf7x5"]]: true
            })}
            modalScopeClassName={sty["modal2__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal2", "open"])}
            title={null}
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_hwYqJGT04Vii"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__bqfd1)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s6YkF
                )}
              >
                {"\u0641\u06cc\u0644\u062a\u0631"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__gsX)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gAu
                )}
              >
                {"\u062a\u0627\u0631\u06cc\u062e "}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__pzs0K)}>
                <AntdRadioGroup
                  data-plasmic-name={"radioGroup2"}
                  data-plasmic-override={overrides.radioGroup2}
                  className={classNames("__wab_instance", sty.radioGroup2)}
                  defaultValue={"month"}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "radioGroup2",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  optionType={"button"}
                  options={(() => {
                    const __composite = [
                      { value: null, label: null },
                      { value: null, label: null },
                      { value: null, label: null },
                      { label: null, value: null }
                    ];
                    __composite["0"]["value"] = "all";
                    __composite["0"]["label"] = "\u0647\u0645\u0647";
                    __composite["1"]["value"] = "transaction";
                    __composite["1"]["label"] = "\u067e\u0646\u0644";
                    __composite["2"]["value"] = "charge";
                    __composite["2"]["label"] = "\u0634\u0627\u0631\u0698";
                    __composite["3"]["label"] =
                      "\u0627\u06cc\u0646\u062a\u0631\u0646\u062a";
                    __composite["3"]["value"] = "internet";
                    return __composite;
                  })()}
                  useChildren={true}
                  value={generateStateValueProp($state, [
                    "radioGroup2",
                    "value"
                  ])}
                >
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__yCeNc
                    )}
                    value={"month"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mR4Rs
                      )}
                    >
                      {"\u0645\u0627\u0647 \u062c\u0627\u0631\u06cc"}
                    </div>
                  </AntdRadioButton>
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__qJuQa
                    )}
                    value={"1month"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v3Oj0
                      )}
                    >
                      {"\u06cc\u06a9 \u0645\u0627\u0647"}
                    </div>
                  </AntdRadioButton>
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__daHDy
                    )}
                    value={"2month"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ecdsN
                      )}
                    >
                      {"\u062f\u0648 \u0645\u0627\u0647"}
                    </div>
                  </AntdRadioButton>
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__aiZg8
                    )}
                    value={"3month"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t2CRc
                      )}
                    >
                      {"\u0633\u0647 \u0645\u0627\u0647"}
                    </div>
                  </AntdRadioButton>
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__nhJh1
                    )}
                    value={"6month"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t8JEi
                      )}
                    >
                      {"\u0634\u0634 \u0645\u0627\u0647"}
                    </div>
                  </AntdRadioButton>
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__jn67C
                    )}
                    value={"year"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__he5Cm
                      )}
                    >
                      {"\u06cc\u06a9 \u0633\u0627\u0644"}
                    </div>
                  </AntdRadioButton>
                </AntdRadioGroup>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xjOHi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xa1P
                )}
              >
                {"\u0628\u0631\u0686\u0633\u0628"}
              </div>
              <AntdRadioGroup
                data-plasmic-name={"radioGroup"}
                data-plasmic-override={overrides.radioGroup}
                className={classNames("__wab_instance", sty.radioGroup)}
                defaultValue={"all"}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "radioGroup",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                optionType={"button"}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null },
                    { label: null, value: null }
                  ];
                  __composite["0"]["value"] = "all";
                  __composite["0"]["label"] = "\u0647\u0645\u0647";
                  __composite["1"]["value"] = "transaction";
                  __composite["1"]["label"] = "\u067e\u0646\u0644";
                  __composite["2"]["value"] = "charge";
                  __composite["2"]["label"] = "\u0634\u0627\u0631\u0698";
                  __composite["3"]["label"] =
                    "\u0627\u06cc\u0646\u062a\u0631\u0646\u062a";
                  __composite["3"]["value"] = "internet";
                  return __composite;
                })()}
                useChildren={true}
                value={generateStateValueProp($state, ["radioGroup", "value"])}
              >
                <AntdRadioButton
                  className={classNames(
                    "__wab_instance",
                    sty.radioButton__rkmXy
                  )}
                  value={"all"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ajdb3
                    )}
                  >
                    {"\u0647\u0645\u0647"}
                  </div>
                </AntdRadioButton>
                <AntdRadioButton
                  className={classNames(
                    "__wab_instance",
                    sty.radioButton__aRl9T
                  )}
                  value={"internet"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uTf2B
                    )}
                  >
                    {"\u0627\u06cc\u0646\u062a\u0631\u0646\u062a"}
                  </div>
                </AntdRadioButton>
                <AntdRadioButton
                  className={classNames(
                    "__wab_instance",
                    sty.radioButton__p8Ssk
                  )}
                  value={"charge"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8I7Dz
                    )}
                  >
                    {"\u0634\u0627\u0631\u0698"}
                  </div>
                </AntdRadioButton>
                <AntdRadioButton
                  className={classNames(
                    "__wab_instance",
                    sty.radioButton__tdAc8
                  )}
                  value={"transaction"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wiz44
                    )}
                  >
                    {"\u067e\u0646\u0644"}
                  </div>
                </AntdRadioButton>
              </AntdRadioGroup>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___73HFh)}>
              <Button
                data-plasmic-name={"button5"}
                data-plasmic-override={overrides.button5}
                className={classNames("__wab_instance", sty.button5)}
                color={"green"}
                loadingviow={generateStateValueProp($state, [
                  "button5",
                  "loadingviow"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModal2Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal2", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModal2Open"] != null &&
                    typeof $steps["updateModal2Open"] === "object" &&
                    typeof $steps["updateModal2Open"].then === "function"
                  ) {
                    $steps["updateModal2Open"] = await $steps[
                      "updateModal2Open"
                    ];
                  }

                  $steps["updateFiterlist"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fiterlist"]
                          },
                          operation: 0,
                          value: (() => {
                            switch ($state.radioGroup2.value) {
                              case "month":
                                const startOfCurrentMonth = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth(),
                                  1
                                );
                                return $state.list.filter(
                                  item =>
                                    new Date(item.createdAt) >=
                                    startOfCurrentMonth
                                );
                              case "1month":
                                const startOfThisMonth = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth(),
                                  1
                                );
                                const startOfPreviousMonth = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth() - 1,
                                  1
                                );
                                return $state.list.filter(item => {
                                  const itemDate = new Date(item.createdAt);
                                  return (
                                    itemDate >= startOfPreviousMonth &&
                                    itemDate < startOfThisMonth
                                  );
                                });
                              case "2month":
                                const startOfTwoMonthsAgo = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth() - 2,
                                  1
                                );
                                return $state.list.filter(
                                  item =>
                                    new Date(item.createdAt) >=
                                    startOfTwoMonthsAgo
                                );
                              case "3month":
                                const startOfThreeMonthsAgo = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth() - 3,
                                  1
                                );
                                return $state.list.filter(
                                  item =>
                                    new Date(item.createdAt) >=
                                    startOfThreeMonthsAgo
                                );
                              case "6month":
                                const startOfSixMonthsAgo = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth() - 6,
                                  1
                                );
                                return $state.list.filter(
                                  item =>
                                    new Date(item.createdAt) >=
                                    startOfSixMonthsAgo
                                );
                              case "year":
                                const startOfOneYearAgo = new Date(
                                  new Date().getFullYear() - 1,
                                  new Date().getMonth(),
                                  1
                                );
                                return $state.list.filter(
                                  item =>
                                    new Date(item.createdAt) >=
                                    startOfOneYearAgo
                                );
                              default:
                                return $state.list;
                            }
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFiterlist"] != null &&
                    typeof $steps["updateFiterlist"] === "object" &&
                    typeof $steps["updateFiterlist"].then === "function"
                  ) {
                    $steps["updateFiterlist"] = await $steps["updateFiterlist"];
                  }
                }}
                onLoadingviowChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "button5",
                      "loadingviow"
                    ])(eventArgs[0]);
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jb9Yl
                  )}
                >
                  {"\u062a\u0627\u06cc\u06cc\u062f"}
                </div>
              </Button>
            </div>
          </AntdModal>
          <section className={classNames(projectcss.all, sty.section__xjf2B)}>
            {(() => {
              try {
                return $state.isLoading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <section
                className={classNames(projectcss.all, sty.section__q0ScM)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fm5Z6)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bzzA
                    )}
                  >
                    {
                      "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__mf21Q,
                      "line-container"
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__j05RL,
                        "line line-1"
                      )}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2ORbZ,
                        "line line-2"
                      )}
                    />
                  </div>
                </div>
              </section>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__goJzD)}>
              <div
                data-plasmic-name={"footer2"}
                data-plasmic-override={overrides.footer2}
                className={classNames(projectcss.all, sty.footer2)}
              >
                <div
                  data-plasmic-name={"snapp3"}
                  data-plasmic-override={overrides.snapp3}
                  className={classNames(projectcss.all, sty.snapp3)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToHomepage"] = true
                      ? (() => {
                          const actionArgs = { destination: `/` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToHomepage"] != null &&
                      typeof $steps["goToHomepage"] === "object" &&
                      typeof $steps["goToHomepage"].then === "function"
                    ) {
                      $steps["goToHomepage"] = await $steps["goToHomepage"];
                    }
                  }}
                >
                  <div
                    data-plasmic-name={"vuesaxBoldHome2"}
                    data-plasmic-override={overrides.vuesaxBoldHome2}
                    className={classNames(projectcss.all, sty.vuesaxBoldHome2)}
                  >
                    <HomeIcon
                      className={classNames(projectcss.all, sty.svg__uWyC)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Ouys
                    )}
                  >
                    {"\u062e\u0627\u0646\u0647"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"charge3"}
                  data-plasmic-override={overrides.charge3}
                  className={classNames(projectcss.all, sty.charge3)}
                >
                  <div
                    data-plasmic-name={"vuesaxBoldReceipt3"}
                    data-plasmic-override={overrides.vuesaxBoldReceipt3}
                    className={classNames(
                      projectcss.all,
                      sty.vuesaxBoldReceipt3
                    )}
                  >
                    <ReceiptIcon
                      className={classNames(projectcss.all, sty.svg__tKvxl)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h11E1
                    )}
                  >
                    {"\u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627"}
                  </div>
                </div>
              </div>
            </div>
          </section>
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={1}
            isRunning={true}
            onTick={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const item = JSON.parse(
                            sessionStorage.getItem("userbabarcatToken")
                          );
                          if (item == null) {
                            return window.open("/login");
                          } else {
                            const currentTime = new Date().getTime();
                            if (currentTime > item.expiration) {
                              return sessionStorage.removeItem(
                                "userbabarcatToken"
                              );
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            runWhileEditing={false}
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const item = JSON.parse(
                            sessionStorage.getItem("userbabarcatToken")
                          );
                          if (item == null) {
                            return window.open("/login");
                          } else {
                            const currentTime = new Date().getTime();
                            if (currentTime > item.expiration) {
                              return sessionStorage.removeItem(
                                "userbabarcatToken"
                              );
                            }
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <Dialog2
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            className={classNames("__wab_instance", sty.dialog2)}
            data={(() => {
              try {
                return (() => {
                  const input = $state.transaction2;
                  function formatAmount(currency, value) {
                    const result = {
                      type: "",
                      amount: value || 0
                    };
                    switch (currency) {
                      case "toman":
                        result.type = "تومان";
                        result.amount = (value || 0) * 1000;
                        break;
                      case "dollar":
                        result.type = "دلار";
                        break;
                      case "afghani":
                        result.type = "افغانی";
                        break;
                      case "lir":
                        result.type = "لیر";
                        break;
                      default:
                        result.type = "مبلغ";
                    }
                    return result;
                  }
                  if ($state.transaction === "transaction") {
                    const data = [];
                    if (input.transactionType) {
                      data.push({
                        text: "نوع تراکنش",
                        value: input.transactionType
                      });
                    }
                    if (input.receiver) {
                      data.push({
                        text: "گیرنده",
                        value: input.receiver
                      });
                    }
                    if (input.createdAtFa) {
                      data.push({
                        text: "تاریخ",
                        value: input.createdAtFa.trim()
                      });
                    }
                    data.push({
                      text: "نوع",
                      value: input.transactionType?.includes("واریز")
                        ? "رسید وجه"
                        : input.transactionType
                    });
                    const { type, amount } = formatAmount(
                      input.type,
                      input.value
                    );
                    const output = {
                      data,
                      amount: {
                        type,
                        text: "مبلغ",
                        value: amount.toLocaleString(),
                        amount
                      },
                      type: "transaction"
                    };
                    return output;
                  } else if ($state.transaction === "remittance") {
                    const data = [
                      {
                        text: "نوع",
                        value: "حواله وجه"
                      },
                      {
                        text: "فرستنده",
                        value: input.sender
                      },
                      {
                        text: "شماره تراکنش",
                        value: input.num?.toString()
                      },
                      {
                        text: "نرخ روز",
                        value: `${input.today_value_rate?.toString()} ${
                          formatAmount(input.type_2).type
                        }`
                      },
                      {
                        text: "مبلغ ارسالی",
                        value: `${input.amount?.toLocaleString()} ${
                          formatAmount(input.type_2).type
                        }`
                      },
                      {
                        text: "تاریخ ارسال",
                        value: input.createdAtFa
                      },
                      {
                        text: "مقصد",
                        value: input.state
                      }
                    ];

                    const { type, amount } = formatAmount(
                      input.type,
                      input.amount
                    );
                    const output = {
                      data,
                      amount: {
                        type,
                        text: "مبلغ دریافتی",
                        value: amount.toLocaleString(),
                        amount
                      },
                      type: "remittance"
                    };
                    return output;
                  } else if ($state.transaction === "charge") {
                    const typeMap = [
                      {
                        key: "afghanistan_internet",
                        label: "بسته اینترنت افغانستان"
                      },
                      {
                        key: "argin",
                        label: "شارژ سیم کارت"
                      },
                      {
                        key: "inte",
                        label: "خرید بسته اینترنت"
                      },
                      {
                        key: "snap",
                        label: "خرید بسته اسنپ"
                      },
                      {
                        key: "package_UC",
                        label: "خرید بسته UC PUBG"
                      },
                      {
                        key: "package_likee",
                        label: "خرید الماس Likee"
                      },
                      {
                        key: "package_imo",
                        label: "خرید الماس imo"
                      },
                      {
                        key: "package_bigo-live",
                        label: "خرید الماس Bigo live"
                      },
                      {
                        key: "bill",
                        label: "پرداخت قبض"
                      },
                      {
                        key: "afghanistan_contact",
                        label: "بسته مکاله افغانستان"
                      }
                    ];

                    function getTypeLabel(typeStr) {
                      const found = typeMap.find(t => typeStr?.includes(t.key));
                      return found ? found.label : "نوع ناشناخته";
                    }
                    let other = {};
                    try {
                      if (input.otherData) {
                        other = JSON.parse(input.otherData);
                      }
                    } catch (e) {
                      console.warn("otherData is not valid JSON:", e);
                    }
                    let faDateTime = "";
                    if (input.createdAt) {
                      const createdAt = new Date(input.createdAt);
                      faDateTime = createdAt.toLocaleString(
                        "fa-IR-u-ca-persian",
                        {
                          year: "numeric",
                          month: "2-digit",
                          day: "2-digit",
                          hour: "2-digit",
                          minute: "2-digit",
                          hour12: false
                        }
                      );
                    }
                    const data = [
                      {
                        text: "نوع",
                        value: getTypeLabel(input.type)
                      },
                      {
                        text: "موبایل",
                        value: input.mobile
                      },
                      {
                        text: "تاریخ",
                        value: faDateTime
                      }
                    ];

                    if (
                      input.type?.includes("package_") &&
                      other.userName &&
                      other.userId
                    ) {
                      data.push({
                        text: "نام کاربری",
                        value: other.userName
                      });
                      data.push({
                        text: "شناسه کاربر",
                        value: other.userId
                      });
                    } else if (
                      input.type?.includes("afghanistan_internet") &&
                      other.operators &&
                      other.namePack
                    ) {
                      data.push({
                        text: "اپراتور",
                        value: other.operators
                      });
                      data.push({
                        text: "بسته",
                        value: other.namePack
                      });
                    }
                    if (other.priceAfg) {
                      data.push({
                        text: "مبلغ شارژ",
                        value: other.priceAfg.toLocaleString() + " افغانی "
                      });
                    }
                    if (other.operatorAfg) {
                      data.push({
                        text: "اپراتور افغانستان",
                        value: other.operatorAfg
                      });
                    }
                    if (input.originId) {
                      data.push({
                        text: "شناسه تراکنش",
                        value: input.originId
                      });
                    }
                    const { type, amount } = formatAmount(
                      input.priceType,
                      input.price
                    );
                    const output = {
                      data,
                      amount: {
                        type,
                        text: "مبلغ پرداخت شده",
                        value: amount.toLocaleString(),
                        amount
                      },
                      type: input.type
                    };
                    return output;
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    data: [
                      {
                        text: "\u0645\u0648\u0631\u062f \u0627\u0648\u0644",
                        value: 100
                      },
                      {
                        text: "\u0645\u0648\u0631\u062f \u062f\u0648\u0645",
                        value: 200
                      },
                      {
                        text: "\u0645\u0648\u0631\u062f \u0633\u0648\u0645",
                        value: 300
                      },
                      {
                        text: "\u0645\u0648\u0631\u062f \u0686\u0647\u0627\u0631\u0645",
                        value: 400
                      },
                      {
                        text: "\u0645\u0648\u0631\u062f \u067e\u0646\u062c\u0645",
                        value: 500
                      }
                    ],
                    amount: {
                      type: "\u0627\u0641\u063a\u0627\u0646\u06cc",
                      text: "\u0645\u0628\u0644\u063a \u067e\u0631\u062f\u0627\u062e\u062a \u0634\u062f\u0647 ",
                      value: "500000",
                      amount: 1000
                    }
                  };
                }
                throw e;
              }
            })()}
            load={generateStateValueProp($state, ["dialog2", "load"])}
            onLoadChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog2", "load"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog2", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onTypeChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog2", "type"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["dialog2", "open"])}
            type={generateStateValueProp($state, ["dialog2", "type"])}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "header",
    "reveal",
    "wallet",
    "button",
    "tabsContainer",
    "tabUnderline",
    "button2",
    "button3",
    "apiRequest",
    "modal2",
    "radioGroup2",
    "radioGroup",
    "button5",
    "footer2",
    "snapp3",
    "vuesaxBoldHome2",
    "charge3",
    "vuesaxBoldReceipt3",
    "timer",
    "sideEffect",
    "dialog2"
  ],
  embedHtml: ["embedHtml"],
  header: ["header"],
  reveal: [
    "reveal",
    "wallet",
    "button",
    "tabsContainer",
    "tabUnderline",
    "button2",
    "button3"
  ],
  wallet: [
    "wallet",
    "button",
    "tabsContainer",
    "tabUnderline",
    "button2",
    "button3"
  ],
  button: ["button"],
  tabsContainer: ["tabsContainer", "tabUnderline"],
  tabUnderline: ["tabUnderline"],
  button2: ["button2"],
  button3: ["button3"],
  apiRequest: ["apiRequest"],
  modal2: ["modal2", "radioGroup2", "radioGroup", "button5"],
  radioGroup2: ["radioGroup2"],
  radioGroup: ["radioGroup"],
  button5: ["button5"],
  footer2: [
    "footer2",
    "snapp3",
    "vuesaxBoldHome2",
    "charge3",
    "vuesaxBoldReceipt3"
  ],
  snapp3: ["snapp3", "vuesaxBoldHome2"],
  vuesaxBoldHome2: ["vuesaxBoldHome2"],
  charge3: ["charge3", "vuesaxBoldReceipt3"],
  vuesaxBoldReceipt3: ["vuesaxBoldReceipt3"],
  timer: ["timer"],
  sideEffect: ["sideEffect"],
  dialog2: ["dialog2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  header: typeof Header;
  reveal: typeof Reveal;
  wallet: "div";
  button: typeof Button;
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  button2: typeof Button;
  button3: typeof Button;
  apiRequest: typeof ApiRequest;
  modal2: typeof AntdModal;
  radioGroup2: typeof AntdRadioGroup;
  radioGroup: typeof AntdRadioGroup;
  button5: typeof Button;
  footer2: "div";
  snapp3: "div";
  vuesaxBoldHome2: "div";
  charge3: "div";
  vuesaxBoldReceipt3: "div";
  timer: typeof Timer;
  sideEffect: typeof SideEffect;
  dialog2: typeof Dialog2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTransaction__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTransaction__VariantsArgs;
    args?: PlasmicTransaction__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTransaction__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTransaction__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTransaction__ArgProps,
          internalVariantPropNames: PlasmicTransaction__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTransaction__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTransaction";
  } else {
    func.displayName = `PlasmicTransaction.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sZQMbqXz9utLNaTnNb3uss"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicTransaction = Object.assign(
  // Top-level PlasmicTransaction renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    header: makeNodeComponent("header"),
    reveal: makeNodeComponent("reveal"),
    wallet: makeNodeComponent("wallet"),
    button: makeNodeComponent("button"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    apiRequest: makeNodeComponent("apiRequest"),
    modal2: makeNodeComponent("modal2"),
    radioGroup2: makeNodeComponent("radioGroup2"),
    radioGroup: makeNodeComponent("radioGroup"),
    button5: makeNodeComponent("button5"),
    footer2: makeNodeComponent("footer2"),
    snapp3: makeNodeComponent("snapp3"),
    vuesaxBoldHome2: makeNodeComponent("vuesaxBoldHome2"),
    charge3: makeNodeComponent("charge3"),
    vuesaxBoldReceipt3: makeNodeComponent("vuesaxBoldReceipt3"),
    timer: makeNodeComponent("timer"),
    sideEffect: makeNodeComponent("sideEffect"),
    dialog2: makeNodeComponent("dialog2"),

    // Metadata about props expected for PlasmicTransaction
    internalVariantProps: PlasmicTransaction__VariantProps,
    internalArgProps: PlasmicTransaction__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTransaction;
/* prettier-ignore-end */
