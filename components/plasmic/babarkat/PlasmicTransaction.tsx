// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: Ic-wT0cLUqQN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import TransactionBox from "../../TransactionBox"; // plasmic-import: 9xs0oaOWmddY/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Transaction2 from "../../Transaction2"; // plasmic-import: KdLckjkHArJ8/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: OG1SoduAPhRs/codeComponent
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadioButton } from "@plasmicpkgs/antd5/skinny/registerRadio";

import {
  ExperimentValue,
  useExperiment
} from "./PlasmicGlobalVariant__Experiment"; // plasmic-import: 0yNpRAZ9BHRO/globalVariant
import { useScreenVariants as useScreenVariantsosEvNkdp6Zt6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OSEvNkdp6ZT6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicTransaction.module.css"; // plasmic-import: Ic-wT0cLUqQN/css

import BabarkatlogoCopy2SvgIcon from "./icons/PlasmicIcon__BabarkatlogoCopy2Svg"; // plasmic-import: T8YZBqDbfTTx/icon
import GroupSvgIcon from "./icons/PlasmicIcon__GroupSvg"; // plasmic-import: 51hz8qmjnijI/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: XqFJUGsoKZel/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Setting5Icon from "./icons/PlasmicIcon__Setting5"; // plasmic-import: L7zh2uJLRuwn/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: DDtlhnj6MIF5/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon26Icon from "./icons/PlasmicIcon__Icon26"; // plasmic-import: bISqj4Aubh8D/icon
import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: fgZ7Egzk3oz_/icon
import ReceiptIcon from "./icons/PlasmicIcon__Receipt"; // plasmic-import: w-6fhMSwiFWW/icon

createPlasmicElementProxy;

export type PlasmicTransaction__VariantMembers = {
  no: "no";
};
export type PlasmicTransaction__VariantsArgs = {
  no?: SingleBooleanChoiceArg<"no">;
};
type VariantPropType = keyof PlasmicTransaction__VariantsArgs;
export const PlasmicTransaction__VariantProps = new Array<VariantPropType>(
  "no"
);

export type PlasmicTransaction__ArgsType = {};
type ArgPropType = keyof PlasmicTransaction__ArgsType;
export const PlasmicTransaction__ArgProps = new Array<ArgPropType>();

export type PlasmicTransaction__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  wallet?: Flex__<"div">;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  modal?: Flex__<typeof AntdModal>;
  transaction2?: Flex__<typeof Transaction2>;
  apiRequest?: Flex__<typeof ApiRequest>;
  modal2?: Flex__<typeof AntdModal>;
  radioGroup2?: Flex__<typeof AntdRadioGroup>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  footer2?: Flex__<"div">;
  snapp3?: Flex__<"div">;
  vuesaxBoldHome2?: Flex__<"div">;
  charge3?: Flex__<"div">;
  vuesaxBoldReceipt3?: Flex__<"div">;
};

export interface DefaultTransactionProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTransaction__RenderFunc(props: {
  variants: PlasmicTransaction__VariantsArgs;
  args: PlasmicTransaction__ArgsType;
  overrides: PlasmicTransaction__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "no",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.no
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userinfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userbabarcat");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "page",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "transaction",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.tabButton;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all"
      },
      {
        path: "radioGroup2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "month"
      },
      {
        path: "list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            type: "irancell_charge",
            mobile: "09037415754",
            createdAt: "2024-10-16 22:58:44",
            price: 1500,
            originId: "6565"
          },
          {
            type: "irancell_charge",
            mobile: "09037415755",
            createdAt: "2024-9-16 22:59:44",
            price: 1510,
            originId: "6566"
          },
          {
            type: "irancell_charge",
            mobile: "09037415756",
            createdAt: "2024-9-16 23:00:44",
            price: 1520,
            originId: "6567"
          },
          {
            type: "irancell_charge",
            mobile: "09037415757",
            createdAt: "2024-1-16 23:01:44",
            price: 1530,
            originId: "6568"
          },
          {
            type: "irancell_charge",
            mobile: "09037415758",
            createdAt: "2024-5-16 23:02:44",
            price: 1540,
            originId: "6569"
          }
        ]
      },
      {
        path: "fiterlist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.list;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "transaction2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    experiment: useExperiment(),
    screen: useScreenVariantsosEvNkdp6Zt6()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_experiment_override]: hasVariant(
                globalVariants,
                "experiment",
                "override"
              ),
              [sty.rootno]: hasVariant($state, "no", "no")
            }
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header, {
              [sty.headerno]: hasVariant($state, "no", "no")
            })}
          >
            <BabarkatlogoCopy2SvgIcon
              className={classNames(projectcss.all, sty.svg__x6IBd)}
              role={"img"}
            />

            <GroupSvgIcon
              className={classNames(projectcss.all, sty.svg__xu0XD)}
              role={"img"}
            />

            <Icon4Icon
              className={classNames(projectcss.all, sty.svg__tugfH)}
              role={"img"}
            />
          </div>
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            className={classNames("__wab_instance", sty.reveal)}
            effect={"fade"}
            triggerOnce={true}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"wallet"}
              data-plasmic-override={overrides.wallet}
              hasGap={true}
              className={classNames(projectcss.all, sty.wallet)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__iJtS)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ys9Ub
                  )}
                >
                  {
                    "\u0647\u0645\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627"
                  }
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__hp9E2, {
                    [sty.buttonno__hp9E27Cleb]: hasVariant($state, "no", "no")
                  })}
                  color={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "softGreen"
                      : "softGreen"
                  }
                  endIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Setting5Icon
                          : Setting5Icon
                      }
                      className={classNames(projectcss.all, sty.svg__gpEts)}
                      role={"img"}
                    />
                  }
                  isDisabled={hasVariant($state, "no", "no") ? true : undefined}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModal2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal2", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModal2Open"] != null &&
                      typeof $steps["updateModal2Open"] === "object" &&
                      typeof $steps["updateModal2Open"].then === "function"
                    ) {
                      $steps["updateModal2Open"] = await $steps[
                        "updateModal2Open"
                      ];
                    }
                  }}
                  showEndIcon={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9QzBb
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0641\u06cc\u0644\u062a\u0631 \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627"
                      : "\u0641\u06cc\u0644\u062a\u0631 \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627"}
                  </div>
                </Button>
              </div>
              <TabsContainer
                data-plasmic-name={"tabsContainer"}
                data-plasmic-override={overrides.tabsContainer}
                className={classNames("__wab_instance", sty.tabsContainer)}
                initialKey={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "charge"
                    : "charge"
                }
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7P6N7
                      )}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dI8Fs
                        )}
                      >
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__grleN
                          )}
                          tabKey={"charge"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pA9O9
                            )}
                            onMouseDown={async event => {
                              const $steps = {};

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "charge"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }

                              $steps["refreshData"] = true
                                ? (() => {
                                    const actionArgs = {
                                      queryInvalidation: ["plasmic_refresh_all"]
                                    };
                                    return (async ({ queryInvalidation }) => {
                                      if (!queryInvalidation) {
                                        return;
                                      }
                                      await plasmicInvalidate(
                                        queryInvalidation
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["refreshData"] != null &&
                                typeof $steps["refreshData"] === "object" &&
                                typeof $steps["refreshData"].then === "function"
                              ) {
                                $steps["refreshData"] = await $steps[
                                  "refreshData"
                                ];
                              }
                            }}
                            onTouchStart={async event => {
                              const $steps = {};

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "charge"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }

                              $steps["refreshData"] = true
                                ? (() => {
                                    const actionArgs = {
                                      queryInvalidation: ["plasmic_refresh_all"]
                                    };
                                    return (async ({ queryInvalidation }) => {
                                      if (!queryInvalidation) {
                                        return;
                                      }
                                      await plasmicInvalidate(
                                        queryInvalidation
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["refreshData"] != null &&
                                typeof $steps["refreshData"] === "object" &&
                                typeof $steps["refreshData"].then === "function"
                              ) {
                                $steps["refreshData"] = await $steps[
                                  "refreshData"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oarzD
                              )}
                            >
                              {
                                "\u062f\u0631\u0648\u0646 \u0628\u0631\u0646\u0627\u0645\u0647"
                              }
                            </div>
                          </div>
                        </TabButton>
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__x7TGo
                          )}
                          tabKey={"remittance"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rwt0S
                            )}
                            onMouseDown={async event => {
                              const $steps = {};

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "remittance"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }

                              $steps["refreshData"] = true
                                ? (() => {
                                    const actionArgs = {
                                      queryInvalidation: ["plasmic_refresh_all"]
                                    };
                                    return (async ({ queryInvalidation }) => {
                                      if (!queryInvalidation) {
                                        return;
                                      }
                                      await plasmicInvalidate(
                                        queryInvalidation
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["refreshData"] != null &&
                                typeof $steps["refreshData"] === "object" &&
                                typeof $steps["refreshData"].then === "function"
                              ) {
                                $steps["refreshData"] = await $steps[
                                  "refreshData"
                                ];
                              }
                            }}
                            onTouchStart={async event => {
                              const $steps = {};

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "remittance"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }

                              $steps["refreshData"] = true
                                ? (() => {
                                    const actionArgs = {
                                      queryInvalidation: ["plasmic_refresh_all"]
                                    };
                                    return (async ({ queryInvalidation }) => {
                                      if (!queryInvalidation) {
                                        return;
                                      }
                                      await plasmicInvalidate(
                                        queryInvalidation
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["refreshData"] != null &&
                                typeof $steps["refreshData"] === "object" &&
                                typeof $steps["refreshData"].then === "function"
                              ) {
                                $steps["refreshData"] = await $steps[
                                  "refreshData"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bmP1N
                              )}
                            >
                              {"\u062d\u0648\u0627\u0644\u0647 \u0647\u0627"}
                            </div>
                          </div>
                        </TabButton>
                        <TabButton
                          className={classNames(
                            "__wab_instance",
                            sty.tabButton__u6GNm
                          )}
                          tabKey={"transaction"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aZjNb
                            )}
                            onMouseDown={async event => {
                              const $steps = {};

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "transaction"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }

                              $steps["refreshData"] = true
                                ? (() => {
                                    const actionArgs = {
                                      queryInvalidation: ["plasmic_refresh_all"]
                                    };
                                    return (async ({ queryInvalidation }) => {
                                      if (!queryInvalidation) {
                                        return;
                                      }
                                      await plasmicInvalidate(
                                        queryInvalidation
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["refreshData"] != null &&
                                typeof $steps["refreshData"] === "object" &&
                                typeof $steps["refreshData"].then === "function"
                              ) {
                                $steps["refreshData"] = await $steps[
                                  "refreshData"
                                ];
                              }
                            }}
                            onTouchStart={async event => {
                              const $steps = {};

                              $steps["updateTransaction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["transaction"]
                                      },
                                      operation: 0,
                                      value: "transaction"
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTransaction"] != null &&
                                typeof $steps["updateTransaction"] ===
                                  "object" &&
                                typeof $steps["updateTransaction"].then ===
                                  "function"
                              ) {
                                $steps["updateTransaction"] = await $steps[
                                  "updateTransaction"
                                ];
                              }

                              $steps["refreshData"] = true
                                ? (() => {
                                    const actionArgs = {
                                      queryInvalidation: ["plasmic_refresh_all"]
                                    };
                                    return (async ({ queryInvalidation }) => {
                                      if (!queryInvalidation) {
                                        return;
                                      }
                                      await plasmicInvalidate(
                                        queryInvalidation
                                      );
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["refreshData"] != null &&
                                typeof $steps["refreshData"] === "object" &&
                                typeof $steps["refreshData"].then === "function"
                              ) {
                                $steps["refreshData"] = await $steps[
                                  "refreshData"
                                ];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uy6Ev
                              )}
                            >
                              {
                                "\u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627"
                              }
                            </div>
                          </div>
                        </TabButton>
                        <TabUnderline
                          data-plasmic-name={"tabUnderline"}
                          data-plasmic-override={overrides.tabUnderline}
                          className={classNames(
                            "__wab_instance",
                            sty.tabUnderline
                          )}
                        />
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tvBAn
                        )}
                      >
                        <TabContent
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent__og3D5
                          )}
                          tabKey={"charge"}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mJaif
                            )}
                          >
                            {(
                              hasVariant($state, "no", "no")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                ? true
                                : (() => {
                                    try {
                                      return $state.list.length > 0;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            )
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.fiterlist;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <TransactionBox
                                      className={classNames(
                                        "__wab_instance",
                                        sty.transactionBox__aIvlR,
                                        {
                                          [sty.transactionBoxno__aIvlR7Cleb]:
                                            hasVariant($state, "no", "no")
                                        }
                                      )}
                                      key={currentIndex}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateModalOpen"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "modal",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateModalOpen"] != null &&
                                          typeof $steps["updateModalOpen"] ===
                                            "object" &&
                                          typeof $steps["updateModalOpen"]
                                            .then === "function"
                                        ) {
                                          $steps["updateModalOpen"] =
                                            await $steps["updateModalOpen"];
                                        }

                                        $steps["updateModalOpen2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["transaction2"]
                                                },
                                                operation: 0,
                                                value: currentItem
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateModalOpen2"] != null &&
                                          typeof $steps["updateModalOpen2"] ===
                                            "object" &&
                                          typeof $steps["updateModalOpen2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateModalOpen2"] =
                                            await $steps["updateModalOpen2"];
                                        }
                                      }}
                                      unnamedGroupOfVariants={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? (() => {
                                              try {
                                                return (() => {
                                                  switch (true) {
                                                    case currentItem.type.includes(
                                                      "charge"
                                                    ):
                                                      return "sim";
                                                    case currentItem.type.includes(
                                                      "inte"
                                                    ):
                                                      return "intenet";
                                                    default:
                                                      return "";
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "sim";
                                                }
                                                throw e;
                                              }
                                            })()
                                          : (() => {
                                              try {
                                                return (() => {
                                                  switch (true) {
                                                    case currentItem.type.includes(
                                                      "argin"
                                                    ):
                                                      return "sim";
                                                    case currentItem.type.includes(
                                                      "inte"
                                                    ):
                                                      return "intenet";
                                                    default:
                                                      return "";
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "unnamedVariant";
                                                }
                                                throw e;
                                              }
                                            })()
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ryyTd
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bPjsC
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  switch (true) {
                                                    case currentItem.type.includes(
                                                      "argin"
                                                    ):
                                                      return "شارژ سیم کارت";
                                                    default:
                                                      return "نوع ناشناخته";
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "\u0634\u0627\u0631\u0698 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a ";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___257Cd
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  (
                                                    currentItem.price * 1000
                                                  ).toLocaleString() + " تومان "
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "5000000 \u062a\u0648\u0645\u0627\u0646";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___4J1Lh
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__x3Wn7,
                                            "dateshow"
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  let date =
                                                    currentItem.createdAt.split(
                                                      " "
                                                    )[0];
                                                  let time =
                                                    currentItem.createdAt.split(
                                                      " "
                                                    )[1];
                                                  let gy = parseInt(
                                                    date.split("-")[0]
                                                  );
                                                  let gm = parseInt(
                                                    date.split("-")[1]
                                                  );
                                                  let gd = parseInt(
                                                    date.split("-")[2]
                                                  );
                                                  let shamsiMonthDays = [
                                                    31, 31, 31, 31, 31, 31, 30,
                                                    30, 30, 30, 30, 29
                                                  ];

                                                  let miladiDaysInMonth = [
                                                    31, 28, 31, 30, 31, 30, 31,
                                                    31, 30, 31, 30, 31
                                                  ];

                                                  let isLeapYear =
                                                    gy % 4 === 0 &&
                                                    (gy % 100 !== 0 ||
                                                      gy % 400 === 0);
                                                  if (isLeapYear) {
                                                    miladiDaysInMonth[1] = 29;
                                                  }
                                                  let daysPassedMiladi = gd;
                                                  for (
                                                    let i = 0;
                                                    i < gm - 1;
                                                    i++
                                                  ) {
                                                    daysPassedMiladi +=
                                                      miladiDaysInMonth[i];
                                                  }
                                                  let shamsiNewYearDayInMiladi =
                                                    isLeapYear ? 80 : 79;
                                                  let daysPassedInShamsiYear =
                                                    daysPassedMiladi -
                                                    shamsiNewYearDayInMiladi;
                                                  if (
                                                    daysPassedInShamsiYear < 0
                                                  ) {
                                                    gy--;
                                                    isLeapYear =
                                                      gy % 4 === 0 &&
                                                      (gy % 100 !== 0 ||
                                                        gy % 400 === 0);
                                                    daysPassedInShamsiYear +=
                                                      isLeapYear ? 366 : 365;
                                                  }
                                                  let jy = gy - 621;
                                                  let jm = 0;
                                                  let jd =
                                                    daysPassedInShamsiYear;
                                                  for (
                                                    let i = 0;
                                                    i < shamsiMonthDays.length;
                                                    i++
                                                  ) {
                                                    if (
                                                      jd < shamsiMonthDays[i]
                                                    ) {
                                                      jm = i + 1;
                                                      jd++;
                                                      break;
                                                    } else {
                                                      jd -= shamsiMonthDays[i];
                                                    }
                                                  }
                                                  return (
                                                    time +
                                                    "   " +
                                                    jy +
                                                    "/" +
                                                    jm +
                                                    "/" +
                                                    jd
                                                  );
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "1403/05/07 10:20";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </TransactionBox>
                                  );
                                })
                              : null}
                            {(() => {
                              try {
                                return $state.list.length == 0;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___9LaBu)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"150px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/babarkat/images/image12.png",
                                  fullWidth: 450,
                                  fullHeight: 450,
                                  aspectRatio: undefined
                                }}
                              />
                            ) : null}
                          </Stack__>
                        </TabContent>
                        <TabContent
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent__hHaCh
                          )}
                          tabKey={"remittance"}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__c5S4T
                            )}
                          >
                            {(
                              hasVariant($state, "no", "no")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                ? true
                                : (() => {
                                    try {
                                      return $state.list.length > 0;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            )
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.fiterlist;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <TransactionBox
                                      className={classNames(
                                        "__wab_instance",
                                        sty.transactionBox__rYx6I,
                                        {
                                          [sty.transactionBoxno__rYx6I7Cleb]:
                                            hasVariant($state, "no", "no")
                                        }
                                      )}
                                      key={currentIndex}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateModalOpen"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "modal",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateModalOpen"] != null &&
                                          typeof $steps["updateModalOpen"] ===
                                            "object" &&
                                          typeof $steps["updateModalOpen"]
                                            .then === "function"
                                        ) {
                                          $steps["updateModalOpen"] =
                                            await $steps["updateModalOpen"];
                                        }

                                        $steps["updateModalOpen2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["transaction2"]
                                                },
                                                operation: 0,
                                                value: currentItem
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateModalOpen2"] != null &&
                                          typeof $steps["updateModalOpen2"] ===
                                            "object" &&
                                          typeof $steps["updateModalOpen2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateModalOpen2"] =
                                            await $steps["updateModalOpen2"];
                                        }
                                      }}
                                      unnamedGroupOfVariants={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "walet"
                                          : "walet"
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__tk8Ms
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__wKvnP
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return "حواله";
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "\u0634\u0627\u0631\u0698 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a ";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__cwUCz
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  currentItem.price.toLocaleString() +
                                                  " تومان "
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "5000000 \u062a\u0648\u0645\u0627\u0646";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__vFdJv
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___55Kcq,
                                            "dateshow"
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  let date =
                                                    currentItem.createdAt.split(
                                                      " "
                                                    )[0];
                                                  let time =
                                                    currentItem.createdAt.split(
                                                      " "
                                                    )[1];
                                                  let gy = parseInt(
                                                    date.split("-")[0]
                                                  );
                                                  let gm = parseInt(
                                                    date.split("-")[1]
                                                  );
                                                  let gd = parseInt(
                                                    date.split("-")[2]
                                                  );
                                                  let shamsiMonthDays = [
                                                    31, 31, 31, 31, 31, 31, 30,
                                                    30, 30, 30, 30, 29
                                                  ];

                                                  let miladiDaysInMonth = [
                                                    31, 28, 31, 30, 31, 30, 31,
                                                    31, 30, 31, 30, 31
                                                  ];

                                                  let isLeapYear =
                                                    gy % 4 === 0 &&
                                                    (gy % 100 !== 0 ||
                                                      gy % 400 === 0);
                                                  if (isLeapYear) {
                                                    miladiDaysInMonth[1] = 29;
                                                  }
                                                  let daysPassedMiladi = gd;
                                                  for (
                                                    let i = 0;
                                                    i < gm - 1;
                                                    i++
                                                  ) {
                                                    daysPassedMiladi +=
                                                      miladiDaysInMonth[i];
                                                  }
                                                  let shamsiNewYearDayInMiladi =
                                                    isLeapYear ? 80 : 79;
                                                  let daysPassedInShamsiYear =
                                                    daysPassedMiladi -
                                                    shamsiNewYearDayInMiladi;
                                                  if (
                                                    daysPassedInShamsiYear < 0
                                                  ) {
                                                    gy--;
                                                    isLeapYear =
                                                      gy % 4 === 0 &&
                                                      (gy % 100 !== 0 ||
                                                        gy % 400 === 0);
                                                    daysPassedInShamsiYear +=
                                                      isLeapYear ? 366 : 365;
                                                  }
                                                  let jy = gy - 621;
                                                  let jm = 0;
                                                  let jd =
                                                    daysPassedInShamsiYear;
                                                  for (
                                                    let i = 0;
                                                    i < shamsiMonthDays.length;
                                                    i++
                                                  ) {
                                                    if (
                                                      jd < shamsiMonthDays[i]
                                                    ) {
                                                      jm = i + 1;
                                                      jd++;
                                                      break;
                                                    } else {
                                                      jd -= shamsiMonthDays[i];
                                                    }
                                                  }
                                                  return (
                                                    time +
                                                    "   " +
                                                    jy +
                                                    "/" +
                                                    jm +
                                                    "/" +
                                                    jd
                                                  );
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "1403/05/07 10:20";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </TransactionBox>
                                  );
                                })
                              : null}
                            {(() => {
                              try {
                                return $state.list.length == 0;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__nd3H)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"150px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/babarkat/images/image12.png",
                                  fullWidth: 450,
                                  fullHeight: 450,
                                  aspectRatio: undefined
                                }}
                              />
                            ) : null}
                          </Stack__>
                        </TabContent>
                        <TabContent
                          className={classNames(
                            "__wab_instance",
                            sty.tabContent__wy0Ga
                          )}
                          tabKey={"transaction"}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__s4B1U
                            )}
                          >
                            {(
                              hasVariant($state, "no", "no")
                                ? true
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                ? true
                                : (() => {
                                    try {
                                      return $state.list.length > 0;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            )
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.fiterlist;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <TransactionBox
                                      className={classNames(
                                        "__wab_instance",
                                        sty.transactionBox__h1JyW,
                                        {
                                          [sty.transactionBoxno__h1JyW7Cleb]:
                                            hasVariant($state, "no", "no")
                                        }
                                      )}
                                      key={currentIndex}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateModalOpen"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "modal",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateModalOpen"] != null &&
                                          typeof $steps["updateModalOpen"] ===
                                            "object" &&
                                          typeof $steps["updateModalOpen"]
                                            .then === "function"
                                        ) {
                                          $steps["updateModalOpen"] =
                                            await $steps["updateModalOpen"];
                                        }

                                        $steps["updateModalOpen2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["transaction2"]
                                                },
                                                operation: 0,
                                                value: currentItem
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateModalOpen2"] != null &&
                                          typeof $steps["updateModalOpen2"] ===
                                            "object" &&
                                          typeof $steps["updateModalOpen2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateModalOpen2"] =
                                            await $steps["updateModalOpen2"];
                                        }
                                      }}
                                      unnamedGroupOfVariants={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "panel"
                                          : "panel"
                                      }
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__agD6A
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___649Jp
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return currentItem.receiver;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "\u0634\u0627\u0631\u0698 \u0633\u06cc\u0645 \u06a9\u0627\u0631\u062a ";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__dZxVm
                                          )}
                                        >
                                          {hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          ) ? (
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (
                                                    (
                                                      currentItem.value * 1000
                                                    ).toLocaleString() +
                                                    " تومان "
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "--";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          ) : (
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (
                                                    currentItem.price.toLocaleString() +
                                                    " تومان "
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "--";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          )}
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__spOZh
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___5HyOf,
                                            "dateshow"
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  let date =
                                                    currentItem.createdAt.split(
                                                      " "
                                                    )[0];
                                                  let time =
                                                    currentItem.createdAt.split(
                                                      " "
                                                    )[1];
                                                  let gy = parseInt(
                                                    date.split("-")[0]
                                                  );
                                                  let gm = parseInt(
                                                    date.split("-")[1]
                                                  );
                                                  let gd = parseInt(
                                                    date.split("-")[2]
                                                  );
                                                  let shamsiMonthDays = [
                                                    31, 31, 31, 31, 31, 31, 30,
                                                    30, 30, 30, 30, 29
                                                  ];

                                                  let miladiDaysInMonth = [
                                                    31, 28, 31, 30, 31, 30, 31,
                                                    31, 30, 31, 30, 31
                                                  ];

                                                  let isLeapYear =
                                                    gy % 4 === 0 &&
                                                    (gy % 100 !== 0 ||
                                                      gy % 400 === 0);
                                                  if (isLeapYear) {
                                                    miladiDaysInMonth[1] = 29;
                                                  }
                                                  let daysPassedMiladi = gd;
                                                  for (
                                                    let i = 0;
                                                    i < gm - 1;
                                                    i++
                                                  ) {
                                                    daysPassedMiladi +=
                                                      miladiDaysInMonth[i];
                                                  }
                                                  let shamsiNewYearDayInMiladi =
                                                    isLeapYear ? 80 : 79;
                                                  let daysPassedInShamsiYear =
                                                    daysPassedMiladi -
                                                    shamsiNewYearDayInMiladi;
                                                  if (
                                                    daysPassedInShamsiYear < 0
                                                  ) {
                                                    gy--;
                                                    isLeapYear =
                                                      gy % 4 === 0 &&
                                                      (gy % 100 !== 0 ||
                                                        gy % 400 === 0);
                                                    daysPassedInShamsiYear +=
                                                      isLeapYear ? 366 : 365;
                                                  }
                                                  let jy = gy - 621;
                                                  let jm = 0;
                                                  let jd =
                                                    daysPassedInShamsiYear;
                                                  for (
                                                    let i = 0;
                                                    i < shamsiMonthDays.length;
                                                    i++
                                                  ) {
                                                    if (
                                                      jd < shamsiMonthDays[i]
                                                    ) {
                                                      jm = i + 1;
                                                      jd++;
                                                      break;
                                                    } else {
                                                      jd -= shamsiMonthDays[i];
                                                    }
                                                  }
                                                  return (
                                                    time +
                                                    "   " +
                                                    jy +
                                                    "/" +
                                                    jm +
                                                    "/" +
                                                    jd
                                                  );
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "--";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </TransactionBox>
                                  );
                                })
                              : null}
                            {(() => {
                              try {
                                return $state.list.length == 0;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img__zjDzg)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"150px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/babarkat/images/image12.png",
                                  fullWidth: 450,
                                  fullHeight: 450,
                                  aspectRatio: undefined
                                }}
                              />
                            ) : null}
                          </Stack__>
                        </TabContent>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1CjQh
                          )}
                        />
                      </div>
                    </div>
                  )}
                </DataCtxReader__>
              </TabsContainer>
              <div className={classNames(projectcss.all, sty.freeBox___5MnOu)}>
                <Button
                  className={classNames("__wab_instance", sty.button__otIeN)}
                  color={"sand"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePage"] =
                      $state.page > 0
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["page"]
                              },
                              operation: 0,
                              value: $state.page - 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updatePage"] != null &&
                      typeof $steps["updatePage"] === "object" &&
                      typeof $steps["updatePage"].then === "function"
                    ) {
                      $steps["updatePage"] = await $steps["updatePage"];
                    }

                    $steps["refreshData"] =
                      $state.page > 0
                        ? (() => {
                            const actionArgs = {
                              queryInvalidation: ["plasmic_refresh_all"]
                            };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["refreshData"] != null &&
                      typeof $steps["refreshData"] === "object" &&
                      typeof $steps["refreshData"].then === "function"
                    ) {
                      $steps["refreshData"] = await $steps["refreshData"];
                    }
                  }}
                  shape={"rounded"}
                  showStartIcon={true}
                  size={"compact"}
                  startIcon={
                    <Icon25Icon
                      className={classNames(projectcss.all, sty.svg___1Ywet)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pIwTf
                    )}
                  >
                    {"\u0635\u0641\u062d\u0647 \u0642\u0628\u0644"}
                  </div>
                </Button>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gKy0S
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "صفحه " + ($state.page + 1);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button___3XA3J)}
                  color={"sand"}
                  endIcon={
                    <Icon26Icon
                      className={classNames(projectcss.all, sty.svg__lmrGr)}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updatePage"] = (() => {
                      if ($state.apiRequest.data != null)
                        return $state.apiRequest.data[0].list != [];
                    })()
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["page"]
                            },
                            operation: 0,
                            value: $state.page + 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updatePage"] != null &&
                      typeof $steps["updatePage"] === "object" &&
                      typeof $steps["updatePage"].then === "function"
                    ) {
                      $steps["updatePage"] = await $steps["updatePage"];
                    }

                    $steps["refreshData"] = (() => {
                      if ($state.apiRequest.data != null)
                        return $state.apiRequest.data[0].list != [];
                    })()
                      ? (() => {
                          const actionArgs = {
                            queryInvalidation: ["plasmic_refresh_all"]
                          };
                          return (async ({ queryInvalidation }) => {
                            if (!queryInvalidation) {
                              return;
                            }
                            await plasmicInvalidate(queryInvalidation);
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["refreshData"] != null &&
                      typeof $steps["refreshData"] === "object" &&
                      typeof $steps["refreshData"].then === "function"
                    ) {
                      $steps["refreshData"] = await $steps["refreshData"];
                    }
                  }}
                  shape={"rounded"}
                  showEndIcon={true}
                  size={"compact"}
                  startIcon={
                    <Icon25Icon
                      className={classNames(projectcss.all, sty.svg__od3Qo)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kwzKn
                    )}
                  >
                    {"\u0635\u0641\u062d\u0647 \u0628\u0639\u062f"}
                  </div>
                </Button>
              </div>
            </Stack__>
            <div
              className={classNames(projectcss.all, sty.freeBox__z3HRp, {
                [sty.freeBoxno__z3HRp7Cleb]: hasVariant($state, "no", "no")
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__sW4Gv)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/babarkat/images/image12.png",
                  fullWidth: 450,
                  fullHeight: 450,
                  aspectRatio: undefined
                }}
              />
            </div>
          </Reveal>
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            closeButtonClassName={classNames({
              [sty["pcls_jZaReuFdvodW"]]: true
            })}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_XsbJxDF7TlN3"]]: hasVariant(
                globalVariants,
                "screen",
                "mobileOnly"
              ),
              [sty["pcls_nbIyKKb0bYr0"]]: true
            })}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={null}
            width={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100vw"
                : "100vw"
            }
            wrapClassName={classNames({ [sty["pcls_meHaK8TAQRq_"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__v19T)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aGz5Z
                )}
              >
                {
                  "\u0631\u0633\u06cc\u062f \u062a\u0631\u0627\u06a9\u0646\u0634"
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__blzPa)}
              >
                <Transaction2
                  data-plasmic-name={"transaction2"}
                  data-plasmic-override={overrides.transaction2}
                  className={classNames("__wab_instance", sty.transaction2)}
                  unnamedGroupOfVariants={(() => {
                    try {
                      return (() => {
                        switch (true) {
                          case $state.transaction2.type.includes("charge"):
                            return "sim";
                          case $state.transaction2.type.includes("inte"):
                            return "intenet";
                          case $state.transaction == "remittance":
                            return "walet";
                          case $state.transaction == "transaction":
                            return "panel";
                          default:
                            return "";
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.transaction == "transaction";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uQxTh)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a4FNw
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0639\u0646\u0648\u0627\u0646:"
                          : "\u0645\u0628\u0644\u063a :"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c8OJz
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.transaction2.receiver;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "100000 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  (
                                    $state.transaction2.price * 1000
                                  ).toLocaleString() + " تومان "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "100000 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__f3QK4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yAyeQ
                        )}
                      >
                        {"\u0645\u0628\u0644\u063a :"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ywh9G
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  switch ($state.transaction) {
                                    case "charge":
                                      return (
                                        (
                                          $state.transaction2.price * 1000
                                        ).toLocaleString() + " تومان"
                                      );
                                    case "transaction":
                                      return (
                                        (
                                          $state.transaction2.value * 1000
                                        ).toLocaleString() + " تومان"
                                      );
                                  }
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "100000 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  (
                                    $state.transaction2.price * 1000
                                  ).toLocaleString() + " تومان "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "100000 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.transaction == "charge";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eqZl7)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g0F7F
                        )}
                      >
                        {
                          "\u062a\u0627\u0631\u06cc\u062e \u062a\u0631\u0627\u06a9\u0646\u0634:"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4ZorO
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                let date =
                                  $state.transaction2.createdAt.split(" ")[0];
                                let time =
                                  $state.transaction2.createdAt.split(" ")[1];
                                let gy = parseInt(date.split("-")[0]);
                                let gm = parseInt(date.split("-")[1]);
                                let gd = parseInt(date.split("-")[2]);
                                let shamsiMonthDays = [
                                  31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                                ];

                                let miladiDaysInMonth = [
                                  31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                                ];

                                let isLeapYear =
                                  gy % 4 === 0 &&
                                  (gy % 100 !== 0 || gy % 400 === 0);
                                if (isLeapYear) {
                                  miladiDaysInMonth[1] = 29;
                                }
                                let daysPassedMiladi = gd;
                                for (let i = 0; i < gm - 1; i++) {
                                  daysPassedMiladi += miladiDaysInMonth[i];
                                }
                                let shamsiNewYearDayInMiladi = isLeapYear
                                  ? 80
                                  : 79;
                                let daysPassedInShamsiYear =
                                  daysPassedMiladi - shamsiNewYearDayInMiladi;
                                if (daysPassedInShamsiYear < 0) {
                                  gy--;
                                  isLeapYear =
                                    gy % 4 === 0 &&
                                    (gy % 100 !== 0 || gy % 400 === 0);
                                  daysPassedInShamsiYear += isLeapYear
                                    ? 366
                                    : 365;
                                }
                                let jy = gy - 621;
                                let jm = 0;
                                let jd = daysPassedInShamsiYear;
                                for (
                                  let i = 0;
                                  i < shamsiMonthDays.length;
                                  i++
                                ) {
                                  if (jd < shamsiMonthDays[i]) {
                                    jm = i + 1;
                                    jd++;
                                    break;
                                  } else {
                                    jd -= shamsiMonthDays[i];
                                  }
                                }
                                return jy + "/" + jm + "/" + jd + "  " + time;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "1403/07/05 10:15:30";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lMMc)}
                  />

                  {(() => {
                    try {
                      return $state.transaction == "charge";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xMdUs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c1Cp
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rhtLj
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.transaction2.mobile;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "09258944568784";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.transaction == "charge";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2Aole
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__z9F8F
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0646\u0648\u0639 \u0634\u0627\u0631\u0698"
                          : "\u0627\u067e\u0631\u0627\u062a\u0648\u0631"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wcBN
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  switch (true) {
                                    case $state.transaction2.type.startsWith(
                                      "iran"
                                    ):
                                      return "ایران";
                                    case $state.transaction2.type.startsWith(
                                      "afghan"
                                    ) ||
                                      $state.transaction2.type.startsWith(
                                        "hamrahaval"
                                      ):
                                      return "افقانستان";
                                    default:
                                      return "نامشخص";
                                  }
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0631\u0627\u06cc\u062a\u0644";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  switch (true) {
                                    case $state.transaction2.type.startsWith(
                                      "irance"
                                    ):
                                      return "ایرانسل";
                                    case $state.transaction2.type.startsWith(
                                      "mci"
                                    ) ||
                                      $state.transaction2.type.startsWith(
                                        "hamrahaval"
                                      ):
                                      return "همراه اول";
                                    case $state.transaction2.type.startsWith(
                                      "rightel"
                                    ):
                                      return "رایتل";
                                    case $state.transaction2.type.startsWith(
                                      "shatel"
                                    ):
                                      return "شاتل";
                                    default:
                                      return "نامشخص";
                                  }
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0631\u0627\u06cc\u062a\u0644";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return $state.transaction == "charge";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__atx4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wZOoq
                        )}
                      >
                        {
                          "\u0634\u0646\u0627\u0633\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vhT9
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.transaction2.originId;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "445874888475";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}
                </Transaction2>
                <Button
                  className={classNames("__wab_instance", sty.button__sqdp8)}
                  color={"softGreen"}
                >
                  {"\u0627\u0631\u0633\u0627\u0644 \u0631\u0633\u06cc\u062f"}
                </Button>
              </Stack__>
            </div>
          </AntdModal>
          {(hasVariant($state, "no", "no") ? true : false) ? (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__bB4IY, {
                [sty.imgno__bB4IY7Cleb]: hasVariant($state, "no", "no")
              })}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/babarkat/images/image11.svg",
                fullWidth: 22,
                fullHeight: 22,
                aspectRatio: 1
              }}
            />
          ) : null}
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
              (async loading => {
                const $steps = {};

                $steps["updateList"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["list"]
                        },
                        operation: 0,
                        value: []
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateList"] != null &&
                  typeof $steps["updateList"] === "object" &&
                  typeof $steps["updateList"].then === "function"
                ) {
                  $steps["updateList"] = await $steps["updateList"];
                }
              }).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
              (async data => {
                const $steps = {};

                $steps["updateList"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["list"]
                        },
                        operation: 0,
                        value: (() => {
                          if ($state.apiRequest.data != null)
                            return $state.apiRequest.data[0].list;
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateList"] != null &&
                  typeof $steps["updateList"] === "object" &&
                  typeof $steps["updateList"].then === "function"
                ) {
                  $steps["updateList"] = await $steps["updateList"];
                }
              }).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return {
                  userToken: $state.userinfo.token,
                  page: $state.page,
                  transaction: $state.transaction
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.babarkat.com/webhook/Babarkat/transaction"}
          />

          <AntdModal
            data-plasmic-name={"modal2"}
            data-plasmic-override={overrides.modal2}
            className={classNames("__wab_instance", sty.modal2)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            hideFooter={true}
            modalContentClassName={classNames({
              [sty["pcls_W0wxY-8tf7x5"]]: true
            })}
            modalScopeClassName={sty["modal2__modal"]}
            onOpenChange={generateStateOnChangeProp($state, ["modal2", "open"])}
            open={generateStateValueProp($state, ["modal2", "open"])}
            title={null}
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_hwYqJGT04Vii"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__bqfd1)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s6YkF
                )}
              >
                {"\u0641\u06cc\u0644\u062a\u0631"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__gsX)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gAu
                )}
              >
                {"\u062a\u0627\u0631\u06cc\u062e "}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pzs0K)}
              >
                <AntdRadioGroup
                  data-plasmic-name={"radioGroup2"}
                  data-plasmic-override={overrides.radioGroup2}
                  className={classNames("__wab_instance", sty.radioGroup2)}
                  defaultValue={"month"}
                  onChange={generateStateOnChangeProp($state, [
                    "radioGroup2",
                    "value"
                  ])}
                  optionType={"button"}
                  options={(() => {
                    const __composite = [
                      { value: null, label: null },
                      { value: null, label: null },
                      { value: null, label: null },
                      { label: null, value: null }
                    ];
                    __composite["0"]["value"] = "all";
                    __composite["0"]["label"] = "\u0647\u0645\u0647";
                    __composite["1"]["value"] = "transaction";
                    __composite["1"]["label"] = "\u067e\u0646\u0644";
                    __composite["2"]["value"] = "charge";
                    __composite["2"]["label"] = "\u0634\u0627\u0631\u0698";
                    __composite["3"]["label"] =
                      "\u0627\u06cc\u0646\u062a\u0631\u0646\u062a";
                    __composite["3"]["value"] = "internet";
                    return __composite;
                  })()}
                  useChildren={true}
                  value={generateStateValueProp($state, [
                    "radioGroup2",
                    "value"
                  ])}
                >
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__yCeNc
                    )}
                    value={"month"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mR4Rs
                      )}
                    >
                      {"\u0645\u0627\u0647 \u062c\u0627\u0631\u06cc"}
                    </div>
                  </AntdRadioButton>
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__qJuQa
                    )}
                    value={"1month"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v3Oj0
                      )}
                    >
                      {"\u06cc\u06a9 \u0645\u0627\u0647"}
                    </div>
                  </AntdRadioButton>
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__daHDy
                    )}
                    value={"2month"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ecdsN
                      )}
                    >
                      {"\u062f\u0648 \u0645\u0627\u0647"}
                    </div>
                  </AntdRadioButton>
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__aiZg8
                    )}
                    value={"3month"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t2CRc
                      )}
                    >
                      {"\u0633\u0647 \u0645\u0627\u0647"}
                    </div>
                  </AntdRadioButton>
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__nhJh1
                    )}
                    value={"6month"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t8JEi
                      )}
                    >
                      {"\u0634\u0634 \u0645\u0627\u0647"}
                    </div>
                  </AntdRadioButton>
                  <AntdRadioButton
                    className={classNames(
                      "__wab_instance",
                      sty.radioButton__jn67C
                    )}
                    value={"year"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__he5Cm
                      )}
                    >
                      {"\u06cc\u06a9 \u0633\u0627\u0644"}
                    </div>
                  </AntdRadioButton>
                </AntdRadioGroup>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xjOHi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xa1P
                )}
              >
                {"\u0628\u0631\u0686\u0633\u0628"}
              </div>
              <AntdRadioGroup
                data-plasmic-name={"radioGroup"}
                data-plasmic-override={overrides.radioGroup}
                className={classNames("__wab_instance", sty.radioGroup)}
                defaultValue={"all"}
                onChange={generateStateOnChangeProp($state, [
                  "radioGroup",
                  "value"
                ])}
                optionType={"button"}
                options={(() => {
                  const __composite = [
                    { value: null, label: null },
                    { value: null, label: null },
                    { value: null, label: null },
                    { label: null, value: null }
                  ];
                  __composite["0"]["value"] = "all";
                  __composite["0"]["label"] = "\u0647\u0645\u0647";
                  __composite["1"]["value"] = "transaction";
                  __composite["1"]["label"] = "\u067e\u0646\u0644";
                  __composite["2"]["value"] = "charge";
                  __composite["2"]["label"] = "\u0634\u0627\u0631\u0698";
                  __composite["3"]["label"] =
                    "\u0627\u06cc\u0646\u062a\u0631\u0646\u062a";
                  __composite["3"]["value"] = "internet";
                  return __composite;
                })()}
                useChildren={true}
                value={generateStateValueProp($state, ["radioGroup", "value"])}
              >
                <AntdRadioButton
                  className={classNames(
                    "__wab_instance",
                    sty.radioButton__rkmXy
                  )}
                  value={"all"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ajdb3
                    )}
                  >
                    {"\u0647\u0645\u0647"}
                  </div>
                </AntdRadioButton>
                <AntdRadioButton
                  className={classNames(
                    "__wab_instance",
                    sty.radioButton__aRl9T
                  )}
                  value={"internet"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uTf2B
                    )}
                  >
                    {"\u0627\u06cc\u0646\u062a\u0631\u0646\u062a"}
                  </div>
                </AntdRadioButton>
                <AntdRadioButton
                  className={classNames(
                    "__wab_instance",
                    sty.radioButton__p8Ssk
                  )}
                  value={"charge"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8I7Dz
                    )}
                  >
                    {"\u0634\u0627\u0631\u0698"}
                  </div>
                </AntdRadioButton>
                <AntdRadioButton
                  className={classNames(
                    "__wab_instance",
                    sty.radioButton__tdAc8
                  )}
                  value={"transaction"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wiz44
                    )}
                  >
                    {"\u067e\u0646\u0644"}
                  </div>
                </AntdRadioButton>
              </AntdRadioGroup>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___73HFh)}>
              <Button
                className={classNames("__wab_instance", sty.button___9Sdsp)}
                color={"green"}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModal2Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal2", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModal2Open"] != null &&
                    typeof $steps["updateModal2Open"] === "object" &&
                    typeof $steps["updateModal2Open"].then === "function"
                  ) {
                    $steps["updateModal2Open"] = await $steps[
                      "updateModal2Open"
                    ];
                  }

                  $steps["updateFiterlist"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["fiterlist"]
                          },
                          operation: 0,
                          value: (() => {
                            switch ($state.radioGroup2.value) {
                              case "month":
                                const startOfCurrentMonth = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth(),
                                  1
                                );
                                return $state.list.filter(
                                  item =>
                                    new Date(item.createdAt) >=
                                    startOfCurrentMonth
                                );
                              case "1month":
                                const startOfThisMonth = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth(),
                                  1
                                );
                                const startOfPreviousMonth = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth() - 1,
                                  1
                                );
                                return $state.list.filter(item => {
                                  const itemDate = new Date(item.createdAt);
                                  return (
                                    itemDate >= startOfPreviousMonth &&
                                    itemDate < startOfThisMonth
                                  );
                                });
                              case "2month":
                                const startOfTwoMonthsAgo = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth() - 2,
                                  1
                                );
                                return $state.list.filter(
                                  item =>
                                    new Date(item.createdAt) >=
                                    startOfTwoMonthsAgo
                                );
                              case "3month":
                                const startOfThreeMonthsAgo = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth() - 3,
                                  1
                                );
                                return $state.list.filter(
                                  item =>
                                    new Date(item.createdAt) >=
                                    startOfThreeMonthsAgo
                                );
                              case "6month":
                                const startOfSixMonthsAgo = new Date(
                                  new Date().getFullYear(),
                                  new Date().getMonth() - 6,
                                  1
                                );
                                return $state.list.filter(
                                  item =>
                                    new Date(item.createdAt) >=
                                    startOfSixMonthsAgo
                                );
                              case "year":
                                const startOfOneYearAgo = new Date(
                                  new Date().getFullYear() - 1,
                                  new Date().getMonth(),
                                  1
                                );
                                return $state.list.filter(
                                  item =>
                                    new Date(item.createdAt) >=
                                    startOfOneYearAgo
                                );
                              default:
                                return $state.list;
                            }
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateFiterlist"] != null &&
                    typeof $steps["updateFiterlist"] === "object" &&
                    typeof $steps["updateFiterlist"].then === "function"
                  ) {
                    $steps["updateFiterlist"] = await $steps["updateFiterlist"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jb9Yl
                  )}
                >
                  {"\u062a\u0627\u06cc\u06cc\u062f"}
                </div>
              </Button>
            </div>
          </AntdModal>
          <div className={classNames(projectcss.all, sty.freeBox__goJzD)}>
            <div
              data-plasmic-name={"footer2"}
              data-plasmic-override={overrides.footer2}
              className={classNames(projectcss.all, sty.footer2)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"snapp3"}
                data-plasmic-override={overrides.snapp3}
                hasGap={true}
                className={classNames(projectcss.all, sty.snapp3)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
              >
                <div
                  data-plasmic-name={"vuesaxBoldHome2"}
                  data-plasmic-override={overrides.vuesaxBoldHome2}
                  className={classNames(projectcss.all, sty.vuesaxBoldHome2)}
                >
                  <HomeIcon
                    className={classNames(projectcss.all, sty.svg__uWyC)}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8Ouys
                  )}
                >
                  {"\u062e\u0627\u0646\u0647"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"charge3"}
                data-plasmic-override={overrides.charge3}
                hasGap={true}
                className={classNames(projectcss.all, sty.charge3)}
              >
                <div
                  data-plasmic-name={"vuesaxBoldReceipt3"}
                  data-plasmic-override={overrides.vuesaxBoldReceipt3}
                  className={classNames(projectcss.all, sty.vuesaxBoldReceipt3)}
                >
                  <ReceiptIcon
                    className={classNames(projectcss.all, sty.svg__tKvxl)}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h11E1
                  )}
                >
                  {"\u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627"}
                </div>
              </Stack__>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "reveal",
    "wallet",
    "tabsContainer",
    "tabUnderline",
    "modal",
    "transaction2",
    "apiRequest",
    "modal2",
    "radioGroup2",
    "radioGroup",
    "footer2",
    "snapp3",
    "vuesaxBoldHome2",
    "charge3",
    "vuesaxBoldReceipt3"
  ],
  header: ["header"],
  reveal: ["reveal", "wallet", "tabsContainer", "tabUnderline"],
  wallet: ["wallet", "tabsContainer", "tabUnderline"],
  tabsContainer: ["tabsContainer", "tabUnderline"],
  tabUnderline: ["tabUnderline"],
  modal: ["modal", "transaction2"],
  transaction2: ["transaction2"],
  apiRequest: ["apiRequest"],
  modal2: ["modal2", "radioGroup2", "radioGroup"],
  radioGroup2: ["radioGroup2"],
  radioGroup: ["radioGroup"],
  footer2: [
    "footer2",
    "snapp3",
    "vuesaxBoldHome2",
    "charge3",
    "vuesaxBoldReceipt3"
  ],
  snapp3: ["snapp3", "vuesaxBoldHome2"],
  vuesaxBoldHome2: ["vuesaxBoldHome2"],
  charge3: ["charge3", "vuesaxBoldReceipt3"],
  vuesaxBoldReceipt3: ["vuesaxBoldReceipt3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  reveal: typeof Reveal;
  wallet: "div";
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  modal: typeof AntdModal;
  transaction2: typeof Transaction2;
  apiRequest: typeof ApiRequest;
  modal2: typeof AntdModal;
  radioGroup2: typeof AntdRadioGroup;
  radioGroup: typeof AntdRadioGroup;
  footer2: "div";
  snapp3: "div";
  vuesaxBoldHome2: "div";
  charge3: "div";
  vuesaxBoldReceipt3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTransaction__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTransaction__VariantsArgs;
    args?: PlasmicTransaction__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTransaction__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTransaction__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTransaction__ArgProps,
          internalVariantPropNames: PlasmicTransaction__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTransaction__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTransaction";
  } else {
    func.displayName = `PlasmicTransaction.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "sZQMbqXz9utLNaTnNb3uss"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicTransaction = Object.assign(
  // Top-level PlasmicTransaction renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    reveal: makeNodeComponent("reveal"),
    wallet: makeNodeComponent("wallet"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    modal: makeNodeComponent("modal"),
    transaction2: makeNodeComponent("transaction2"),
    apiRequest: makeNodeComponent("apiRequest"),
    modal2: makeNodeComponent("modal2"),
    radioGroup2: makeNodeComponent("radioGroup2"),
    radioGroup: makeNodeComponent("radioGroup"),
    footer2: makeNodeComponent("footer2"),
    snapp3: makeNodeComponent("snapp3"),
    vuesaxBoldHome2: makeNodeComponent("vuesaxBoldHome2"),
    charge3: makeNodeComponent("charge3"),
    vuesaxBoldReceipt3: makeNodeComponent("vuesaxBoldReceipt3"),

    // Metadata about props expected for PlasmicTransaction
    internalVariantProps: PlasmicTransaction__VariantProps,
    internalArgProps: PlasmicTransaction__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTransaction;
/* prettier-ignore-end */
