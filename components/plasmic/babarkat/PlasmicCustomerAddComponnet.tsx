/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sZQMbqXz9utLNaTnNb3uss
// Component: RKNsGINinP2W

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Input } from "@/fragment/components/input"; // plasmic-import: UGm7T3K14yEW/codeComponent
import { TextArea } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as TextArea_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: _5H7Xe2DiXqI/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sZQMbqXz9utLNaTnNb3uss/projectcss
import sty from "./PlasmicCustomerAddComponnet.module.css"; // plasmic-import: RKNsGINinP2W/css

import Icon125Icon from "./icons/PlasmicIcon__Icon125"; // plasmic-import: YQy20jWydd0d/icon
import Icon124Icon from "./icons/PlasmicIcon__Icon124"; // plasmic-import: P1Fs12YxYeJP/icon
import Icon123Icon from "./icons/PlasmicIcon__Icon123"; // plasmic-import: _zv4Q0EC6aSe/icon
import Icon127Icon from "./icons/PlasmicIcon__Icon127"; // plasmic-import: cIU9xx5_awUn/icon
import Icon126Icon from "./icons/PlasmicIcon__Icon126"; // plasmic-import: FYscFmWJih1P/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: GsFYrYWA9bY1/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: DuoBqJ29N7bW/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: dXgXrJG5lp3Z/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: ABwvUbBMtZqM/icon
import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: T5qnRYhm3_iD/icon
import Icon122Icon from "./icons/PlasmicIcon__Icon122"; // plasmic-import: FlYgkUghZC6o/icon

createPlasmicElementProxy;

export type PlasmicCustomerAddComponnet__VariantMembers = {};
export type PlasmicCustomerAddComponnet__VariantsArgs = {};
type VariantPropType = keyof PlasmicCustomerAddComponnet__VariantsArgs;
export const PlasmicCustomerAddComponnet__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCustomerAddComponnet__ArgsType = {
  back?: () => void;
  active?: boolean;
};
type ArgPropType = keyof PlasmicCustomerAddComponnet__ArgsType;
export const PlasmicCustomerAddComponnet__ArgProps = new Array<ArgPropType>(
  "back",
  "active"
);

export type PlasmicCustomerAddComponnet__OverridesType = {
  root?: Flex__<"div">;
  name?: Flex__<typeof Input>;
  lastname?: Flex__<typeof Input>;
  mobile?: Flex__<typeof Input>;
  customerId?: Flex__<typeof Input>;
  location?: Flex__<typeof TextArea>;
  button5?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  header?: Flex__<"div">;
  add?: Flex__<typeof AntdModal>;
  valueAdd?: Flex__<typeof Input>;
  select?: Flex__<typeof AntdSelect>;
  info?: Flex__<typeof TextArea>;
  button3?: Flex__<typeof Button>;
  remove?: Flex__<typeof AntdModal>;
  valueAdd2?: Flex__<typeof Input>;
  select2?: Flex__<typeof AntdSelect>;
  info2?: Flex__<typeof TextArea>;
  button4?: Flex__<typeof Button>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultCustomerAddComponnetProps {
  back?: () => void;
  active?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCustomerAddComponnet__RenderFunc(props: {
  variants: PlasmicCustomerAddComponnet__VariantsArgs;
  args: PlasmicCustomerAddComponnet__ArgsType;
  overrides: PlasmicCustomerAddComponnet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          active: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "add.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "valueAdd.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "info.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", TextArea_Helpers)
      },
      {
        path: "button3.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(sessionStorage.getItem("userbabarcatToken"))
                .value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "customerInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(window.sessionStorage.getItem("customerinfo"));
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  id: 834,
                  name: "\u0627\u0644\u0647\u0647",
                  last_name:
                    "\u0627\u0645\u06cc\u0631 \u0639\u0628\u0627\u0633\u06cc",
                  mobile: "09228951264",
                  customerNum:
                    "\u0627\u0644\u0647\u0647.\u062d\u0633\u06cc\u0646.465",
                  afghani: 0,
                  dollar: -4417,
                  toman: 53164.10061999999,
                  _saraf: 1005,
                  lira: 0
                };
              }
              throw e;
            }
          })()
      },
      {
        path: "remove.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "valueAdd2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "info2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", TextArea_Helpers)
      },
      {
        path: "button4.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "carts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: "toman",
            name: "\u062a\u0648\u0645\u0627\u0646",
            color: "#2DC57B",
            width: "100%",
            zIndex: 4,
            transform: "translateY(0px) "
          },
          {
            id: "lira",
            name: "\u0644\u06cc\u0631",
            color: "#a31ec8",
            width: "95%",
            zIndex: 3,
            transform: "translateY(-15px) "
          },
          {
            id: "afghani",
            name: "\u0627\u0641\u063a\u0627\u0646\u06cc",
            color: "#C9A92B",
            width: "95%",
            zIndex: 3,
            transform: "translateY(-15px) "
          },
          {
            id: "dollar",
            name: "\u062f\u0644\u0627\u0631",
            color: "#3574BF",
            width: "90%",
            zIndex: 2,
            transform: "translateY(-15px) "
          }
        ]
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "toman"
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "toman"
      },
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastname.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "mobile.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "customerId.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.code;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button5.loadingviow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingviow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "location.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", TextArea_Helpers)
      },
      {
        path: "error",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "errror",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "code",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__b5V)}>
        <div className={classNames(projectcss.all, sty.freeBox__ugpWi)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__puu75
            )}
          >
            {
              "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0634\u062a\u0631\u06cc"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__shewW)}>
            <Icon125Icon
              className={classNames(projectcss.all, sty.svg__mYuzC)}
              role={"img"}
            />

            <Input
              data-plasmic-name={"name"}
              data-plasmic-override={overrides.name}
              className={classNames("__wab_instance", sty.name)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["name", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              placeholder={"\u0646\u0627\u0645"}
              type={"text"}
              value={generateStateValueProp($state, ["name", "value"])}
            />

            {(() => {
              try {
                return $state.error.find(item => item == "name");
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1B4Na
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627\u064b \u0646\u0627\u0645 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f\u060c \u0627\u06cc\u0646 \u0641\u06cc\u0644\u062f \u0646\u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u062f \u062e\u0627\u0644\u06cc \u0628\u0627\u0634\u062f."
                }
              </div>
            ) : null}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ejUfw)}>
            <Icon124Icon
              className={classNames(projectcss.all, sty.svg__utUPo)}
              role={"img"}
            />

            <Input
              data-plasmic-name={"lastname"}
              data-plasmic-override={overrides.lastname}
              className={classNames("__wab_instance", sty.lastname)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["lastname", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              placeholder={
                "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
              }
              type={"text"}
              value={generateStateValueProp($state, ["lastname", "value"])}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__io1C)}>
            <Icon123Icon
              className={classNames(projectcss.all, sty.svg__jLCc)}
              role={"img"}
            />

            <Input
              data-plasmic-name={"mobile"}
              data-plasmic-override={overrides.mobile}
              className={classNames("__wab_instance", sty.mobile)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["mobile", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              placeholder={
                "\u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647"
              }
              type={"tel"}
              value={generateStateValueProp($state, ["mobile", "value"])}
            />

            {(() => {
              try {
                return $state.error.find(item => item == "mobile");
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bPwHx
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627\u064b \u0634\u0645\u0627\u0631\u0647 \u0647\u0645\u0631\u0627\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f\u060c \u0627\u06cc\u0646 \u0641\u06cc\u0644\u062f \u0646\u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u062f \u062e\u0627\u0644\u06cc \u0628\u0627\u0634\u062f."
                }
              </div>
            ) : null}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___2U7Ne)}>
            <Icon127Icon
              className={classNames(projectcss.all, sty.svg__amXvn)}
              role={"img"}
            />

            <Input
              data-plasmic-name={"customerId"}
              data-plasmic-override={overrides.customerId}
              className={classNames("__wab_instance", sty.customerId)}
              disabled={false}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "customerId",
                  "value"
                ]).apply(null, eventArgs);
              }}
              placeholder={
                "\u0634\u0646\u0627\u0633\u0647 \u06a9\u0627\u0631\u0628\u0631\u06cc (\u0639\u062f\u062f)"
              }
              type={"number"}
              value={generateStateValueProp($state, ["customerId", "value"])}
            />

            {(() => {
              try {
                return $state.error.find(item => item == "customerId");
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__klISa
                )}
              >
                {
                  "\u0644\u0637\u0641\u0627\u064b \u0634\u0646\u0627\u0633\u0647 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f\u060c \u0627\u06cc\u0646 \u0641\u06cc\u0644\u062f \u0646\u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u062f \u062e\u0627\u0644\u06cc \u0628\u0627\u0634\u062f."
                }
              </div>
            ) : null}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__hEDs2)}>
            <Icon126Icon
              className={classNames(projectcss.all, sty.svg__xWHw)}
              role={"img"}
            />

            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.location),
                maxLength: 250,
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["location", "value"],
                    TextArea_Helpers
                  ).apply(null, eventArgs);
                },
                placeholder: "\u0622\u062f\u0631\u0633",
                value: generateStateValueProp($state, ["location", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "location.value"
                  }
                ],
                [],
                TextArea_Helpers ?? {},
                child$Props
              );

              return (
                <TextArea
                  data-plasmic-name={"location"}
                  data-plasmic-override={overrides.location}
                  {...child$Props}
                />
              );
            })()}
          </div>
          <Button
            data-plasmic-name={"button5"}
            data-plasmic-override={overrides.button5}
            className={classNames("__wab_instance", sty.button5)}
            color={"green"}
            loadingviow={generateStateValueProp($state, [
              "button5",
              "loadingviow"
            ])}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.button5.loadingviow = true;
                          $state.error = [];
                          if (
                            $state.name.value === "" ||
                            $state.name.value == null
                          )
                            $state.error.push("name");
                          if (
                            $state.mobile.value === "" ||
                            $state.mobile.value == null
                          )
                            $state.error.push("mobile");
                          if (
                            $state.customerId.value === "" ||
                            $state.customerId.value == null
                          )
                            return $state.error.push("customerId");
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["invokeGlobalAction4"] = false
                ? (() => {
                    const actionArgs = { args: [] };
                    return $globalActions["Fragment.showPasswordDialog"]?.apply(
                      null,
                      [...actionArgs.args]
                    );
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction4"] != null &&
                typeof $steps["invokeGlobalAction4"] === "object" &&
                typeof $steps["invokeGlobalAction4"].then === "function"
              ) {
                $steps["invokeGlobalAction4"] =
                  await $steps["invokeGlobalAction4"];
              }

              $steps["invokeGlobalAction"] =
                $state.error.length == 0
                  ? // && $steps.invokeGlobalAction4
                    (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.babarkat.com/webhook/saraf/customer/add",
                          undefined,
                          (() => {
                            try {
                              return {
                                name: $state.name.value,
                                last_name: $state.lastname.value || "",
                                customerId: parseInt($state.customerId.value),
                                location: $state.location.value,
                                mobile: $state.mobile.value,
                                userToken: $state.token,
                                code: $steps.invokeGlobalAction4
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] =
                  await $steps["invokeGlobalAction"];
              }

              $steps["updateErrror"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["errror"]
                      },
                      operation: 0,
                      value: $steps.invokeGlobalAction?.data?.message
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateErrror"] != null &&
                typeof $steps["updateErrror"] === "object" &&
                typeof $steps["updateErrror"].then === "function"
              ) {
                $steps["updateErrror"] = await $steps["updateErrror"];
              }

              $steps["invokeGlobalAction2"] =
                $steps.invokeGlobalAction?.data?.success == true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "success",
                          "\u0645\u0634\u062a\u0631\u06cc \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0636\u0627\u0641\u0647 \u0634\u062f."
                        ]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction2"] != null &&
                typeof $steps["invokeGlobalAction2"] === "object" &&
                typeof $steps["invokeGlobalAction2"].then === "function"
              ) {
                $steps["invokeGlobalAction2"] =
                  await $steps["invokeGlobalAction2"];
              }

              $steps["invokeGlobalAction3"] =
                $steps.invokeGlobalAction?.data?.success == false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          (() => {
                            try {
                              return $state.errror;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction3"] != null &&
                typeof $steps["invokeGlobalAction3"] === "object" &&
                typeof $steps["invokeGlobalAction3"].then === "function"
              ) {
                $steps["invokeGlobalAction3"] =
                  await $steps["invokeGlobalAction3"];
              }

              $steps["runCode2"] =
                $steps.invokeGlobalAction?.data?.success == true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.name.value = "";
                            $state.lastname.value = "";
                            $state.mobile.value = "";
                            $state.location.value = "";
                            return ($state.customerId.value = "");
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["runCode3"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return ($state.button5.loadingviow = false);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode3"] != null &&
                typeof $steps["runCode3"] === "object" &&
                typeof $steps["runCode3"].then === "function"
              ) {
                $steps["runCode3"] = await $steps["runCode3"];
              }
            }}
            onLoadingviowChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button5", "loadingviow"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__piha3
              )}
            >
              {"\u062b\u0628\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"}
            </div>
          </Button>
        </div>
      </div>
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          <PlasmicIcon__
            PlasmicIconType={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? Icon10Icon
                : Icon10Icon
            }
            className={classNames(projectcss.all, sty.svg___2BXc5)}
            onClick={async event => {
              const $steps = {};

              $steps["goToPanel"] = true
                ? (() => {
                    const actionArgs = { destination: `/panel/${"users"}` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPanel"] != null &&
                typeof $steps["goToPanel"] === "object" &&
                typeof $steps["goToPanel"].then === "function"
              ) {
                $steps["goToPanel"] = await $steps["goToPanel"];
              }
            }}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lRaN
            )}
          >
            {
              "\u0627\u0641\u0632\u0648\u062f\u0646 \u0645\u0634\u062a\u0631\u06cc"
            }
          </div>
          <PlasmicIcon__
            PlasmicIconType={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? Icon9Icon
                : Icon9Icon
            }
            className={classNames(projectcss.all, sty.svg__tX9PU)}
            role={"img"}
          />
        </div>
      </section>
      <AntdModal
        data-plasmic-name={"add"}
        data-plasmic-override={overrides.add}
        className={classNames("__wab_instance", sty.add)}
        closeButtonClassName={classNames({ [sty["pcls_E2LeTKTZROXu"]]: true })}
        closeIcon={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lu6Hb
            )}
          >
            {"\n"}
          </div>
        }
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
        hideFooter={true}
        modalContentClassName={classNames({ [sty["pcls_G51JyUBrVUNS"]]: true })}
        modalScopeClassName={sty["add__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["add", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["add", "open"])}
        title={null}
        trigger={null}
        width={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "700"
        }
      >
        <div className={classNames(projectcss.all, sty.freeBox__hSXyS)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zjiS2
            )}
          >
            {
              "\u0627\u0641\u0632\u0648\u062f\u0646 \u0645\u0648\u062c\u0648\u062f\u06cc"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__sXn8E)}>
            <Input
              data-plasmic-name={"valueAdd"}
              data-plasmic-override={overrides.valueAdd}
              className={classNames("__wab_instance", sty.valueAdd)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["valueAdd", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              placeholder={"\u0645\u0628\u0644\u063a"}
              type={"number"}
              value={generateStateValueProp($state, ["valueAdd", "value"])}
            />

            <AntdSelect
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              className={classNames("__wab_instance", sty.select)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                styleTokensClassNames
              )}
              defaultValue={"toman"}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["select", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              options={(() => {
                try {
                  return $state.carts.map(item => ({
                    label: item.name,
                    value: item.id
                  }));
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              placeholder={null}
              popupScopeClassName={sty["select__popup"]}
              suffixIcon={
                <Icon37Icon
                  className={classNames(projectcss.all, sty.svg__hIeXz)}
                  role={"img"}
                />
              }
              value={generateStateValueProp($state, ["select", "value"])}
            />

            <Icon122Icon
              className={classNames(projectcss.all, sty.svg__aNv5)}
              role={"img"}
            />
          </div>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.info),
              maxLength: 250,
              onChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["info", "value"],
                  TextArea_Helpers
                ).apply(null, eventArgs);
              },
              placeholder: "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a",
              value: generateStateValueProp($state, ["info", "value"])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "info.value"
                }
              ],
              [],
              TextArea_Helpers ?? {},
              child$Props
            );

            return (
              <TextArea
                data-plasmic-name={"info"}
                data-plasmic-override={overrides.info}
                {...child$Props}
              />
            );
          })()}
          <Button
            data-plasmic-name={"button3"}
            data-plasmic-override={overrides.button3}
            className={classNames("__wab_instance", sty.button3)}
            color={"green"}
            loadingviow={generateStateValueProp($state, [
              "button3",
              "loadingviow"
            ])}
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] =
                $state.valueAdd.value != "" &&
                parseInt($state.valueAdd.value) > 0 &&
                $state.valueAdd.value != undefined
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.babarkat.com/webhook/saraf/getCustomer/",
                          undefined,
                          (() => {
                            try {
                              return {
                                userToken: $state.token,
                                _customer: $state.customerInfo.id,
                                value: parseInt($state.valueAdd.value),
                                priceType: $state.select.value,
                                type: "transmission",
                                text: $state.info.value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] =
                  await $steps["invokeGlobalAction"];
              }

              $steps["invokeGlobalAction2"] =
                $state.valueAdd.value == "" ||
                $state.valueAdd.value == undefined ||
                parseInt($state.valueAdd.value) <= 0
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0644\u0637\u0641\u0627\u064b \u0645\u0628\u0644\u063a \u0635\u062d\u06cc\u062d \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f.",
                          undefined,
                          undefined,
                          "topRight"
                        ]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction2"] != null &&
                typeof $steps["invokeGlobalAction2"] === "object" &&
                typeof $steps["invokeGlobalAction2"].then === "function"
              ) {
                $steps["invokeGlobalAction2"] =
                  await $steps["invokeGlobalAction2"];
              }

              $steps["invokeGlobalAction3"] = $steps.invokeGlobalAction?.data
                ?.success
                ? (() => {
                    const actionArgs = {
                      args: [
                        "success",
                        "\u0639\u0645\u0644\u06cc\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f.",
                        undefined,
                        undefined,
                        "topRight"
                      ]
                    };
                    return $globalActions[
                      "plasmic-antd5-config-provider.showNotification"
                    ]?.apply(null, [...actionArgs.args]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction3"] != null &&
                typeof $steps["invokeGlobalAction3"] === "object" &&
                typeof $steps["invokeGlobalAction3"].then === "function"
              ) {
                $steps["invokeGlobalAction3"] =
                  await $steps["invokeGlobalAction3"];
              }
            }}
            onLoadingviowChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button3", "loadingviow"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__w1Uth
              )}
            >
              {
                "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc"
              }
            </div>
          </Button>
        </div>
      </AntdModal>
      <AntdModal
        data-plasmic-name={"remove"}
        data-plasmic-override={overrides.remove}
        className={classNames("__wab_instance", sty.remove)}
        closeButtonClassName={classNames({ [sty["pcls_H-mCQpoYBjBP"]]: true })}
        closeIcon={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nJwvH
            )}
          >
            {"\n"}
          </div>
        }
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames
        )}
        hideFooter={true}
        modalContentClassName={classNames({ [sty["pcls_McgoZ1V4evGr"]]: true })}
        modalScopeClassName={sty["remove__modal"]}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["remove", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["remove", "open"])}
        title={null}
        trigger={null}
        width={
          hasVariant(globalVariants, "screen", "mobileOnly") ? "100%" : "700"
        }
        wrapClassName={classNames({ [sty["pcls_b2fmrwtkFGwt"]]: true })}
      >
        <div className={classNames(projectcss.all, sty.freeBox___4ZEgg)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__txCku
            )}
          >
            {
              "\u06a9\u0633\u0631 \u0627\u0632 \u0645\u0648\u062c\u0648\u062f\u06cc"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__qYpcC)}>
            <Input
              data-plasmic-name={"valueAdd2"}
              data-plasmic-override={overrides.valueAdd2}
              className={classNames("__wab_instance", sty.valueAdd2)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["valueAdd2", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              placeholder={"\u0645\u0628\u0644\u063a"}
              type={"number"}
              value={generateStateValueProp($state, ["valueAdd2", "value"])}
            />

            <AntdSelect
              data-plasmic-name={"select2"}
              data-plasmic-override={overrides.select2}
              className={classNames("__wab_instance", sty.select2)}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                styleTokensClassNames
              )}
              defaultValue={"toman"}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["select2", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
              options={(() => {
                try {
                  return $state.carts.map(item => ({
                    label: item.name,
                    value: item.id
                  }));
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              placeholder={null}
              popupScopeClassName={sty["select2__popup"]}
              suffixIcon={
                <Icon37Icon
                  className={classNames(projectcss.all, sty.svg__sokza)}
                  role={"img"}
                />
              }
              value={generateStateValueProp($state, ["select2", "value"])}
            />

            <Icon122Icon
              className={classNames(projectcss.all, sty.svg__ep1To)}
              role={"img"}
            />
          </div>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.info2),
              maxLength: 250,
              onChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["info2", "value"],
                  TextArea_Helpers
                ).apply(null, eventArgs);
              },
              placeholder: "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a",
              value: generateStateValueProp($state, ["info2", "value"])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "info2.value"
                }
              ],
              [],
              TextArea_Helpers ?? {},
              child$Props
            );

            return (
              <TextArea
                data-plasmic-name={"info2"}
                data-plasmic-override={overrides.info2}
                {...child$Props}
              />
            );
          })()}
          <Button
            data-plasmic-name={"button4"}
            data-plasmic-override={overrides.button4}
            className={classNames("__wab_instance", sty.button4)}
            color={"red"}
            loadingviow={generateStateValueProp($state, [
              "button4",
              "loadingviow"
            ])}
            onClick={async event => {
              const $steps = {};

              $steps["invokeGlobalAction"] =
                $state.valueAdd2.value != "" &&
                parseInt($state.valueAdd2.value) > 0 &&
                $state.valueAdd2.value != undefined
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.babarkat.com/webhook/saraf/getCustomer/",
                          undefined,
                          (() => {
                            try {
                              return {
                                userToken: $state.token,
                                _customer: $state.customerInfo.id,
                                value: -1 * parseInt($state.valueAdd2.value),
                                priceType: $state.select2.value,
                                type: "transmission",
                                text: $state.info2.value
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] =
                  await $steps["invokeGlobalAction"];
              }

              $steps["invokeGlobalAction2"] =
                $state.valueAdd2.value == "" ||
                $state.valueAdd2.value == undefined ||
                parseInt($state.valueAdd2.value) <= 0
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0644\u0637\u0641\u0627\u064b \u0645\u0628\u0644\u063a \u0635\u062d\u06cc\u062d \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f.",
                          undefined,
                          undefined,
                          "topRight"
                        ]
                      };
                      return $globalActions[
                        "plasmic-antd5-config-provider.showNotification"
                      ]?.apply(null, [...actionArgs.args]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction2"] != null &&
                typeof $steps["invokeGlobalAction2"] === "object" &&
                typeof $steps["invokeGlobalAction2"].then === "function"
              ) {
                $steps["invokeGlobalAction2"] =
                  await $steps["invokeGlobalAction2"];
              }

              $steps["invokeGlobalAction3"] = $steps.invokeGlobalAction?.data
                ?.success
                ? (() => {
                    const actionArgs = {
                      args: [
                        "success",
                        "\u0639\u0645\u0644\u06cc\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f.",
                        undefined,
                        undefined,
                        "topRight"
                      ]
                    };
                    return $globalActions[
                      "plasmic-antd5-config-provider.showNotification"
                    ]?.apply(null, [...actionArgs.args]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction3"] != null &&
                typeof $steps["invokeGlobalAction3"] === "object" &&
                typeof $steps["invokeGlobalAction3"].then === "function"
              ) {
                $steps["invokeGlobalAction3"] =
                  await $steps["invokeGlobalAction3"];
              }
            }}
            onLoadingviowChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["button4", "loadingviow"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dr3Ww
              )}
            >
              {
                "\u06a9\u0633\u0631 \u0627\u0632 \u0645\u0648\u062c\u0648\u062f\u06cc"
              }
            </div>
          </Button>
        </div>
      </AntdModal>
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["invokeGlobalAction"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "PUT",
                    "https://n8n.babarkat.com/webhook/saraf/login/username",
                    undefined,
                    (() => {
                      try {
                        return { userToken: $state.token };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }

          $steps["updateCode"] = $steps.invokeGlobalAction?.data?.success
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["code"]
                  },
                  operation: 0,
                  value: $steps.invokeGlobalAction.data.customerId
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateCode"] != null &&
            typeof $steps["updateCode"] === "object" &&
            typeof $steps["updateCode"].then === "function"
          ) {
            $steps["updateCode"] = await $steps["updateCode"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "name",
    "lastname",
    "mobile",
    "customerId",
    "location",
    "button5",
    "section",
    "header",
    "add",
    "valueAdd",
    "select",
    "info",
    "button3",
    "remove",
    "valueAdd2",
    "select2",
    "info2",
    "button4",
    "sideEffect"
  ],
  name: ["name"],
  lastname: ["lastname"],
  mobile: ["mobile"],
  customerId: ["customerId"],
  location: ["location"],
  button5: ["button5"],
  section: ["section", "header"],
  header: ["header"],
  add: ["add", "valueAdd", "select", "info", "button3"],
  valueAdd: ["valueAdd"],
  select: ["select"],
  info: ["info"],
  button3: ["button3"],
  remove: ["remove", "valueAdd2", "select2", "info2", "button4"],
  valueAdd2: ["valueAdd2"],
  select2: ["select2"],
  info2: ["info2"],
  button4: ["button4"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  name: typeof Input;
  lastname: typeof Input;
  mobile: typeof Input;
  customerId: typeof Input;
  location: typeof TextArea;
  button5: typeof Button;
  section: "section";
  header: "div";
  add: typeof AntdModal;
  valueAdd: typeof Input;
  select: typeof AntdSelect;
  info: typeof TextArea;
  button3: typeof Button;
  remove: typeof AntdModal;
  valueAdd2: typeof Input;
  select2: typeof AntdSelect;
  info2: typeof TextArea;
  button4: typeof Button;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCustomerAddComponnet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCustomerAddComponnet__VariantsArgs;
    args?: PlasmicCustomerAddComponnet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicCustomerAddComponnet__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicCustomerAddComponnet__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCustomerAddComponnet__ArgProps,
          internalVariantPropNames: PlasmicCustomerAddComponnet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCustomerAddComponnet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCustomerAddComponnet";
  } else {
    func.displayName = `PlasmicCustomerAddComponnet.${nodeName}`;
  }
  return func;
}

export const PlasmicCustomerAddComponnet = Object.assign(
  // Top-level PlasmicCustomerAddComponnet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    _name: makeNodeComponent("name"),
    lastname: makeNodeComponent("lastname"),
    mobile: makeNodeComponent("mobile"),
    customerId: makeNodeComponent("customerId"),
    location: makeNodeComponent("location"),
    button5: makeNodeComponent("button5"),
    section: makeNodeComponent("section"),
    header: makeNodeComponent("header"),
    add: makeNodeComponent("add"),
    valueAdd: makeNodeComponent("valueAdd"),
    select: makeNodeComponent("select"),
    info: makeNodeComponent("info"),
    button3: makeNodeComponent("button3"),
    remove: makeNodeComponent("remove"),
    valueAdd2: makeNodeComponent("valueAdd2"),
    select2: makeNodeComponent("select2"),
    info2: makeNodeComponent("info2"),
    button4: makeNodeComponent("button4"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicCustomerAddComponnet
    internalVariantProps: PlasmicCustomerAddComponnet__VariantProps,
    internalArgProps: PlasmicCustomerAddComponnet__ArgProps
  }
);

export default PlasmicCustomerAddComponnet;
/* prettier-ignore-end */
